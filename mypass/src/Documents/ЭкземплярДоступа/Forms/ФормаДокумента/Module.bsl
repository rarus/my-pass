///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

//@skip-check property-return-type
//@skip-check structure-consructor-value-type
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДополнительныеЭлементы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МоиПароли.Свойство КАК Свойство,
			|	МоиПароли.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.МоиПароли КАК МоиПароли
			|ГДЕ
			|	МоиПароли.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Регистратор", Параметры.ЗначениеКопирования);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НайденныеСтроки = СоответствиеСвойств.НайтиСтроки(Новый Структура("Свойство", Выборка.Свойство));
			Если НайденныеСтроки.Количество() Тогда
				ЭтотОбъект[НайденныеСтроки[0].Наименование] = Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьПрисоединенныеФайлы = Параметры.ДобавитьПрисоединенныеФайлы;
	ПоказатьПрисоединенныеФайлы = Параметры.ПоказатьПрисоединенныеФайлы;
	
	УстановитьОтборы();
	
	// ЖурналСобытий
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураСобытия = РегистрыСведений.ЖурналСобытий.СтруктураСобытия();
		СтруктураСобытия.ТипСобытия = Перечисления.ТипыСобытия.Просмотр;
		СтруктураСобытия.ЭкземплярДоступа = Объект.Ссылка;
		СтруктураСобытия.ВидДанных = Объект.ВидДанных;
		РегистрыСведений.ЖурналСобытий.ЗаписатьСобытие(СтруктураСобытия);
	КонецЕсли;
	// Конец ЖурналСобытий
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПоказатьПрисоединенныеФайлы Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПрисоединенныеФайлы;
		
	КонецЕсли;
	
	Если ДобавитьПрисоединенныеФайлы Тогда
		
		ДобавитьНовыйФайл(Неопределено);
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		ВебКлиент = Истина;
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьДополнительныеЭлементы();
	УстановитьОтборы();
	
КонецПроцедуры

//@skip-check statement-type-change
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого ПрисоединенныйФайл Из ТекущийОбъект.ПрисоединенныеФайлы Цикл
		
		ПрисоединенныйФайл.ИмяФайла = ЭтотОбъект["ПрисоединенныйФайлИмяФайла" + ПрисоединенныйФайл.НомерСтроки];
		ПрисоединенныйФайл.Описание = ЭтотОбъект["ПрисоединенныйФайлОписание" + ПрисоединенныйФайл.НомерСтроки];
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерСтроки", ПрисоединенныйФайл.НомерСтроки);
		НайденныеСтроки =  Объект.ПрисоединенныеФайлы.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() И ЗначениеЗаполнено(НайденныеСтроки[0].Адрес) Тогда
			ПрисоединенныйФайл.Файл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(НайденныеСтроки[0].Адрес));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//@skip-check property-return-type
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.МоиПароли");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ЭкземплярДоступа", ТекущийОбъект.Ссылка);
	Блокировка.Заблокировать();
	
	// Подготовим набор записей
	НаборЗаписей = РегистрыСведений.МоиПароли.СоздатьНаборЗаписей();
	НаборЗаписей.Заполнить(Неопределено);
	НаборЗаписей.Отбор.Регистратор.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Прочитать();
	
	// Заполним набор записей
	Для Каждого Свойство Из СоответствиеСвойств Цикл
		Если Свойство.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		Значение = ЭтотОбъект[Свойство.Наименование]; // Характеристика.СвойстваВидовДанных
		НоваяСтрока = Неопределено;
		Для Каждого Строка Из НаборЗаписей Цикл
			Если Строка.Свойство = Свойство.Свойство Тогда
				НоваяСтрока = Строка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = НаборЗаписей.Добавить();
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение) Тогда
			НоваяСтрока.Свойство      = Свойство.Свойство;
			НоваяСтрока.Значение      = Значение;
			НоваяСтрока.ВидДанных     = ТекущийОбъект.ВидДанных;
			НоваяСтрока.ГруппаДанных  = ТекущийОбъект.ГруппаДанных;
			НоваяСтрока.КлассДанных = ТекущийОбъект.КлассДанных;
			НоваяСтрока.ЭкземплярДоступа        = ТекущийОбъект.Ссылка;
			НоваяСтрока.Комментарий   = ТекущийОбъект.Комментарий;
			Если ТекущийОбъект.ПометкаУдаления Тогда
				НоваяСтрока.СтатусДанных = Перечисления.СтатусыДанных.Неактуальный;
			Иначе
				НоваяСтрока.СтатусДанных = ТекущийОбъект.СтатусДанных;
			КонецЕсли;
		Иначе
			НаборЗаписей.Удалить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	// ЖурналСобытий
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураСобытия = РегистрыСведений.ЖурналСобытий.СтруктураСобытия();
		СтруктураСобытия.ТипСобытия = Перечисления.ТипыСобытия.Редактирование;
		СтруктураСобытия.ЭкземплярДоступа = ТекущийОбъект.Ссылка;
		СтруктураСобытия.ВидДанных = Объект.ВидДанных;
		РегистрыСведений.ЖурналСобытий.ЗаписатьСобытие(СтруктураСобытия);
	КонецЕсли;
	// Конец ЖурналСобытий
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	// Отказываемся от стандартной обработки события.
	СтандартнаяОбработка = Ложь;
	
	// Формируем описание обработчика перехвата закрытия формы.
	ОбработкаРезультатаЗакрытия = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "РасширенноеРедактированиеПоляКомментарий");
	
	// Открываем диалог многострочного редактирования текста комментария.
	ПоказатьВводСтроки(ОбработкаРезультатаЗакрытия, СокрЛП(Объект.Комментарий), НСтр("ru = 'Введите комментарий'") + " ...", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДанныхПриИзменении(Элемент)
	
	ОбновитьДополнительныеЭлементы();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

//@skip-check module-structure-form-event-regions
//@skip-check method-param-value-type
//@skip-check module-unused-method
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаКлиенте
Процедура ОткрытьЗначениеСтроки(Команда)
	
	КомандаИмя = СтрЗаменить(Команда.Имя, "ОткрытьЗначениеСтроки", "");
	
	Значение = ЭтотОбъект[КомандаИмя]; // КнопкаФормы
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ЗапускПриложения");
	НачатьЗапускПриложения(ОписаниеОповещения, Строка(Значение));
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Открытие значения'"), , НСтр("ru = 'Переход по ссылке выполнен'"), БиблиотекаКартинок.МоиПаролиУспешно64);
	
КонецПроцедуры

//@skip-check module-structure-form-event-regions
//@skip-check method-param-value-type
//@skip-check module-unused-method
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаКлиенте
Процедура ПоказатьЗначениеСтроки(Команда)
	
	КомандаИмя = СтрЗаменить(Команда.Имя, "ПоказатьЗначениеСтроки", "");
	
	Поле = Элементы[КомандаИмя];
	
	Поле.РежимПароля = НЕ Поле.РежимПароля;
	
	УстановитьСвойстваПоля_РежимПароля(Команда.Имя, Поле.РежимПароля);
	
КонецПроцедуры

//@skip-check module-structure-form-event-regions
//@skip-check method-param-value-type
//@skip-check module-unused-method
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаКлиенте
Процедура СгенерироватьЗначениеСтроки(Команда)
	
	КомандаИмя = СтрЗаменить(Команда.Имя, "СгенерироватьЗначениеСтроки", "");
	
	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("КомандаИмя", КомандаИмя);
	СтруктураОповещения.Вставить("Событие", "ГенерацияЗначения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, СтруктураОповещения);
	ОткрытьФорму("Документ.ЭкземплярДоступа.Форма.ФормаГенерации", , , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//@skip-check unknown-method-property
&НаКлиенте
Процедура ДобавитьНовыйФайл(Команда)
	
	Объект.ПрисоединенныеФайлы.Добавить();
	
	Модифицированность = Истина;
	
	ОбновитьДополнительныеЭлементы_ПрисоединенныеФайлы();
	
	Команда = Команды.Найти("ФайлЗагрузить" + Объект.ПрисоединенныеФайлы[Объект.ПрисоединенныеФайлы.Количество() - 1].НомерСтроки);
	ФайлЗагрузить(Команда);
	
КонецПроцедуры

//@skip-check module-structure-form-event-regions
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура ФайлЗагрузить(Команда)
	
	#Если ВебКлиент Тогда
		
		// Попробуем подключить расширение работы с файлами
		ЗавершениеПодключенияРасширения = Новый ОписаниеОповещения("ЗавершениеПодключенияРасширения", ЭтотОбъект, Команда);
		НачатьПодключениеРасширенияРаботыСФайлами(ЗавершениеПодключенияРасширения);
		
		Возврат;
		
	#КонецЕсли
	
	ФайлЗагрузить_НаКлиенте(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПодключенияРасширения(Подключено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Подключено Тогда
		ФайлЗагрузить_НаКлиенте(ДополнительныеПараметры);
	Иначе
		// Расширение не установлено, пробуем установить
		ЗавершениеУстановкиРасширения = Новый ОписаниеОповещения("ЗавершениеУстановкиРасширения", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(ЗавершениеУстановкиРасширения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеУстановкиРасширения(ДополнительныеПараметры = Неопределено) Экспорт
	
	ФайлЗагрузить_НаКлиенте(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузить_НаКлиенте(Команда)
	
	НомерСтроки = СтрЗаменить(Команда.Имя, "ФайлЗагрузить", "");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерСтроки", Число(НомерСтроки));
	СтрокиПрисоединенногоФайла = Объект.ПрисоединенныеФайлы.НайтиСтроки(СтруктураПоиска);
	Если НЕ СтрокиПрисоединенногоФайла.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл для загрузки'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект, СтрокиПрисоединенногоФайла[0]);
	
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

//@skip-check module-structure-form-event-regions
//@skip-check method-param-value-type
//@skip-check module-unused-method
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаКлиенте
Процедура ФайлВыгрузить(Команда)
	
	НомерСтроки = СтрЗаменить(Команда.Имя, "ФайлВыгрузить", "");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерСтроки", Число(НомерСтроки));
	СтрокиПрисоединенногоФайла = Объект.ПрисоединенныеФайлы.НайтиСтроки(СтруктураПоиска);
	Если НЕ СтрокиПрисоединенногоФайла.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите каталог для сохранения файла'");
	ДиалогВыбораФайла.ПолноеИмяФайла = СтрокиПрисоединенногоФайла[0].ИмяФайла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранениеФайлаЗавершение", ЭтотОбъект, СтрокиПрисоединенногоФайла[0]);
	
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

//@skip-check module-structure-form-event-regions
//@skip-check method-param-value-type
//@skip-check module-unused-method
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаКлиенте
Процедура ФайлОткрыть(Команда)
	
	НомерСтроки = СтрЗаменить(Команда.Имя, "ФайлОткрыть", "");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерСтроки", Число(НомерСтроки));
	СтрокиПрисоединенногоФайла = Объект.ПрисоединенныеФайлы.НайтиСтроки(СтруктураПоиска);
	Если НЕ СтрокиПрисоединенногоФайла.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СохранениеФайлаЗавершение(Новый Массив, СтрокиПрисоединенногоФайла[0]);
	
КонецПроцедуры

//@skip-check module-structure-form-event-regions
//@skip-check method-param-value-type
//@skip-check module-unused-method
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаКлиенте
Процедура ФайлУдалить(Команда)
	
	НомерСтроки = СтрЗаменить(Команда.Имя, "ФайлУдалить", "");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерСтроки", Число(НомерСтроки));
	СтрокиПрисоединенногоФайла = Объект.ПрисоединенныеФайлы.НайтиСтроки(СтруктураПоиска);
	Если НЕ СтрокиПрисоединенногоФайла.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПрисоединенныеФайлы.Удалить(СтрокиПрисоединенногоФайла[0]);
	
	Модифицированность = Истина;
	
	ОбновитьДополнительныеЭлементы_ПрисоединенныеФайлы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Подключаемый обработка результата оповещения.
// 
// Параметры:
//  РезультатОповещения - Строка, Произвольный - Результат оповещения
//  ДополнительныеПараметры - Структура, Неопределено -  Дополнительные параметры
//@skip-check property-return-type
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = "РасширенноеРедактированиеПоляКомментарий" Тогда
		
		Если НЕ Объект.Комментарий = СокрЛП(РезультатОповещения) Тогда
			Объект.Комментарий = СокрЛП(РезультатОповещения);
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ЗапускПриложения" Тогда
		
		// Зарезервировано
		
	ИначеЕсли ДополнительныеПараметры = "ФайлОткрыть" Тогда
		
		// Зарезервировано
		
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Событие = "ГенерацияЗначения" Тогда
		
		Если ЗначениеЗаполнено(РезультатОповещения) Тогда
			ЭтотОбъект[ДополнительныеПараметры.КомандаИмя] = РезультатОповещения;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииКлиент

// Выбор файла завершение.
// 
// Параметры:
//  ВыбранныеФайлы - Массив Из Файл - Выбранные файлы
//  ДополнительныеПараметры - Неопределено -  Дополнительные параметры
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПомещениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайлаНаСервер(ОписаниеОповещения, , , , ВыбранныеФайлы[0], УникальныйИдентификатор);
	Иначе
		Объект.ПрисоединенныеФайлы.Удалить(ДополнительныеПараметры);
		ОбновитьДополнительныеЭлементы_ПрисоединенныеФайлы();
	КонецЕсли;
	
КонецПроцедуры

// Помещение файла завершение.
// 
// Параметры:
//  ПомещенныйФайл - Структура - Помещенный файл
//  ДополнительныеПараметры - Неопределено -  Дополнительные параметры
//@skip-check property-return-type
&НаКлиенте
Процедура ПомещениеФайлаЗавершение(ПомещенныйФайл, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПомещенныйФайл <> Неопределено Тогда
		
		ДополнительныеПараметры.ИмяФайла = ПомещенныйФайл.СсылкаНаФайл.Имя;
		ДополнительныеПараметры.Описание = ПомещенныйФайл.СсылкаНаФайл.Файл.ПолноеИмя;
		ДополнительныеПараметры.Адрес    = ПомещенныйФайл.Адрес;
		
		ЭтотОбъект["ПрисоединенныйФайлИмяФайла" + ДополнительныеПараметры.НомерСтроки] = ДополнительныеПараметры.ИмяФайла;
		ЭтотОбъект["ПрисоединенныйФайлОписание" + ДополнительныеПараметры.НомерСтроки] = ДополнительныеПараметры.Описание;
		
		Модифицированность = Истина;
		
		ОбновитьДополнительныеЭлементы_ПрисоединенныеФайлы();
		
	КонецЕсли;
	
КонецПроцедуры

//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура СохранениеФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ПутьКФайлу = СохранениеФайлаЗавершениеНаСервере(ВыбранныеФайлы, ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.Описание);
		
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ФайлОткрыть");
			НачатьЗапускПриложения(ОписаниеОповещения, ПутьКФайлу);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСервер

//@skip-check property-return-type
//@skip-check statement-type-change
//@skip-check structure-consructor-value-type
&НаСервере
Процедура ОбновитьДополнительныеЭлементы()
	
	// Удаляем имеющиеся элементы
	Если СоответствиеСвойств.Количество() Тогда
		
		// Реквизиты
		РеквизитыДляУдаления = Новый Массив; // Массив из Строка
		
		Для Каждого СвойствоСоответствие Из СоответствиеСвойств Цикл
			
			РеквизитыДляУдаления.Добавить(СвойствоСоответствие.Наименование);
			
			// Команды
			КомандаОткрытия = Команды.Найти(СвойствоСоответствие.ИмяКнопкиОткрытия);
			Если НЕ КомандаОткрытия = Неопределено Тогда
				Команды.Удалить(КомандаОткрытия);
			КонецЕсли;
			
			КомандаРежимаПароля = Команды.Найти(СвойствоСоответствие.ИмяКнопкиРежимаПароля);
			Если НЕ КомандаРежимаПароля = Неопределено Тогда
				Команды.Удалить(КомандаРежимаПароля);
			КонецЕсли;
			
			КомандаГенератора = Команды.Найти(СвойствоСоответствие.ИмяКнопкиГенератора);
			Если НЕ КомандаГенератора = Неопределено Тогда
				Команды.Удалить(КомандаГенератора);
			КонецЕсли;
			
		КонецЦикла;
		
		ИзменитьРеквизиты(, РеквизитыДляУдаления);
		
		// Элементы
		ЭлементыДляУдаления = Новый Массив; // Массив из ПолеФормы
		
		Для Каждого Элемент Из Элементы.СтраницаДанныеЛево.ПодчиненныеЭлементы Цикл
			ЭлементыДляУдаления.Добавить(Элемент);
		КонецЦикла;
		
		Для Каждого Элемент Из Элементы.СтраницаДанныеПраво.ПодчиненныеЭлементы Цикл
			ЭлементыДляУдаления.Добавить(Элемент);
		КонецЦикла;
		
		Для Каждого Элемент Из ЭлементыДляУдаления Цикл
			Элементы.Удалить(Элемент);
		КонецЦикла;
		
		// Соответствия свойств
		СоответствиеСвойств.Очистить();
		
	КонецЕсли;
	
	// Покажем пользователю поясняющую надпись
	Элементы.ПодсказкаЗаполненияСвойств.Видимость = ИСТИНА;
	
	// Продолжаем, только если указан вид данных
	Если Объект.ВидДанных.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Добавляем реквизиты
	РеквизитыДляДобавления = Новый Массив; // Массив из РеквизитФормы
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДанныхСвойстваВидаДанных.Свойство КАК Свойство,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.ТипЗначения КАК СвойствоТипЗначения,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.Наименование КАК СвойствоНаименование,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.Предопределенный КАК СвойствоПредопределенный,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.РежимПароля КАК СвойствоРежимПароля,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.Открывать КАК СвойствоОткрывать,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.Генератор КАК СвойствоГенератор,
		|	ВидыДанныхСвойстваВидаДанных.Отображать КАК Отображать,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.Комментарий КАК СвойствоКомментарий
		|ИЗ
		|	Справочник.ВидыДанных.СвойстваВидаДанных КАК ВидыДанныхСвойстваВидаДанных
		|ГДЕ
		|	ВидыДанныхСвойстваВидаДанных.Ссылка = &ВидДанных
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыДанныхСвойстваВидаДанных.НомерСтроки";
	Запрос.УстановитьПараметр("ВидДанных", Объект.ВидДанных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Итератор = 1;
	
	Пока Выборка.Следующий() Цикл
		
		НаименованиеСвойства = "ДополнительноеСвойствоВидаДанных" + Итератор;
		
		НовыйРеквизит = Новый РеквизитФормы(НаименованиеСвойства, Выборка.СвойствоТипЗначения, , Выборка.СвойствоНаименование);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		
		Итератор = Итератор + 1;
		
		НовоеСоответствие = СоответствиеСвойств.Добавить();
		НовоеСоответствие.Наименование     = НаименованиеСвойства;
		НовоеСоответствие.ТипЗначения      = Выборка.СвойствоТипЗначения;
		НовоеСоответствие.Свойство         = Выборка.Свойство;
		НовоеСоответствие.Предопределенный = Выборка.СвойствоПредопределенный;
		НовоеСоответствие.РежимПароля      = Выборка.СвойствоРежимПароля;
		НовоеСоответствие.Генератор        = Выборка.СвойствоГенератор;
		НовоеСоответствие.Открывать        = Выборка.СвойствоОткрывать;
		НовоеСоответствие.Отображать       = Выборка.Отображать;
		
		РеквизитыДляДобавления.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(РеквизитыДляДобавления);
	
	// Добавляем элементы формы
	Для Каждого Свойство Из СоответствиеСвойств Цикл
		
		// если свойство скрыто, то не выводить
		Если НЕ Свойство.Отображать Тогда
			Продолжить;
		КонецЕсли;
		
		Если Свойство.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить(Свойство.Наименование, Тип("ПолеФормы"), Элементы.СтраницаДанныеЛево);
		НовыйЭлемент.ПутьКДанным = Свойство.Наименование;
		Если Свойство.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		Иначе
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Свойство.Свойство);
			НовыйМассив = Новый Массив(); // Массив из ПараметрВыбора
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			НовыйЭлемент.ПараметрыВыбора = НовыеПараметры;
			НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;
		
		НовыйЭлементГруппаКоманды = Элементы.Добавить(Свойство.Наименование + "Команды", Тип("ГруппаФормы"), Элементы.СтраницаДанныеПраво);
		НовыйЭлементГруппаКоманды.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НовыйЭлементГруппаКоманды.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		НовыйЭлементГруппаКоманды.ОтображатьЗаголовок = Ложь;
		НовыйЭлементГруппаКоманды.Объединенная = Ложь;
		
		Если Свойство.РежимПароля Тогда
			
			// Команда
			НоваяКоманда = Команды.Добавить(Свойство.Наименование + "ПоказатьЗначениеСтроки");
			НоваяКоманда.Действие = "ПоказатьЗначениеСтроки";
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиСкрыть;
			НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
			НоваяКоманда.Подсказка = НСтр("ru = 'Показать значение без режима пароля'");
			
			// Кнопка
			НовыйЭлементКнопки = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), НовыйЭлементГруппаКоманды);
			НовыйЭлементКнопки.ИмяКоманды = НоваяКоманда.Имя;
			НовыйЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			
			Свойство.ИмяКнопкиРежимаПароля = НовыйЭлементКнопки.Имя;
			
			НовыйЭлемент.РежимПароля = Истина;
			
		КонецЕсли;
		
		Если Свойство.Генератор Тогда
			
			// Команда
			НоваяКоманда = Команды.Добавить(Свойство.Наименование + "СгенерироватьЗначениеСтроки");
			НоваяКоманда.Действие = "СгенерироватьЗначениеСтроки";
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиГенератор;
			НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
			НоваяКоманда.Подсказка = НСтр("ru = 'Сгенерировать новое значение'");
			
			// Кнопка
			НовыйЭлементКнопки = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), НовыйЭлементГруппаКоманды);
			НовыйЭлементКнопки.ИмяКоманды = НоваяКоманда.Имя;
			НовыйЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			
			Свойство.ИмяКнопкиГенератора = НовыйЭлементКнопки.Имя;
			
		КонецЕсли;
		
		Если Свойство.Открывать Тогда
			
			// Команда
			НоваяКоманда = Команды.Добавить(Свойство.Наименование + "ОткрытьЗначениеСтроки");
			НоваяКоманда.Действие = "ОткрытьЗначениеСтроки";
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиПереходПоСсылке;
			НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
			НоваяКоманда.Подсказка = НСтр("ru = 'Открыть значение в стороннем приложении'");
			
			// Кнопка
			НовыйЭлементКнопки = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), НовыйЭлементГруппаКоманды);
			НовыйЭлементКнопки.ИмяКоманды = НоваяКоманда.Имя;
			НовыйЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			
			Свойство.ИмяКнопкиОткрытия = НовыйЭлементКнопки.Имя;
			
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить(Свойство.Наименование + "Декорация", Тип("ДекорацияФормы"), НовыйЭлементГруппаКоманды);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = "";
		
	КонецЦикла;
	
	// Заполняем значения из регистра сведений "Мои пароли"
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МоиПароли.Свойство КАК Свойство,
		|	МоиПароли.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.МоиПароли КАК МоиПароли
		|ГДЕ
		|	МоиПароли.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = СоответствиеСвойств.НайтиСтроки(Новый Структура("Свойство", Выборка.Свойство));
		Если НайденныеСтроки.Количество() Тогда
			ЭтотОбъект[НайденныеСтроки[0].Наименование] = Выборка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Спрячем пояснение, если на страницу были добавлены свойства
	Если СоответствиеСвойств.Количество() > 0 Тогда
		Элементы.ПодсказкаЗаполненияСвойств.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	ОбновитьДополнительныеЭлементы_ПрисоединенныеФайлы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеЭлементы_ПрисоединенныеФайлы()
	
	// Удаляем и добавляем реквизиты
	УдаляемыеРеквизиты = Новый Массив; // Массив Из Строка
	ГруппаПрисоединенныеФайлы = Элементы.Найти("ГруппаПрисоединенныеФайлы");
	
	Если НЕ ГруппаПрисоединенныеФайлы = Неопределено Тогда
		
		Для Каждого ГруппаПрисоединенныйФайл Из ГруппаПрисоединенныеФайлы.ПодчиненныеЭлементы Цикл
			
			Если ГруппаПрисоединенныйФайл.Имя = "ДобавитьНовыйФайл" Тогда
				Продолжить;
			КонецЕсли;
			
			ПрисоединенныйФайлНомер = СтрЗаменить(ГруппаПрисоединенныйФайл.Имя, "ГруппаФайл", "");
			
			УдаляемыеРеквизиты.Добавить("ПрисоединенныйФайлИмяФайла" + ПрисоединенныйФайлНомер);
			УдаляемыеРеквизиты.Добавить("ПрисоединенныйФайлОписание" + ПрисоединенныйФайлНомер);
			
			Команды.Удалить(Команды.Найти("ФайлЗагрузить" + ПрисоединенныйФайлНомер));
			Команды.Удалить(Команды.Найти("ФайлУдалить"   + ПрисоединенныйФайлНомер));
			
			Если НЕ ВебКлиент Тогда
				Команды.Удалить(Команды.Найти("ФайлВыгрузить" + ПрисоединенныйФайлНомер));
				Команды.Удалить(Команды.Найти("ФайлОткрыть"   + ПрисоединенныйФайлНомер));
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.Удалить(ГруппаПрисоединенныеФайлы);
		
	КонецЕсли;
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	ДобавляемыеРеквизиты = Новый Массив; // Массив из РеквизитФормы
	
	Для Каждого ПрисоединенныйФайл Из Объект.ПрисоединенныеФайлы Цикл
		
		// Имя файла
		НовыйРеквизит = Новый РеквизитФормы(
			"ПрисоединенныйФайлИмяФайла" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"),
			Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(250)));
		
		НовыйРеквизит.СохраняемыеДанные = Истина;
		
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		// Описание
		НовыйРеквизит = Новый РеквизитФормы(
			"ПрисоединенныйФайлОписание" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"),
			Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0)));
		
		НовыйРеквизит.СохраняемыеДанные = Истина;
		
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Присоединенные файлы - общая группа
	ГруппаПрисоединенныеФайлы = Элементы.Добавить("ГруппаПрисоединенныеФайлы", Тип("ГруппаФормы"), Элементы.СтраницаПрисоединенныеФайлы);
	ГруппаПрисоединенныеФайлы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПрисоединенныеФайлы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПрисоединенныеФайлы.ОтображатьЗаголовок = Ложь;
	ГруппаПрисоединенныеФайлы.РастягиватьПоГоризонтали = Истина;
	
	// Присоединенные файлы - элементы
	Для Каждого ПрисоединенныйФайл Из Объект.ПрисоединенныеФайлы Цикл
		
		ГруппаФайл = Элементы.Добавить("ГруппаФайл" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаПрисоединенныеФайлы);
		ГруппаФайл.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФайл.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаФайл.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаФайл.ОтображатьЗаголовок = Ложь;
		ГруппаФайл.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
		
		ГруппаФайлЗаголовок = Элементы.Добавить("ГруппаФайлЗаголовок" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаФайл);
		ГруппаФайлЗаголовок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФайлЗаголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаФайлЗаголовок.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаФайлЗаголовок.ОтображатьЗаголовок = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("ПрисоединенныйФайлИмяФайла" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"), Тип("ПолеФормы"), ГруппаФайлЗаголовок);
		НовыйЭлемент.ПутьКДанным = "ПрисоединенныйФайлИмяФайла" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0");
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		НовыйЭлемент.Подсказка = НСтр("ru = 'Имя файла'");
		НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'Имя присоединенного файла...'");
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
		ЭтотОбъект[НовыйЭлемент.Имя] = ПрисоединенныйФайл.ИмяФайла;
		
		// Загрузить
		// Команда
		НоваяКоманда = Команды.Добавить("ФайлЗагрузить" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"));
		НоваяКоманда.Действие = "ФайлЗагрузить";
		НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиЗагрузить;
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка = НСтр("ru = 'Загрузить файл в программу'");
		// Кнопка
		НовыйЭлементКнопки = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаФайлЗаголовок);
		НовыйЭлементКнопки.ИмяКоманды = НоваяКоманда.Имя;
		НовыйЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйЭлементКнопки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
		// Выгрузить
		Если НЕ ВебКлиент Тогда
			
			// Команда
			НоваяКоманда = Команды.Добавить("ФайлВыгрузить" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"));
			НоваяКоманда.Действие = "ФайлВыгрузить";
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиСкачать;
			НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
			НоваяКоманда.Подсказка = НСтр("ru = 'Выгрузить файл из программы'");
			// Кнопка
			НовыйЭлементКнопки = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаФайлЗаголовок);
			НовыйЭлементКнопки.ИмяКоманды = НоваяКоманда.Имя;
			НовыйЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			НовыйЭлементКнопки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			
		КонецЕсли;
		
		// Открыть
		Если НЕ ВебКлиент Тогда
			
			// Команда
			НоваяКоманда = Команды.Добавить("ФайлОткрыть" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"));
			НоваяКоманда.Действие = "ФайлОткрыть";
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиПереходПоСсылке;
			НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
			НоваяКоманда.Подсказка = НСтр("ru = 'Открыть файл в стороннем приложении'");
			// Кнопка
			НовыйЭлементКнопки = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаФайлЗаголовок);
			НовыйЭлементКнопки.ИмяКоманды = НоваяКоманда.Имя;
			НовыйЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			НовыйЭлементКнопки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			
		КонецЕсли;
		
		// Удалить
		// Команда
		НоваяКоманда = Команды.Добавить("ФайлУдалить" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"));
		НоваяКоманда.Действие = "ФайлУдалить";
		НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиУдалить;
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка = НСтр("ru = 'Удалить файл'");
		// Кнопка
		НовыйЭлементКнопки = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаФайлЗаголовок);
		НовыйЭлементКнопки.ИмяКоманды = НоваяКоманда.Имя;
		НовыйЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйЭлементКнопки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
		НовыйЭлемент = Элементы.Добавить("ПрисоединенныйФайлОписание" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0"), Тип("ПолеФормы"), ГруппаФайл);
		НовыйЭлемент.ПутьКДанным = "ПрисоединенныйФайлОписание" + Формат(ПрисоединенныйФайл.НомерСтроки, "ЧГ=0");
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.МногострочныйРежим = Истина;
		НовыйЭлемент.Высота = 2;
		НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		НовыйЭлемент.Подсказка = НСтр("ru = 'Описание файла'");
		НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'Введите описание присоединенного файла...'");
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.РастягиватьПоВертикали = Ложь;
		
		ЭтотОбъект[НовыйЭлемент.Имя] = ПрисоединенныйФайл.Описание;
		
	КонецЦикла;
	
КонецПроцедуры

// @skip-check property-return-type
// 
// Параметры:
//  ИмяКоманды - Строка - Имя команды
//  РежимПароля - Булево - Режим пароля
&НаСервере
Процедура УстановитьСвойстваПоля_РежимПароля(Знач ИмяКоманды, Знач РежимПароля)
	
	Если РежимПароля Тогда
		Элементы[ИмяКоманды].Картинка = БиблиотекаКартинок.МоиПаролиСкрыть;
		Команды[ИмяКоманды].Подсказка = НСтр("ru = 'Показать значение без режима пароля'");
	Иначе
		Элементы[ИмяКоманды].Картинка = БиблиотекаКартинок.МоиПаролиПоказать;
		Команды[ИмяКоманды].Подсказка = НСтр("ru = 'Показать значение в режиме пароля'");
	КонецЕсли;
	
КонецПроцедуры

// Сохранение файла завершение на сервере.
// 
// Параметры:
//  ВыбранныеФайлы - Массив из Строка -  Выбранные файлы
//  ИмяФайла - Строка -  Имя файла
//  Описание - Строка -  Описание
// 
// Возвращаемое значение:
//  Неопределено, Произвольный -  Сохранение файла завершение на сервере
//@skip-check dynamic-access-method-not-found
&НаСервере
Функция СохранениеФайлаЗавершениеНаСервере(Знач ВыбранныеФайлы, Знач ИмяФайла, Знач Описание)
	
	Если НЕ ВыбранныеФайлы.Количество() Тогда
		ВыбранныеФайлы.Добавить(КаталогВременныхФайлов() + ИмяФайла);
	КонецЕсли;
	
	ДоступОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяФайла", ИмяФайла);
	СтруктураПоиска.Вставить("Описание", Описание);
	СтрокиПрисоединенногоФайла = ДоступОбъект.ПрисоединенныеФайлы.НайтиСтроки(СтруктураПоиска);
	Если НЕ СтрокиПрисоединенногоФайла.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = СтрокиПрисоединенногоФайла[0].Файл.Получить();
	Если НЕ Файл = Неопределено Тогда
		Файл.Записать(ВыбранныеФайлы[0]);
	КонецЕсли;
	
	Возврат ВыбранныеФайлы[0];
	
КонецФункции

&НаСервере
Процедура УстановитьОтборы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЖурналСобытий, "ЭкземплярДоступа", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный
	);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
