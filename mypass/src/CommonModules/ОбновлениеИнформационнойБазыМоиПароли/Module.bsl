///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

// BSLLS:LineLength-off в модуле постаянно указываются длинные строковые константы обработчиков,
// а их лучше записывать в одну строку

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ИдентификаторИнтернетПоддержки - Строка - уникальное имя программы в сервисах Интернет-поддержки.
//   * ТребуемыеПодсистемы - Массив из Строка - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	// Служебные функции подсистемы собраны в отдельном модуле
	МоиПаролиСлужебный.ПриДобавленииПодсистемы(Описание);
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыМоиПароли.ВыполнитьНачальноеЗаполнение";
	Обработчик.РежимВыполнения     = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.1.5";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыМоиПароли.ВыполнитьОбновлениеПрограммы_1_0_1_5";
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.1.7";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыМоиПароли.ВыполнитьОбновлениеПрограммы_1_0_1_7";
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.1.8";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыМоиПароли.ВыполнитьОбновлениеПрограммы_1_0_1_8";
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.1.9";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыМоиПароли.ВыполнитьОбновлениеПрограммы_1_0_1_9";
	Обработчик.РежимВыполнения     = "Оперативно";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы
//@skip-check module-empty-method
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы
//@skip-check module-empty-method
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений
//@skip-check module-empty-method
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
//@skip-check module-empty-method
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
//@skip-check module-empty-method
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура:
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
//@skip-check module-empty-method
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации,
												Знач ПредыдущаяВерсияКонфигурации,
												Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьНачальноеЗаполнение() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьПодсистемуМоиПароли    .Установить(Истина);
	Константы.ИспользоватьКлассыДанных           .Установить(Истина);
	Константы.ИспользоватьГруппыДанных           .Установить(Истина);
	
	Константы.ИспользоватьНапоминанияПользователя.Установить(ЛОЖЬ);
	
	РежимРабочееМесто = МоиПаролиСлужебный.ЭтоНезависимоеПриложение();
	Константы.РежимЗапускаПриложенияРабочееМесто.Установить(РежимРабочееМесто);
	Константы.СтильИнтерфейсаМоиПароли.Установить(Перечисления.СтилиИнтерфейсаМоиПароли.Современный);
	
	Константы.НачальнаяНастройкаМоиПаролиЗавершена.Установить(ЛОЖЬ);
	
	Справочники.ГруппыДанных.ВыполнитьНачальноеЗаполнение();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//!!!
//Корень.Адрес каталога обновлений конфигурации. Заменить на актуальную ссылка
//В ридми (дистриьутив) исправить адрес размещения статьи

//!!! Удалить после перехода на релиз 1.0.2.х
Процедура ВыполнитьОбновлениеПрограммы_1_0_0_8()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДанных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыДанных КАК ВидыДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвойстваВидовДанных.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваВидовДанных КАК СвойстваВидовДанных
		|ГДЕ
		|	СвойстваВидовДанных.Наименование ПОДОБНО &Пароль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";
	Запрос.УстановитьПараметр("Пароль", "%пароль%");
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыДанных");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса[0];
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		Блокировка.Заблокировать();
		
		// Заполним флаг "Отображать" в видах данных
		Выборка = РезультатЗапроса[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			ВидДанныхОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Для Каждого СвойствоВидаДанных Из ВидДанныхОбъект.СвойстваВидаДанных Цикл
				СвойствоВидаДанных.Отображать = Истина;
			КонецЦикла;
			ВидДанныхОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка обновления'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ВидыДанных, ,
			ОписаниеОшибки);
		
	КонецПопытки;
	
	// Заполним флаг "Генератор" в свойствах видов данных
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СвойствоВидаДанныхОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СвойствоВидаДанныхОбъект.Генератор = Истина;
		СвойствоВидаДанныхОбъект.Записать();
	КонецЦикла;
	
	// Удалим неиспользуемых пользователей
	Выборка = РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСсылка = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Ссылка);
		НайденныеСсылки = НайтиПоСсылкам(МассивСсылка);
		Если НЕ НайденныеСсылки.Количество() Тогда
			ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПользовательОбъект.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение и запуск центра мониторинга
	ЦентрМониторингаСлужебный.ПервоначальноеЗаполнение();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//!!! Удалить после перехода на релиз 1.0.2.х
Процедура ВыполнитьОбновлениеПрограммы_1_0_1_5() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьПодсистемуМоиПароли.Установить(ИСТИНА);
	Константы.ИспользоватьКлассыДанных.Установить(ИСТИНА);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//!!! Удалить после перехода на релиз 1.0.2.х
Процедура ВыполнитьОбновлениеПрограммы_1_0_1_7() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьКлассыДанных.Установить(Истина);
	Константы.ИспользоватьГруппыДанных.Установить(Истина);
	
	РежимыОсновногоОкна = Новый Соответствие();
	РежимыОсновногоОкна.Вставить(ВРег("Обычный"),                   ЛОЖЬ);
	РежимыОсновногоОкна.Вставить(ВРег("РабочееМесто"),              ИСТИНА);
	РежимыОсновногоОкна.Вставить(ВРег("ВстроенноеРабочееМесто"),    ИСТИНА);
	РежимыОсновногоОкна.Вставить(ВРег("ПолноэкранноеРабочееМесто"), ИСТИНА);
	РежимыОсновногоОкна.Вставить(ВРег("Киоск"),                     ИСТИНА);
	
	ТекущийРежимОкна = Константы.УдалитьРежимОкнаПриложенияПоУмолчанию.Получить();
	НовыйРежимОкна   = РежимыОсновногоОкна.Получить(ВРег(ТекущийРежимОкна));
	
	Если НовыйРежимОкна=Неопределено Тогда
		Константы.РежимЗапускаПриложенияРабочееМесто.Установить(МоиПаролиСлужебный.ЭтоНезависимоеПриложение());
	Иначе
		Константы.РежимЗапускаПриложенияРабочееМесто.Установить(НовыйРежимОкна);
	КонецЕсли;
	
	СтильИнтерфейса = Константы.УдалитьСтильИнтерфейсаПоУмолчанию.Получить();
	Если ВРег(СокрЛП(СтильИнтерфейса))=ВРег("Классический") Тогда
		НовоеЗначение = Перечисления.СтилиИнтерфейсаМоиПароли.Классический;
	Иначе
		НовоеЗначение = Перечисления.СтилиИнтерфейсаМоиПароли.Современный;
	КонецЕсли;
	Константы.СтильИнтерфейсаМоиПароли.Установить(НовоеЗначение);
	
	НастройкаЗавершена = Константы.УдалитьНеЗадаватьВопросВыбораСтиляИнтерфейса.Получить() И Константы.УдалитьНеЗадаватьВопросНачальногоСозданияВидовДанных.Получить();
	Константы.НачальнаяНастройкаМоиПаролиЗавершена.Установить(НастройкаЗавершена);
	
	Справочники.ГруппыДанных.ВыполнитьНачальноеЗаполнение();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//!!! Удалить после перехода на релиз 1.0.2.х
Процедура ВыполнитьОбновлениеПрограммы_1_0_1_8() Экспорт
	
	// перенос данных из общих реквизитов в реквизиты объекта
	
	УстановитьПривилегированныйРежим(Истина);
	
	// справочники и ПВХ
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДанных.Ссылка КАК Ссылка,
	|	ВидыДанных.УдалитьАвтор КАК Автор,
	|	ВидыДанных.УдалитьСоздан КАК ДатаСоздания,
	|	ВидыДанных.УдалитьИзменен КАК ДатаИзменения,
	|	ВидыДанных.УдалитьКомментарий КАК Комментарий
	|ИЗ
	|	Справочник.ВидыДанных КАК ВидыДанных
	|ГДЕ
	|	ВидыДанных.ДатаСоздания = &ПустаяДата
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГруппыДанных.Ссылка,
	|	ГруппыДанных.УдалитьАвтор,
	|	ГруппыДанных.УдалитьСоздан,
	|	ГруппыДанных.УдалитьИзменен,
	|	ГруппыДанных.УдалитьКомментарий
	|ИЗ
	|	Справочник.ГруппыДанных КАК ГруппыДанных
	|ГДЕ
	|	ГруппыДанных.ДатаСоздания = &ПустаяДата
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСвойства.Ссылка,
	|	ДополнительныеСвойства.УдалитьАвтор,
	|	ДополнительныеСвойства.УдалитьСоздан,
	|	ДополнительныеСвойства.УдалитьИзменен,
	|	ДополнительныеСвойства.УдалитьКомментарий
	|ИЗ
	|	Справочник.ДополнительныеСвойства КАК ДополнительныеСвойства
	|ГДЕ
	|	ДополнительныеСвойства.ДатаСоздания = &ПустаяДата
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвойстваВидовДанных.Ссылка,
	|	СвойстваВидовДанных.УдалитьАвтор,
	|	СвойстваВидовДанных.УдалитьСоздан,
	|	СвойстваВидовДанных.УдалитьИзменен,
	|	СвойстваВидовДанных.УдалитьКомментарий
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваВидовДанных КАК СвойстваВидовДанных
	|ГДЕ
	|	СвойстваВидовДанных.ДатаСоздания = &ПустаяДата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, Выборка,, "Ссылка");
		
		Попытка
			ТекущийОбъект.ОбменДанными.Загрузка = ИСТИНА;
			ТекущийОбъект.Записать();
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
		КонецПопытки;
		
	КонецЦикла;
	
	// документы
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭкземплярДоступа.Ссылка КАК Ссылка,
	|	ЭкземплярДоступа.УдалитьАвтор КАК Автор,
	|	ЭкземплярДоступа.УдалитьСоздан КАК ДатаСоздания,
	|	ЭкземплярДоступа.УдалитьИзменен КАК ДатаИзменения,
	|	ЭкземплярДоступа.УдалитьКомментарий КАК Комментарий
	|ИЗ
	|	Документ.ЭкземплярДоступа КАК ЭкземплярДоступа
	|ГДЕ
	|	ЭкземплярДоступа.ДатаСоздания = &ПустаяДата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, Выборка,, "Ссылка");
		
		Попытка
			ТекущийОбъект.ОбменДанными.Загрузка = ИСТИНА;
			ТекущийОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.МоиПароли.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка, ИСТИНА);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если ЗначениеЗаполнено(Запись.ДатаСоздания) Тогда
				Продолжить;
			КонецЕсли;
			
			Запись.Автор         = Запись.УдалитьАвтор;
			Запись.ДатаСоздания  = Запись.УдалитьСоздан;
			Запись.ДатаИзменения = Запись.УдалитьИзменен;
			Запись.Комментарий   = Запись.УдалитьКомментарий;
			
		КонецЦикла;
		
		Если НЕ НаборЗаписей.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
			НаборЗаписей.Записать();
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
		КонецПопытки;
		
	КонецЦикла;
	
	// регистры сведений
	
	// ЖурналСобытий
	НаборЗаписей = РегистрыСведений.ЖурналСобытий.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если ЗначениеЗаполнено(Запись.ДатаСоздания) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.Автор         = Запись.УдалитьАвтор;
		Запись.ДатаСоздания  = Запись.УдалитьСоздан;
		Запись.ДатаИзменения = Запись.УдалитьИзменен;
		Запись.Комментарий   = Запись.УдалитьКомментарий;
		
	КонецЦикла;
	
	Если НаборЗаписей.Модифицированность() Тогда
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
			НаборЗаписей.Записать();
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
		КонецПопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//!!! Удалить после перехода на релиз 1.0.2.х
Процедура ВыполнитьОбновлениеПрограммы_1_0_1_9() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсключаемыеОбъекты = Новый Массив();
	ИсключаемыеОбъекты.Добавить(Тип("СправочникСсылка.УдалитьГруппыИсполнителейЗадач"));
	ИсключаемыеОбъекты.Добавить(Тип("СправочникСсылка.УдалитьДополнительныеОтчетыИОбработки"));
	ИсключаемыеОбъекты.Добавить(Тип("СправочникСсылка.УдалитьПапкиФайлов"));
	ИсключаемыеОбъекты.Добавить(Тип("СправочникСсылка.УдалитьУчетныеЗаписиЭлектроннойПочты"));
	ИсключаемыеОбъекты.Добавить(Тип("ПланВидовХарактеристикСсылка.УдалитьДополнительныеРеквизитыИСведения"));
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыЗначенийДоступа.ЗначениеДоступа КАК ЗначениеДоступа,
	|	ГруппыЗначенийДоступа.ГруппаЗначенийДоступа КАК ГруппаЗначенийДоступа,
	|	ГруппыЗначенийДоступа.ГруппаДанных КАК ГруппаДанных
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ИсключаемыеОбъекты.Найти(ТипЗнч(Выборка.ЗначениеДоступа))=Неопределено И ИсключаемыеОбъекты.Найти(ТипЗнч(Выборка.ГруппаЗначенийДоступа))=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьМенеджерЗаписи();
		Запись.ЗначениеДоступа       = Выборка.ЗначениеДоступа;
		Запись.ГруппаЗначенийДоступа = Выборка.ГруппаЗначенийДоступа;
		Запись.ГруппаДанных          = Выборка.ГруппаДанных;
		
		Запись.Удалить();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
