///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Производит открытие формы рабочего места "Мои пароли"
//
Процедура ОткрытьОсновнуюФорму() Экспорт
	
	РежимЗапускаРабочееМесто = (КлиентскоеПриложение.ПолучитьРежимОсновногоОкна()<>РежимОсновногоОкнаКлиентскогоПриложения.Обычный);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимЗапускаРабочееМесто", РежимЗапускаРабочееМесто);
	
	ОткрытьФорму("Обработка.МоиДоступыИПароли.Форма", ПараметрыФормы);
	
КонецПроцедуры // ОткрытьОсновнуюФорму()

// Производит открытие формы настроек рабочего места "Мои пароли"
//
Процедура ОткрытьНастройки(Владелец=Неопределено, ОписаниеОповещенияОЗакрытии=Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидФормыНастройки", ИСТИНА);
	
	ОткрытьФорму("Обработка.МоиДоступыИПароли.Форма", ПараметрыФормы, Владелец, Владелец,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры // ОткрытьНастройки()

// Производит запуск матера начального заполнения программы
//
Процедура ОткрытьМастерЗаполнения(Владелец=Неопределено, ОписаниеОповещенияОЗакрытии=Неопределено) Экспорт
	
	РежимЗапускаРабочееМесто = (КлиентскоеПриложение.ПолучитьРежимОсновногоОкна()<>РежимОсновногоОкнаКлиентскогоПриложения.Обычный);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимЗапускаРабочееМесто", РежимЗапускаРабочееМесто);
	
	ОткрытьФорму("Обработка.МастерНачальнойНастройки.Форма", ПараметрыФормы, Владелец,,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры // ОткрытьМастерЗаполнения()

#Область СпискиВыбораОтборов

// Процедура обработки выбора значения на клиенте.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма, где совершилось действие.
//  ТекущиеДанные			 - СтрокаТаблицыЗначений - Обрабатываемая строка.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура КлассификаторВыборНаКлиенте(Форма, ТекущиеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма.ТекущийОтборКлассДанных.Очистить();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КомандаДанные) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 1);
		СтруктураПоиска.Вставить("КомандаДанные", ПредопределенноеЗначение("Перечисление.КлассыДанных.ПустаяСсылка"));
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКоманды.Количество() Тогда
			НайденныеКоманды[0].Использование = Ложь;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 1);
		СтруктураПоиска.Вставить("Использование", Истина);
		
		НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		
		Форма.Элементы.ГруппаОтборКлассификаторПодменю.Заголовок = НСтр("ru = 'Класс данных:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
		Если НЕ НайденныеКомандыИспользование.Количество() Тогда
			Форма.ТекущийОтборКлассДанных.Добавить(ПредопределенноеЗначение("Перечисление.КлассыДанных.ПустаяСсылка"));
		КонецЕсли;
		
		Для Каждого НайденнаяКоманда Из НайденныеКомандыИспользование Цикл
			Если ЗначениеЗаполнено(НайденнаяКоманда.КомандаДанные) Тогда
				Форма.ТекущийОтборКлассДанных.Добавить(НайденнаяКоманда.КомандаДанные);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 1);
		СтруктураПоиска.Вставить("Использование", Ложь);
		СтруктураПоиска.Вставить("Доступность", Истина);
		
		НайденныеКомандыИспользованиеЛожь = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКомандыИспользованиеЛожь.Количество() = 1 Тогда
			НайденныеКоманды[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборКлассификаторПодменю.Заголовок = НСтр("ru = 'Класс данных: Все'");
		КонецЕсли;
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 1);
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
			НайденнаяКоманда.Использование = ТекущиеДанные.Использование;
		КонецЦикла;
		
		Если ТекущиеДанные.Использование Тогда
			Форма.Элементы.ГруппаОтборКлассификаторПодменю.Заголовок = НСтр("ru = 'Класс данных: Все'");
		Иначе
			Форма.Элементы.ГруппаОтборКлассификаторПодменю.Заголовок = НСтр("ru = 'Класс данных: 0'");
			Форма.ТекущийОтборКлассДанных.Добавить(ПредопределенноеЗначение("Перечисление.КлассыДанных.ПустаяСсылка"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки выбора значения на клиенте.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма, где совершилось действие.
//  ТекущиеДанные			 - СтрокаТаблицыЗначений - Обрабатываемая строка.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура ГруппаДанныхВыборНаКлиенте(Форма, ТекущиеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма.ТекущийОтборГруппаДанных.Очистить();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КомандаДанные) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 2);
		СтруктураПоиска.Вставить("КомандаДанные", ПредопределенноеЗначение("Справочник.ГруппыДанных.ПустаяСсылка"));
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКоманды.Количество() Тогда
			НайденныеКоманды[0].Использование = Ложь;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 2);
		СтруктураПоиска.Вставить("Использование", Истина);
		СтруктураПоиска.Вставить("Доступность", Истина);
		
		НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		
		Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
		Если НЕ НайденныеКомандыИспользование.Количество() Тогда
			Форма.ТекущийОтборГруппаДанных.Добавить(ПредопределенноеЗначение("Справочник.ГруппыДанных.ПустаяСсылка"));
		КонецЕсли;
		
		Для Каждого НайденнаяКоманда Из НайденныеКомандыИспользование Цикл
			Если ЗначениеЗаполнено(НайденнаяКоманда.КомандаДанные) Тогда
				Форма.ТекущийОтборГруппаДанных.Добавить(НайденнаяКоманда.КомандаДанные);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 2);
		СтруктураПоиска.Вставить("Использование", Ложь);
		СтруктураПоиска.Вставить("Доступность", Истина);
		
		НайденныеКомандыИспользованиеЛожь = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКомандыИспользованиеЛожь.Количество() = 1 Тогда
			НайденныеКоманды[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
		КонецЕсли;
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 2);
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
			НайденнаяКоманда.Использование = ТекущиеДанные.Использование;
		КонецЦикла;
		
		Если ТекущиеДанные.Использование Тогда
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
		Иначе
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: 0'");
			Форма.ТекущийОтборГруппаДанных.Добавить(ПредопределенноеЗначение("Справочник.ГруппыДанных.ПустаяСсылка"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки выбора значения на клиенте.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма, где совершилось действие.
//  ТекущиеДанные			 - СтрокаТаблицыЗначений - Обрабатываемая строка.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура ВидДанныхВыборНаКлиенте(Форма, ТекущиеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма.ТекущийОтборВидДанных.Очистить();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КомандаДанные) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 3);
		СтруктураПоиска.Вставить("КомандаДанные", ПредопределенноеЗначение("Справочник.ВидыДанных.ПустаяСсылка"));
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКоманды.Количество() Тогда
			НайденныеКоманды[0].Использование = Ложь;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 3);
		СтруктураПоиска.Вставить("Использование", Истина);
		
		НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		
		Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
		Если НЕ НайденныеКомандыИспользование.Количество() Тогда
			Форма.ТекущийОтборВидДанных.Добавить(ПредопределенноеЗначение("Справочник.ВидыДанных.ПустаяСсылка"));
		КонецЕсли;
		
		Для Каждого НайденнаяКоманда Из НайденныеКомандыИспользование Цикл
			Если ЗначениеЗаполнено(НайденнаяКоманда.КомандаДанные) Тогда
				Форма.ТекущийОтборВидДанных.Добавить(НайденнаяКоманда.КомандаДанные);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 3);
		СтруктураПоиска.Вставить("Использование", Ложь);
		СтруктураПоиска.Вставить("Доступность", Истина);
		
		НайденныеКомандыИспользованиеЛожь = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКомандыИспользованиеЛожь.Количество() = 1 Тогда
			НайденныеКоманды[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид: Все'");
		КонецЕсли;
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 3);
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
			НайденнаяКоманда.Использование = ТекущиеДанные.Использование;
		КонецЦикла;
		
		Если ТекущиеДанные.Использование Тогда
			Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид: Все'");
		Иначе
			Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид: 0'");
			Форма.ТекущийОтборВидДанных.Добавить(ПредопределенноеЗначение("Справочник.ВидыДанных.ПустаяСсылка"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки выбора значения на клиенте.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма, где совершилось действие.
//  ТекущиеДанные			 - СтрокаТаблицыЗначений - Обрабатываемая строка.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура СтатусДанныхВыборНаКлиенте(Форма, ТекущиеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма.ТекущийОтборСтатусДанных.Очистить();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КомандаДанные) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 4);
		СтруктураПоиска.Вставить("КомандаДанные", ПредопределенноеЗначение("Перечисление.СтатусыДанных.ПустаяСсылка"));
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКоманды.Количество() Тогда
			НайденныеКоманды[0].Использование = Ложь;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 4);
		СтруктураПоиска.Вставить("Использование", Истина);
		
		НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		
		Форма.Элементы.ГруппаОтборАктуальностьПодменю.Заголовок = НСтр("ru = 'Статус:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
		Если НЕ НайденныеКомандыИспользование.Количество() Тогда
			Форма.ТекущийОтборСтатусДанных.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДанных.ПустаяСсылка"));
		КонецЕсли;
		
		Для Каждого НайденнаяКоманда Из НайденныеКомандыИспользование Цикл
			Если ЗначениеЗаполнено(НайденнаяКоманда.КомандаДанные) Тогда
				Форма.ТекущийОтборСтатусДанных.Добавить(НайденнаяКоманда.КомандаДанные);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 4);
		СтруктураПоиска.Вставить("Использование", Ложь);
		СтруктураПоиска.Вставить("Доступность", Истина);
		
		НайденныеКомандыИспользованиеЛожь = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКомандыИспользованиеЛожь.Количество() = 1 Тогда
			НайденныеКоманды[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборАктуальностьПодменю.Заголовок = НСтр("ru = 'Статус: Все'");
		КонецЕсли;
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 4);
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
			НайденнаяКоманда.Использование = ТекущиеДанные.Использование;
		КонецЦикла;
		
		Если ТекущиеДанные.Использование Тогда
			Форма.Элементы.ГруппаОтборАктуальностьПодменю.Заголовок = НСтр("ru = 'Статус: Все'");
		Иначе
			Форма.Элементы.ГруппаОтборАктуальностьПодменю.Заголовок = НСтр("ru = 'Статус: 0'");
			Форма.ТекущийОтборСтатусДанных.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДанных.ПустаяСсылка"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки выбора значения на клиенте.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма, где совершилось действие.
//  ТекущиеДанные			 - СтрокаТаблицыЗначений - Обрабатываемая строка.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура СвойствоВыборНаКлиенте(Форма, ТекущиеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма.ТекущийОтборСвойства.Очистить();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КомандаДанные) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 5);
		СтруктураПоиска.Вставить("КомандаДанные", ПредопределенноеЗначение("ПланВидовХарактеристик.СвойстваВидовДанных.ПустаяСсылка"));
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКоманды.Количество() Тогда
			НайденныеКоманды[0].Использование = Ложь;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 5);
		СтруктураПоиска.Вставить("Использование", Истина);
		
		НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		
		Форма.Элементы.ГруппаОтборСвойстваПодменю.Заголовок = НСтр("ru = 'Свойства:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
		Если НЕ НайденныеКомандыИспользование.Количество() Тогда
			Форма.ТекущийОтборСвойства.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.СвойстваВидовДанных.ПустаяСсылка"));
		КонецЕсли;
		
		Для Каждого НайденнаяКоманда Из НайденныеКомандыИспользование Цикл
			Если ЗначениеЗаполнено(НайденнаяКоманда.КомандаДанные) Тогда
				Форма.ТекущийОтборСвойства.Добавить(НайденнаяКоманда.КомандаДанные);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 5);
		СтруктураПоиска.Вставить("Использование", Ложь);
		СтруктураПоиска.Вставить("Доступность", Истина);
		
		НайденныеКомандыИспользованиеЛожь = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеКомандыИспользованиеЛожь.Количество() = 1 Тогда
			НайденныеКоманды[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборСвойстваПодменю.Заголовок = НСтр("ru = 'Свойства: Все'");
		КонецЕсли;
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 5);
		
		НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
			НайденнаяКоманда.Использование = ТекущиеДанные.Использование;
		КонецЦикла;
		
		Если ТекущиеДанные.Использование Тогда
			Форма.Элементы.ГруппаОтборСвойстваПодменю.Заголовок = НСтр("ru = 'Свойства: Все'");
		Иначе
			Форма.Элементы.ГруппаОтборСвойстваПодменю.Заголовок = НСтр("ru = 'Свойства: 0'");
			Форма.ТекущийОтборСвойства.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.СвойстваВидовДанных.ПустаяСсылка"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НапоминанияПользователя

// См. НапоминанияПользователяКлиент.ОткрытьФормуОповещения();
//
Процедура ПодключитьОбработчикЗавершенияНапоминания(Форма) Экспорт
	
	// Найдем форму оповещения в переменной клиентского контекста
	ИмяПараметра = "СтандартныеПодсистемы.ФормаОповещения";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ИмяФормыОповещения = "РегистрСведений.НапоминанияПользователя.Форма.ФормаОповещения";
		ПараметрыПриложения.Вставить(ИмяПараметра, ПолучитьФорму(ИмяФормыОповещения));
	КонецЕсли;
	ФормаОповещения = ПараметрыПриложения[ИмяПараметра];
	ФормаОповещения.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, "ИзменениеНапоминания");
	
КонецПроцедуры // ПодключитьОбработчикЗавершенияНапоминания()

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПараметрыКлиента.МоиПароли.ЭтоНезависимоеПриложение<>ИСТИНА Тогда
		Возврат;
	КонецЕсли;
	
	// При первом запуске (или после обновления) данный код исполняется в неподходящем событии
	Если Параметры.НепрерывноеВыполнение<>ИСТИНА Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыКлиента.МоиПароли.РежимЗапускаПриложенияРабочееМесто=ИСТИНА Тогда
		Попытка
			КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.РабочееМесто);
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПараметрыКлиента.МоиПароли.ЭтоНезависимоеПриложение<>ИСТИНА Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыКлиента.МоиПароли.НачальнаяНастройкаМоиПаролиЗавершена Тогда
		МоиПаролиКлиент.ОткрытьОсновнуюФорму();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияМастерНачальногоЗаполнения", ЭтотОбъект, Параметры);
		МоиПаролиКлиент.ОткрытьМастерЗаполнения(Неопределено, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПослеЗакрытияМастерНачальногоЗаполнения(Результат, ДополнительныеПараметры=Неопределено) Экспорт
	
	МоиПаролиКлиент.ОткрытьОсновнуюФорму();
	
КонецПроцедуры // ПослеЗакрытияМастерНачальногоЗаполнения()

#КонецОбласти
