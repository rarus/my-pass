///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийОбъекта

// Процедура выполняет проверку заполнение реквизитов объекта.
//
// Параметры:
//  Объект				 - СправочникОбъект, ДокументОбъект, ПланВидовХарактеристикОбъект - Проверяемый объект.
//  Отказ				 - Булево - Признак наличия ошибок выполнения проверки.
//  ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты объекта.
//
Процедура ПроверитьЗаполнениеРеквизитовОбъекта(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	// Получим параметры текущего проверяемого объекта
	ОбъектМетаданных    = Объект.Метаданные();
	МенеджерОбъекта     = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	ЭтоСправочник       = Метаданные.Справочники.Содержит(ОбъектМетаданных);
	Владелец            = ?(ЭтоСправочник И ЗначениеЗаполнено(Объект.Владелец), Объект.Владелец, Неопределено);
	ПредставлениеСписка = "";
	
	// Произведем проверку уникальности заполнения реквизитов объекта
	Для каждого УникальныйРеквизит Из МенеджерОбъекта.ПолучитьУникальныеРеквизиты(Объект) Цикл
		
		// Обработаем в зависимости от вида реквизита
		Если ТипЗнч(УникальныйРеквизит.Значение) = Тип("Массив") Тогда
			
			// В данной версии программы не поддерживается контроль уникальности объектов на уровне полей табличных частей.
			
		Иначе
			
			// Формируем текст запроса для поиска имеющейся записи таблицы
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	*
			|ИЗ
			|	" + ОбъектМетаданных.ПолноеИмя() + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка <> &Ссылка
			|	И (НЕ Таблица.ПометкаУдаления)";
			
			// Создаем объект запроса и устанавливаем параметры
			Запрос = Новый ПостроительЗапроса(ТекстЗапроса);
			Запрос.ЗаполнитьНастройки();
			Запрос.Параметры.Вставить("Ссылка", Объект.Ссылка);
			
			Запрос.ВыбранныеПоля.Очистить();
			Запрос.ВыбранныеПоля.Добавить("Ссылка");
			
			// Накладываем отбор по реквизиту, уникальность которого требуется проверить
			ЭлементОтбора = Запрос.Отбор.Добавить(УникальныйРеквизит.Ключ);
			ЭлементОтбора.Установить(Объект[УникальныйРеквизит.Ключ], Истина);
			
			// Накладываем дополнительный отбор по владельцу для подчиненных справочников
			Если ЭтоСправочник И ЗначениеЗаполнено(Владелец) Тогда
				ЭлементОтбора = Запрос.Отбор.Добавить("Владелец");
				ЭлементОтбора.Установить(Владелец, Истина);
			КонецЕсли;
			
			// Выполняем запрос
			Запрос.Выполнить();
			
			// Выводим сообщение о не уникальности объекта среди своего списка
			Если НЕ Запрос.Результат.Пустой() Тогда
				
				// Получим представление списка объектов
				Если ПустаяСтрока(ПредставлениеСписка) Тогда
					ПредставлениеСписка = ПредставлениеСпискаОбъектов(ОбъектМетаданных);
				КонецЕсли;
				
				// Получим описание метаданных проверяемого реквизита
				ОбъектМетаданныхРеквизита = ОбъектМетаданных.Реквизиты.Найти(УникальныйРеквизит.Ключ);
				Если ОбъектМетаданныхРеквизита = Неопределено Тогда
					ОбъектМетаданныхРеквизита = Метаданные.ОбщиеРеквизиты.Найти(УникальныйРеквизит.Ключ);
				КонецЕсли;
				
				// Проверим уникальные реквизиты для стандартных реквизитов объекта
				Если ОбъектМетаданныхРеквизита = Неопределено Тогда
					Для каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
						Если СтандартныйРеквизит.Имя = УникальныйРеквизит.Ключ Тогда
							ОбъектМетаданныхРеквизита = СтандартныйРеквизит;
							Продолжить;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// Информируем пользователя о найденной коллизии
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Поле ""%1"" не уникально в пределах ""%2""'"),
					ОбъектМетаданныхРеквизита.Представление(),
					ПредставлениеСписка);
				Сообщение.Поле = Объект[УникальныйРеквизит.Ключ];
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовОбъекта()

// Справочники - перед записью.
//
// Параметры:
//  Источник - СправочникОбъект	 - Справочник, в котором произошло событие.
//  Отказ	 - Булево			 - Признак наличия ошибок.
//
Процедура ПередЗаписьюСправочники(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Автор.Пустая() Тогда
		Источник.Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Источник.ДатаИзменения = ТекущаяДатаСеанса();
	
	Если НЕ ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
		Источник.ДатаСоздания = Источник.ДатаИзменения;
	КонецЕсли;
	
КонецПроцедуры

// Документы - перед записью.
//
// Параметры:
//  Источник		 - ДокументОбъект			 - Документ, в котором произошло событие.
//  Отказ			 - Булево					 - Признак наличия ошибок.
//  РежимЗаписи		 - РежимЗаписиДокумента		 - Режим записи документа, в котором произошло событие.
//  РежимПроведения	 - РежимПроведенияДокумента	 - Режим проведения документа, в котором произошло событие.
//
Процедура ПередЗаписьюДокументы(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Автор.Пустая() Тогда
		Источник.Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Источник.ДатаИзменения = ТекущаяДатаСеанса();
	
	Если НЕ ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
		Источник.ДатаСоздания = Источник.ДатаИзменения;
	КонецЕсли;
	
КонецПроцедуры

// Планы видов характеристик - перед записью.
//
// Параметры:
//  Источник - ПланВидовХарактеристикОбъект	 - План видов характеристик, в котором произошло событие.
//  Отказ	 - Булево						 - Признак наличия ошибок.
//
Процедура ПередЗаписьюПланыВидовХарактеристик(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Автор.Пустая() Тогда
		Источник.Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Источник.ДатаИзменения = ТекущаяДатаСеанса();
	
	Если НЕ ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
		Источник.ДатаСоздания = Источник.ДатаИзменения;
	КонецЕсли;
	
КонецПроцедуры

// Регистры сведений - перед записью.
//
// Параметры:
//  Источник	 - РегистрСведенийНаборЗаписей	 - Набор записей регистра сведений, в котором произошло событие.
//  Отказ		 - Булево						 - Признак наличия ошибок.
//  Замещение	 - Булево						 - Признак замещения записей.
//
Процедура ПередЗаписьюРегистрыСведений(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл
		Если ЗначениеЗаполнено(Запись.ДатаСоздания) Тогда
			Запись.ДатаИзменения = ТекущаяДатаСеанса();
		Иначе
			Запись.Автор         = ПараметрыСеанса.ТекущийПользователь;
			Запись.ДатаСоздания  = Запись.ДатаИзменения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура выполняется при загрузке данных из настроек на сервере.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма.
//  Настройки				 - Соответствие - Настройки формы.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
//@skip-check statement-type-change
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки, ДополнительныеПараметры = Неопределено) Экспорт
	
	РежимОтбораПоУмолчанию = Настройки.Получить("РежимОтбораПоУмолчанию");
	Если РежимОтбораПоУмолчанию = 2 Тогда
		Если НЕ СтрНайти(Форма.ИмяФормы, "ФормаНастроек") Тогда
			Форма.ТекущийОтборКлассДанных = Неопределено;
			Форма.ТекущийОтборГруппаДанных  = Неопределено;
			Форма.ТекущийОтборВидДанных     = Неопределено;
			Форма.ТекущийОтборСтатусДанных  = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Классификатор
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 1);
	
	Если РежимОтбораПоУмолчанию = 1 Тогда
		ИмяОтбора = "ТекущийОтборКлассДанных";
	Иначе
		ИмяОтбора = "ОтборКлассДанныхПоУмолчанию";
		Форма.ТекущийОтборКлассДанных = Форма.ОтборКлассДанныхПоУмолчанию;
	КонецЕсли;
	
	КнопкаНайдена = Ложь;
	НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
		Форма.Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Ложь;
		Если Настройки.Получить(ИмяОтбора) = НайденнаяКоманда.КомандаДанные Тогда
			Форма.Элементы.ПодменюКлассификаторДанных.Заголовок = НайденнаяКоманда.ЗаголовокКоманды;
			Форма.Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Истина;
			КнопкаНайдена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ КнопкаНайдена Тогда
		Форма.Элементы["КлассификаторВыбор_Все"].Пометка = Истина;
		Форма.Элементы.ПодменюКлассификаторДанных.Заголовок = НСтр("ru = 'Все'");
	КонецЕсли;
	
	// Группы данных
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 2);
	
	Если РежимОтбораПоУмолчанию = 1 Тогда
		ИмяОтбора = "ТекущийОтборГруппаДанных";
	Иначе
		ИмяОтбора = "ОтборГруппаДанныхПоУмолчанию";
		Форма.ТекущийОтборГруппаДанных = Форма.ОтборГруппаДанныхПоУмолчанию;
	КонецЕсли;
	
	КнопкаНайдена = Ложь;
	НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
		Форма.Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Ложь;
		Если Настройки.Получить(ИмяОтбора) = НайденнаяКоманда.КомандаДанные Тогда
			Форма.Элементы.ПодменюГруппыДанных.Заголовок = НайденнаяКоманда.ЗаголовокКоманды;
			Форма.Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Истина;
			КнопкаНайдена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ КнопкаНайдена Тогда
		Форма.Элементы["ГруппаДанныхВыбор_Все"].Пометка = Истина;
		Форма.Элементы.ПодменюГруппыДанных.Заголовок = НСтр("ru = 'Все'");
	КонецЕсли;
	
	// Виды данных
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 3);
	
	Если РежимОтбораПоУмолчанию = 1 Тогда
		ИмяОтбора = "ТекущийОтборВидДанных";
	Иначе
		ИмяОтбора = "ОтборВидДанныхПоУмолчанию";
		Форма.ТекущийОтборВидДанных = Форма.ОтборВидДанныхПоУмолчанию;
	КонецЕсли;
	
	КнопкаНайдена = Ложь;
	НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
		Форма.Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Ложь;
		Если Настройки.Получить(ИмяОтбора) = НайденнаяКоманда.КомандаДанные Тогда
			Форма.Элементы.ПодменюВидыДанных.Заголовок = НайденнаяКоманда.ЗаголовокКоманды;
			Форма.Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Истина;
			КнопкаНайдена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ КнопкаНайдена Тогда
		Форма.Элементы["ВидДанныхВыбор_Все"].Пометка = Истина;
		Форма.Элементы.ПодменюВидыДанных.Заголовок = НСтр("ru = 'Все'");
	КонецЕсли;
	
	// Статусы данных
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 4);
	
	Если РежимОтбораПоУмолчанию = 1 Тогда
		ИмяОтбора = "ТекущийОтборСтатусДанных";
	Иначе
		ИмяОтбора = "ОтборСтатусДанныхПоУмолчанию";
		Форма.ТекущийОтборСтатусДанных = Форма.ОтборСтатусДанныхПоУмолчанию;
	КонецЕсли;
	
	КнопкаНайдена = Ложь;
	НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
		Форма.Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Ложь;
		Если Настройки.Получить(ИмяОтбора) = НайденнаяКоманда.КомандаДанные Тогда
			Форма.Элементы.ПодменюСтатусДанных.Заголовок = НайденнаяКоманда.ЗаголовокКоманды;
			Форма.Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Истина;
			КнопкаНайдена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ КнопкаНайдена Тогда
		Форма.Элементы["СтатусДанныхВыбор_Все"].Пометка = Истина;
		Форма.Элементы.ПодменюСтатусДанных.Заголовок = НСтр("ru = 'Все'");
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняется при загрузке данных из настроек на сервере.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма.
//  Настройки				 - Соответствие - Настройки формы.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная(Форма, Настройки, ДополнительныеПараметры = Неопределено) Экспорт
	
	РежимОтбораПоУмолчанию = Настройки.Получить("РежимОтбораПоУмолчанию");
	Если РежимОтбораПоУмолчанию = 2 Тогда
		Если НЕ СтрНайти(Форма.ИмяФормы, "ФормаНастроек") Тогда
			Форма.ТекущийОтборКлассДанных = Неопределено;
			Форма.ТекущийОтборГруппаДанных     = Неопределено;
			Форма.ТекущийОтборВидДанных     = Неопределено;
			Форма.ТекущийОтборСтатусДанных  = Неопределено;
		КонецЕсли;
		Возврат;
	ИначеЕсли НЕ РежимОтбораПоУмолчанию = 1 Тогда
		Форма.ТекущийОтборКлассДанных = Форма.ОтборКлассДанныхПоУмолчанию;
		Форма.ТекущийОтборГруппаДанных  = Форма.ОтборГруппаДанныхПоУмолчанию;
		Форма.ТекущийОтборВидДанных     = Форма.ОтборВидДанныхПоУмолчанию;
		Форма.ТекущийОтборСтатусДанных  = Форма.ОтборСтатусДанныхПоУмолчанию;
	КонецЕсли;
	
	// Классификатор
	Если Форма.ТекущийОтборКлассДанных.Количество() Тогда
		ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная_Классификатор(Форма);
	КонецЕсли;
	
	// Группы данных
	Если Форма.ТекущийОтборГруппаДанных.Количество() Тогда
		ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная_Группа(Форма);
	КонецЕсли;
	
	// Вид данных
	Если Форма.ТекущийОтборВидДанных.Количество() Тогда
		ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная_Вид(Форма);
	КонецЕсли;
	
	// Статус данных
	Если Форма.ТекущийОтборСтатусДанных.Количество() Тогда
		ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная_Статус(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СпискиВыбораОтборов

// Процедура заполнения формы рабочего места "Мои доступы и пароли".
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура ЗаполнитьСоответствиеКлассификацииДанных(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма.СоответствиеКомандОтбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МоиПароли.ВидДанных КАК ВидДанных,
		|	МоиПароли.ГруппаДанных КАК ГруппаДанных,
		|	МоиПароли.КлассДанных КАК КлассДанных
		|ИЗ
		|	РегистрСведений.МоиПароли КАК МоиПароли
		|
		|СГРУППИРОВАТЬ ПО
		|	МоиПароли.ВидДанных,
		|	МоиПароли.ГруппаДанных,
		|	МоиПароли.КлассДанных";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Форма.СоответствиеКомандОтбора.Добавить(); // Соответствие
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения формы рабочего места "Мои доступы и пароли".
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура ДобавитьКомандыСписковВыборкаОтборов(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Подменю классификатора
	Итератор = 1;
	Классификатор = Форма.СоответствиеКомандОтбора.Выгрузить(, "КлассДанных").ВыгрузитьКолонку("КлассДанных"); // Массив
	Классификатор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Классификатор);
	Для Каждого ЭлементКлассификатор Из Классификатор Цикл
		// Команда
		НоваяКоманда = Форма.Команды.Добавить("КлассификаторВыбор" + Итератор);
		НоваяКоманда.Действие = "КлассификаторВыбор";
		НоваяКоманда.Заголовок = Строка(ЭлементКлассификатор);
		// Соответствие команды и данных
		НовоеСоответствие = Форма.СоответствиеКоманд.Добавить(); // Соответствие
		НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
		НовоеСоответствие.КомандаДанные = ЭлементКлассификатор;
		НовоеСоответствие.ЗаголовокКоманды = НоваяКоманда.Заголовок;
		НовоеСоответствие.НомерГруппы = 1;
		Итератор = Итератор + 1;
	КонецЦикла;
	// Вариант "Все"
	НоваяКоманда = Форма.Команды.Добавить("КлассификаторВыбор_Все");
	НоваяКоманда.Действие = "КлассификаторВыбор";
	НоваяКоманда.Заголовок = НСтр("ru = 'Все'");
	НовоеСоответствие = Форма.СоответствиеКоманд.Вставить(0); // Соответствие
	НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
	НовоеСоответствие.КомандаДанные = Перечисления.КлассыДанных.ПустаяСсылка();
	НовоеСоответствие.ЗаголовокКоманды = НоваяКоманда.Заголовок;
	НовоеСоответствие.НомерГруппы = 1;
	
	// Подменю группы данных
	Итератор = 1;
	ГруппаДанных = Форма.СоответствиеКомандОтбора.Выгрузить(, "ГруппаДанных").ВыгрузитьКолонку("ГруппаДанных"); // Массив
	ГруппаДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ГруппаДанных);
	Для Каждого ЭлементГруппаДанных Из ГруппаДанных Цикл
		// Команда
		НоваяКоманда = Форма.Команды.Добавить("ГруппаДанных" + Итератор);
		НоваяКоманда.Действие = "ГруппаДанныхВыбор";
		НоваяКоманда.Заголовок = Строка(ЭлементГруппаДанных);
		// Соответствие команды и данных
		НовоеСоответствие = Форма.СоответствиеКоманд.Добавить(); // Соответствие
		НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
		НовоеСоответствие.КомандаДанные = ЭлементГруппаДанных;
		НовоеСоответствие.ЗаголовокКоманды = НоваяКоманда.Заголовок;
		НовоеСоответствие.НомерГруппы = 2;
		Итератор = Итератор + 1;
	КонецЦикла;
	// Вариант "Все"
	НоваяКоманда = Форма.Команды.Добавить("ГруппаДанныхВыбор_Все");
	НоваяКоманда.Действие = "ГруппаДанныхВыбор";
	НоваяКоманда.Заголовок = НСтр("ru = 'Все'");
	НовоеСоответствие = Форма.СоответствиеКоманд.Вставить(0); // Соответствие
	НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
	НовоеСоответствие.КомандаДанные = Справочники.ГруппыДанных.ПустаяСсылка();
	НовоеСоответствие.ЗаголовокКоманды = НоваяКоманда.Заголовок;
	НовоеСоответствие.НомерГруппы = 2;
	
	// Подменю вида данных
	Итератор = 1;
	ВидДанных = Форма.СоответствиеКомандОтбора.Выгрузить(, "ВидДанных").ВыгрузитьКолонку("ВидДанных"); // Массив
	ВидДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидДанных);
	Для Каждого ЭлементВидДанных Из ВидДанных Цикл
		// Команда
		НоваяКоманда = Форма.Команды.Добавить("ВидДанных" + Итератор);
		НоваяКоманда.Действие = "ВидДанныхВыбор";
		НоваяКоманда.Заголовок = Строка(ЭлементВидДанных);
		// Соответствие команды и данных
		НовоеСоответствие = Форма.СоответствиеКоманд.Добавить(); // Соответствие
		НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
		НовоеСоответствие.КомандаДанные = ЭлементВидДанных;
		НовоеСоответствие.ЗаголовокКоманды = НоваяКоманда.Заголовок;
		НовоеСоответствие.НомерГруппы = 3;
		Итератор = Итератор + 1;
	КонецЦикла;
	// Вариант "Все"
	НоваяКоманда = Форма.Команды.Добавить("ВидДанныхВыбор_Все");
	НоваяКоманда.Действие = "ВидДанныхВыбор";
	НоваяКоманда.Заголовок = НСтр("ru = 'Все'");
	НовоеСоответствие = Форма.СоответствиеКоманд.Вставить(0); // Соответствие
	НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
	НовоеСоответствие.КомандаДанные = Справочники.ВидыДанных.ПустаяСсылка();
	НовоеСоответствие.ЗаголовокКоманды = НоваяКоманда.Заголовок;
	НовоеСоответствие.НомерГруппы = 3;
	
	// Подменю статуса данных
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыДанных.Ссылка КАК Ссылка
		|ИЗ
		|	Перечисление.СтатусыДанных КАК СтатусыДанных";
	Выборка = Запрос.Выполнить().Выбрать();
	Итератор = 1;
	Пока Выборка.Следующий() Цикл
		// Команда
		НоваяКоманда = Форма.Команды.Добавить("СтатусДанных" + Итератор);
		НоваяКоманда.Действие = "СтатусДанныхВыбор";
		НоваяКоманда.Заголовок = Строка(Выборка.Ссылка);
		// Соответствие команды и данных
		НовоеСоответствие = Форма.СоответствиеКоманд.Добавить(); // Соответствие
		НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
		НовоеСоответствие.КомандаДанные = Выборка.Ссылка;
		НовоеСоответствие.ЗаголовокКоманды = НоваяКоманда.Заголовок;
		НовоеСоответствие.НомерГруппы = 4;
		Итератор = Итератор + 1;
	КонецЦикла;
	// Вариант "Все"
	НоваяКоманда = Форма.Команды.Добавить("СтатусДанныхВыбор_Все");
	НоваяКоманда.Действие = "СтатусДанныхВыбор";
	НоваяКоманда.Заголовок = НСтр("ru = 'Все'");
	НовоеСоответствие = Форма.СоответствиеКоманд.Вставить(0); // Соответствие
	НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
	НовоеСоответствие.КомандаДанные = Перечисления.СтатусыДанных.ПустаяСсылка();
	НовоеСоответствие.ЗаголовокКоманды = НоваяКоманда.Заголовок;
	НовоеСоответствие.НомерГруппы = 4;
	
КонецПроцедуры

// Процедура заполнения формы рабочего места "Мои доступы и пароли".
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check statement-type-change
//@skip-check invocation-parameter-type-intersect
Процедура ДобавитьКнопкиСписковВыборкаОтборов(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Для Каждого ЭлементСоответствия Из Форма.СоответствиеКоманд Цикл // Соответствие
		
		Если ЭлементСоответствия.НомерГруппы = 1 Тогда
			НовыйЭлемент = Форма.Элементы.Добавить(ЭлементСоответствия.КомандаИмя, Тип("КнопкаФормы"), Форма.Элементы.ПодменюКлассификаторДанных);
			НовыйЭлемент.ИмяКоманды = ЭлементСоответствия.КомандаИмя;
		ИначеЕсли ЭлементСоответствия.НомерГруппы = 2 Тогда
			НовыйЭлемент = Форма.Элементы.Добавить(ЭлементСоответствия.КомандаИмя, Тип("КнопкаФормы"), Форма.Элементы.ПодменюГруппыДанных);
			НовыйЭлемент.ИмяКоманды = ЭлементСоответствия.КомандаИмя;
		ИначеЕсли ЭлементСоответствия.НомерГруппы = 3 Тогда
			НовыйЭлемент = Форма.Элементы.Добавить(ЭлементСоответствия.КомандаИмя, Тип("КнопкаФормы"), Форма.Элементы.ПодменюВидыДанных);
			НовыйЭлемент.ИмяКоманды = ЭлементСоответствия.КомандаИмя;
		ИначеЕсли ЭлементСоответствия.НомерГруппы = 4 Тогда
			НовыйЭлемент = Форма.Элементы.Добавить(ЭлементСоответствия.КомандаИмя, Тип("КнопкаФормы"), Форма.Элементы.ПодменюСтатусДанных);
			НовыйЭлемент.ИмяКоманды = ЭлементСоответствия.КомандаИмя;
		КонецЕсли;
		
		Если Прав(ЭлементСоответствия.КомандаИмя, 3) = "Все" Тогда
			НовыйЭлемент.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения формы рабочего места "Мои доступы и пароли".
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма.
//  НомерГруппы				 - Число - Параметр выбора режима обработки.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура СкрытьНедоступныеКнопки(Форма, НомерГруппы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НомерГруппы = 1 Тогда
		
		Если ЗначениеЗаполнено(Форма.ТекущийОтборКлассДанных) Тогда
			
			СтруктураПоискаКлассификатор = Новый Структура;
			СтруктураПоискаКлассификатор.Вставить("КлассДанных", Форма.ТекущийОтборКлассДанных);
			
			НайденныеСтроки = Форма.СоответствиеКомандОтбора.Выгрузить(СтруктураПоискаКлассификатор); // Массив
			ГруппаДанных = НайденныеСтроки.ВыгрузитьКолонку("ГруппаДанных"); // Массив
			ГруппаДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ГруппаДанных);
			
			СтруктураНомерГруппы = Новый Структура;
			СтруктураНомерГруппы.Вставить("НомерГруппы", 2);
			
			СоответствиеКомандВременная = Форма.СоответствиеКоманд.Выгрузить(СтруктураНомерГруппы); // Массив
			Для Каждого Строка Из СоответствиеКомандВременная Цикл
				Форма.Элементы[Строка.КомандаИмя].Видимость = (НЕ ГруппаДанных.Найти(Строка.КомандаДанные) = Неопределено);
				Если НЕ Форма.Элементы[Строка.КомандаИмя].Видимость И Форма.Элементы[Строка.КомандаИмя].Пометка Тогда
					Форма.Элементы[Строка.КомандаИмя].Пометка = Ложь;
					Форма.ТекущийОтборГруппаДанных = Справочники.ГруппыДанных.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
			
			Форма.Элементы["ГруппаДанныхВыбор_Все"].Видимость = Истина;
			Если Форма.ТекущийОтборГруппаДанных = Справочники.ГруппыДанных.ПустаяСсылка() Тогда
				Форма.Элементы["ГруппаДанныхВыбор_Все"].Пометка = Истина;
				Форма.Элементы.ПодменюГруппыДанных.Заголовок = НСтр("ru = 'Все'");
			КонецЕсли;
			
			СкрытьНедоступныеКнопкиГруппы(Форма);
			
		Иначе
			
			СтруктураНомерГруппы = Новый Структура;
			СтруктураНомерГруппы.Вставить("НомерГруппы", 2);
			
			СоответствиеКомандВременная = Форма.СоответствиеКоманд.Выгрузить(СтруктураНомерГруппы); // Массив
			Для Каждого Строка Из СоответствиеКомандВременная Цикл
				Форма.Элементы[Строка.КомандаИмя].Видимость = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли НомерГруппы = 2 Тогда
		
		СкрытьНедоступныеКнопкиГруппы(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения формы рабочего места "Мои доступы и пароли".
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура СкрытьНедоступныеКнопкиГруппы(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ТекущийОтборГруппаДанных) Тогда
		
		СтруктураПоискаГруппаДанных = Новый Структура;
		СтруктураПоискаГруппаДанных.Вставить("ГруппаДанных", Форма.ТекущийОтборГруппаДанных);
		
		НайденныеСтроки = Форма.СоответствиеКомандОтбора.Выгрузить(СтруктураПоискаГруппаДанных); // Массив
		ВидДанных = НайденныеСтроки.ВыгрузитьКолонку("ВидДанных"); // Массив
		ВидДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидДанных);
		
		СтруктураНомерГруппы = Новый Структура;
		СтруктураНомерГруппы.Вставить("НомерГруппы", 3);
		
		СоответствиеКомандВременная = Форма.СоответствиеКоманд.Выгрузить(СтруктураНомерГруппы); // Массив
		Для Каждого Строка Из СоответствиеКомандВременная Цикл
			Форма.Элементы[Строка.КомандаИмя].Видимость = (НЕ ВидДанных.Найти(Строка.КомандаДанные) = Неопределено);
			Если НЕ Форма.Элементы[Строка.КомандаИмя].Видимость И Форма.Элементы[Строка.КомандаИмя].Пометка Тогда
				Форма.Элементы[Строка.КомандаИмя].Пометка = Ложь;
				Форма.ТекущийОтборВидДанных = Справочники.ВидыДанных.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		Форма.Элементы["ВидДанныхВыбор_Все"].Видимость = Истина;
		Если Форма.ТекущийОтборВидДанных = Справочники.ВидыДанных.ПустаяСсылка() Тогда
			Форма.Элементы["ВидДанныхВыбор_Все"].Пометка = Истина;
			Форма.Элементы.ПодменюВидыДанных.Заголовок = НСтр("ru = 'Все'");
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Форма.ТекущийОтборКлассДанных) Тогда
		
		СтруктураПоискаКлассификатор = Новый Структура;
		СтруктураПоискаКлассификатор.Вставить("КлассДанных", Форма.ТекущийОтборКлассДанных);
		
		НайденныеСтроки = Форма.СоответствиеКомандОтбора.Выгрузить(СтруктураПоискаКлассификатор); // Массив
		ВидДанных = НайденныеСтроки.ВыгрузитьКолонку("ВидДанных"); // Массив
		ВидДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидДанных);
		
		СтруктураНомерГруппы = Новый Структура;
		СтруктураНомерГруппы.Вставить("НомерГруппы", 3);
		
		СоответствиеКомандВременная = Форма.СоответствиеКоманд.Выгрузить(СтруктураНомерГруппы); // Массив
		Для Каждого Строка Из СоответствиеКомандВременная Цикл
			Форма.Элементы[Строка.КомандаИмя].Видимость = (НЕ ВидДанных.Найти(Строка.КомандаДанные) = Неопределено);
			Если НЕ Форма.Элементы[Строка.КомандаИмя].Видимость И Форма.Элементы[Строка.КомандаИмя].Пометка Тогда
				Форма.Элементы[Строка.КомандаИмя].Пометка = Ложь;
				Форма.ТекущийОтборВидДанных = Справочники.ВидыДанных.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		Форма.Элементы["ВидДанныхВыбор_Все"].Видимость = Истина;
		Если Форма.ТекущийОтборВидДанных = Справочники.ВидыДанных.ПустаяСсылка() Тогда
			Форма.Элементы["ВидДанныхВыбор_Все"].Пометка = Истина;
			Форма.Элементы.ПодменюВидыДанных.Заголовок = НСтр("ru = 'Все'");
		КонецЕсли;
		
	Иначе
		
		СтруктураНомерГруппы = Новый Структура;
		СтруктураНомерГруппы.Вставить("НомерГруппы", 3);
		
		СоответствиеКомандВременная = Форма.СоответствиеКоманд.Выгрузить(СтруктураНомерГруппы); // Массив
		Для Каждого Строка Из СоответствиеКомандВременная Цикл
			Форма.Элементы[Строка.КомандаИмя].Видимость = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СпискиВыбораОтборов_Альтернативная

// Процедура заполнения формы рабочего места "Мои доступы и пароли".
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма.
//  ИспользованиеДляНовых	 - Булево - Признак по умолчанию для установки использования отбора.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура ЗаполнитьСоответствияКомандОтбора_Альтернативная(Форма, ИспользованиеДляНовых = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Подменю классификатора
	Итератор = 1;
	Классификатор = Форма.СоответствиеКомандОтбора.Выгрузить(, "КлассДанных").ВыгрузитьКолонку("КлассДанных"); // Массив
	Классификатор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Классификатор);
	Для Каждого ЭлементКлассификатор Из Классификатор Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КомандаДанные", ЭлементКлассификатор);
		СтруктураПоиска.Вставить("НомерГруппы", 1);
		Если НЕ Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			// Соответствие команды и данных
			НовоеСоответствие = Форма.СоответствиеКоманд.Добавить(); // СтрокаТаблицыЗначений
			НовоеСоответствие.КомандаИмя = "КлассификаторВыбор" + Итератор;
			НовоеСоответствие.КомандаДанные = ЭлементКлассификатор;
			НовоеСоответствие.ЗаголовокКоманды = Строка(ЭлементКлассификатор);
			НовоеСоответствие.НомерГруппы = 1;
			НовоеСоответствие.Использование = ИспользованиеДляНовых;
			НовоеСоответствие.Доступность   = Истина;
		КонецЕсли;
		Итератор = Итератор + 1;
	КонецЦикла;
	// Вариант "Все"
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаДанные", Перечисления.КлассыДанных.ПустаяСсылка());
	СтруктураПоиска.Вставить("НомерГруппы", 1);
	Если НЕ Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		НовоеСоответствие = Форма.СоответствиеКоманд.Вставить(0); // СтрокаТаблицыЗначений
		НовоеСоответствие.КомандаИмя = "КлассификаторВыбор_Все";
		НовоеСоответствие.КомандаДанные = Перечисления.КлассыДанных.ПустаяСсылка();
		НовоеСоответствие.ЗаголовокКоманды = НСтр("ru = 'Все'");
		НовоеСоответствие.Использование = ИспользованиеДляНовых;
		НовоеСоответствие.Доступность   = Истина;
		НовоеСоответствие.НомерГруппы = 1;
	КонецЕсли;
	
	// Подменю группы данных
	Итератор = 1;
	ГруппаДанных = Форма.СоответствиеКомандОтбора.Выгрузить(, "ГруппаДанных").ВыгрузитьКолонку("ГруппаДанных"); // Массив
	ГруппаДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ГруппаДанных);
	Для Каждого ЭлементГруппаДанных Из ГруппаДанных Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КомандаДанные", ЭлементГруппаДанных);
		СтруктураПоиска.Вставить("НомерГруппы", 2);
		Если НЕ Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			// Соответствие команды и данных
			НовоеСоответствие = Форма.СоответствиеКоманд.Добавить(); // СтрокаТаблицыЗначений
			НовоеСоответствие.КомандаИмя = "ГруппаДанных" + Итератор;
			НовоеСоответствие.КомандаДанные = ЭлементГруппаДанных;
			НовоеСоответствие.ЗаголовокКоманды = Строка(ЭлементГруппаДанных);
			НовоеСоответствие.НомерГруппы = 2;
			НовоеСоответствие.Использование = ИспользованиеДляНовых;
			НовоеСоответствие.Доступность   = Истина;
		КонецЕсли;
		Итератор = Итератор + 1;
	КонецЦикла;
	// Вариант "Все"
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаДанные", Справочники.ГруппыДанных.ПустаяСсылка());
	СтруктураПоиска.Вставить("НомерГруппы", 2);
	Если НЕ Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		НовоеСоответствие = Форма.СоответствиеКоманд.Вставить(0); // СтрокаТаблицыЗначений
		НовоеСоответствие.КомандаИмя = "ГруппаДанныхВыбор_Все";
		НовоеСоответствие.КомандаДанные = Справочники.ГруппыДанных.ПустаяСсылка();
		НовоеСоответствие.ЗаголовокКоманды = НСтр("ru = 'Все'");
		НовоеСоответствие.Использование = ИспользованиеДляНовых;
		НовоеСоответствие.Доступность   = Истина;
		НовоеСоответствие.НомерГруппы = 2;
	КонецЕсли;
	
	// Подменю вида данных
	Итератор = 1;
	ВидДанных = Форма.СоответствиеКомандОтбора.Выгрузить(, "ВидДанных").ВыгрузитьКолонку("ВидДанных"); // Массив
	ВидДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидДанных);
	Для Каждого ЭлементВидДанных Из ВидДанных Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КомандаДанные", ЭлементВидДанных);
		СтруктураПоиска.Вставить("НомерГруппы", 3);
		Если НЕ Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			// Соответствие команды и данных
			НовоеСоответствие = Форма.СоответствиеКоманд.Добавить(); // СтрокаТаблицыЗначений
			НовоеСоответствие.КомандаИмя = "ВидДанных" + Итератор;
			НовоеСоответствие.КомандаДанные = ЭлементВидДанных;
			НовоеСоответствие.ЗаголовокКоманды = Строка(ЭлементВидДанных);
			НовоеСоответствие.НомерГруппы = 3;
			НовоеСоответствие.Использование = ИспользованиеДляНовых;
			НовоеСоответствие.Доступность   = Истина;
		КонецЕсли;
		Итератор = Итератор + 1;
	КонецЦикла;
	// Вариант "Все"
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаДанные", Справочники.ВидыДанных.ПустаяСсылка());
	СтруктураПоиска.Вставить("НомерГруппы", 3);
	Если НЕ Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		НовоеСоответствие = Форма.СоответствиеКоманд.Вставить(0); // СтрокаТаблицыЗначений
		НовоеСоответствие.КомандаИмя = "ВидДанныхВыбор_Все";
		НовоеСоответствие.КомандаДанные = Справочники.ВидыДанных.ПустаяСсылка();
		НовоеСоответствие.ЗаголовокКоманды = НСтр("ru = 'Все'");
		НовоеСоответствие.Использование = ИспользованиеДляНовых;
		НовоеСоответствие.Доступность   = Истина;
		НовоеСоответствие.НомерГруппы = 3;
	КонецЕсли;
	
	// Подменю статуса данных
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыДанных.Ссылка КАК Ссылка
		|ИЗ
		|	Перечисление.СтатусыДанных КАК СтатусыДанных";
	Выборка = Запрос.Выполнить().Выбрать();
	Итератор = 1;
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КомандаДанные", Выборка.Ссылка);
		СтруктураПоиска.Вставить("НомерГруппы", 4);
		Если НЕ Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			// Соответствие команды и данных
			НовоеСоответствие = Форма.СоответствиеКоманд.Добавить(); // СтрокаТаблицыЗначений
			НовоеСоответствие.КомандаИмя = "СтатусДанных" + Итератор;
			НовоеСоответствие.КомандаДанные = Выборка.Ссылка;
			НовоеСоответствие.ЗаголовокКоманды = Строка(Выборка.Ссылка);
			НовоеСоответствие.НомерГруппы = 4;
			НовоеСоответствие.Использование = ИспользованиеДляНовых;
			НовоеСоответствие.Доступность   = Истина;
		КонецЕсли;
		Итератор = Итератор + 1;
	КонецЦикла;
	// Вариант "Все"
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаДанные", Перечисления.СтатусыДанных.ПустаяСсылка());
	СтруктураПоиска.Вставить("НомерГруппы", 4);
	Если НЕ Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		НовоеСоответствие = Форма.СоответствиеКоманд.Вставить(0); // СтрокаТаблицыЗначений
		НовоеСоответствие.КомандаИмя = "СтатусДанныхВыбор_Все";
		НовоеСоответствие.КомандаДанные = Перечисления.СтатусыДанных.ПустаяСсылка();
		НовоеСоответствие.ЗаголовокКоманды = НСтр("ru = 'Все'");
		НовоеСоответствие.Использование = ИспользованиеДляНовых;
		НовоеСоответствие.Доступность   = Истина;
		НовоеСоответствие.НомерГруппы = 4;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения формы рабочего места "Мои доступы и пароли".
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма.
//  НомерГруппы				 - Число - Параметр выбора режима обработки.
//  ДополнительныеПараметры	 - Произвольный, Структура - Дополнительные параметры выполнения операции.
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
Процедура СкрытьНедоступныеКомандыОтбора_Альтернативная(Форма, НомерГруппы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НомерГруппы = 1 Тогда
		
		Если Форма.ТекущийОтборКлассДанных.Количество() Тогда
			СкрытьНедоступныеКнопкиКлассификатор_Альтернативная(Форма, ДополнительныеПараметры);
			СкрытьНедоступныеКнопкиГруппы_Альтернативная(Форма, ДополнительныеПараметры);
		Иначе
			СкрытьНедоступныеКнопкиКлассификаторВсе_Альтернативная(Форма, ДополнительныеПараметры);
			СкрытьНедоступныеКнопкиГруппы_Альтернативная(Форма, ДополнительныеПараметры);
		КонецЕсли;
		
	ИначеЕсли НомерГруппы = 2 Тогда
		
		СкрытьНедоступныеКнопкиГруппы_Альтернативная(Форма, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает в журнал бизнес-статистики сведения о событии.
//
// Параметры:
//  ИмяОперации	- Строка	- имя операции статистики, в случае отсутствия создается новое.
//  Значение	- Число		- количественное значение операции статистики.
//  Комментарий	- Строка	- произвольный комментарий.
//
Процедура РегистрацияСобытия(ИмяОперации, Значение = 1, Комментарий = "") Экспорт
	
	ИмяОперации = "Инструменты.МоиПароли." + ИмяОперации;
	ЦентрМониторингаОтраслевой.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение);
	
КонецПроцедуры // РегистрацияСобытия()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Функция возвращает расширенное представление списка для переданного объекта.
//
// Параметры:
//  Объект - УправляемаяФорма, ОбъектМетаданных, Ссылка - искомый объект.
//
// Возвращаемое значение:
//  Структура - представление объекта.
//
Функция ПредставлениеСпискаОбъектов(Объект) Экспорт
	
	// Получим метаданные переданного объекта
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбъектМетаданных = ПолучитьМетаданныеОбъектаФормы(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Объект;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	КонецЕсли;
	
	// Некоторые свойства представления могут не существовать для объектов данного типа.
	Представления = Новый Структура("РасширенноеПредставлениеСписка,ПредставлениеСписка", Неопределено, Неопределено);
	ЗаполнитьЗначенияСвойств(Представления, ОбъектМетаданных);
	
	// Проверим какое из свойств представления заполнено
	Если НЕ ПустаяСтрока(Представления.РасширенноеПредставлениеСписка) Тогда
		Возврат Представления.РасширенноеПредставлениеСписка;
		
	ИначеЕсли НЕ ПустаяСтрока(Представления.ПредставлениеСписка) Тогда
		Возврат Представления.ПредставлениеСписка;
		
	Иначе
		Возврат ОбъектМетаданных.Представление();
	КонецЕсли;
	
КонецФункции // ПредставлениеСпискаОбъектов()

// Возвращает метаданные объекта, которому принадлежит переданная форма.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, для которой производиться получение объекта описания метаданных.
// 
// Возвращаемое значение:
//  ОбъектМетаданных - Найденный объект.
//
Функция ПолучитьМетаданныеОбъектаФормы(Форма) Экспорт
	
	// Определим имя формы
	ИмяФормы = ?(ТипЗнч(Форма) = Тип("Строка"), Форма, Форма.ИмяФормы);
	
	// Произведем разложение переданного имени на составляющие
	ЭлементыИмениОбъекта = СтрРазделить(ИмяФормы, ".", Ложь);
	
	// Формируем полное имя объекта метаданных
	ПолноеИмя = ЭлементыИмениОбъекта[0] + "." + ЭлементыИмениОбъекта[1];
	
	// Получаем объект описания метаданных по переданному имени
	Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
КонецФункции // ПолучитьМетаданныеОбъектаФормы()

#КонецОбласти

#Область ПриЗагрузкеДанныхИзНастроекНаСервер

Процедура ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная_Статус(Форма, ДополнительныеПараметры = Неопределено)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 4);
	
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	Для Каждого ТекущийОтборСтатусДанных Из НайденныеКомандыИспользование Цикл
		Если ЗначениеЗаполнено(ТекущийОтборСтатусДанных.КомандаДанные) Тогда
			ТекущийОтборСтатусДанных.Использование = НЕ (Форма.ТекущийОтборСтатусДанных.НайтиПоЗначению(ТекущийОтборСтатусДанных.КомандаДанные) = Неопределено);
		Иначе
			ТекущийОтборСтатусДанных.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 4);
	СтруктураНомерГруппы.Вставить("Доступность", Истина);
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы); // Массив
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 4);
	СтруктураПоиска.Вставить("Использование", Истина);
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	
	Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
		Форма.Элементы.ГруппаОтборАктуальностьПодменю.Заголовок = НСтр("ru = 'Статус: Все'");
	Иначе
		Форма.Элементы.ГруппаОтборАктуальностьПодменю.Заголовок = НСтр("ru = 'Статус:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
	КонецЕсли;
	
	Если (СоответствиеКомандВременная.Количество() - НайденныеКомандыИспользование.Количество()) = 1 Тогда
		
		СтруктураНомерГруппыИспользование = Новый Структура;
		СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 4);
		СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Перечисления.СтатусыДанных.ПустаяСсылка());
		
		СоответствиеКомандВременнаяИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование); // Массив
		Если СоответствиеКомандВременнаяИспользование.Количество() Тогда
			СоответствиеКомандВременнаяИспользование[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборАктуальностьПодменю.Заголовок = НСтр("ru = 'Статус: Все'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная_Вид(Форма, ДополнительныеПараметры = Неопределено)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 3);
	
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	Для Каждого ТекущийОтборВидДанных Из НайденныеКомандыИспользование Цикл
		Если ЗначениеЗаполнено(ТекущийОтборВидДанных.КомандаДанные) Тогда
			ТекущийОтборВидДанных.Использование = НЕ (Форма.ТекущийОтборВидДанных.НайтиПоЗначению(ТекущийОтборВидДанных.КомандаДанные) = Неопределено);
		Иначе
			ТекущийОтборВидДанных.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 3);
	СтруктураНомерГруппы.Вставить("Доступность", Истина);
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы); // Массив
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 3);
	СтруктураПоиска.Вставить("Использование", Истина);
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	
	Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
		Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид: Все'");
	Иначе
		Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
	КонецЕсли;
	
	Если (СоответствиеКомандВременная.Количество() - НайденныеКомандыИспользование.Количество()) = 1 Тогда
		
		СтруктураНомерГруппыИспользование = Новый Структура;
		СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 3);
		СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Справочники.ВидыДанных.ПустаяСсылка());
		
		СоответствиеКомандВременнаяИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование); // Массив
		Если СоответствиеКомандВременнаяИспользование.Количество() Тогда
			СоответствиеКомандВременнаяИспользование[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид: Все'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная_Группа(Форма, ДополнительныеПараметры = Неопределено)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 2);
	
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	Для Каждого ТекущийОтборГруппаДанных Из НайденныеКомандыИспользование Цикл
		Если ЗначениеЗаполнено(ТекущийОтборГруппаДанных.КомандаДанные) Тогда
			ТекущийОтборГруппаДанных.Использование = НЕ (Форма.ТекущийОтборГруппаДанных.НайтиПоЗначению(ТекущийОтборГруппаДанных.КомандаДанные) = Неопределено);
		Иначе
			ТекущийОтборГруппаДанных.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 2);
	СтруктураНомерГруппы.Вставить("Доступность", Истина);
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы); // Массив
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 2);
	СтруктураПоиска.Вставить("Использование", Истина);
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	
	Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
		Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
	Иначе
		Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
	КонецЕсли;
	
	Если (СоответствиеКомандВременная.Количество() - НайденныеКомандыИспользование.Количество()) = 1 Тогда
		
		СтруктураНомерГруппыИспользование = Новый Структура;
		СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 2);
		СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Справочники.ГруппыДанных.ПустаяСсылка());
		
		СоответствиеКомандВременнаяИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование); // Массив
		Если СоответствиеКомандВременнаяИспользование.Количество() Тогда
			СоответствиеКомандВременнаяИспользование[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная_Классификатор(Форма, ДополнительныеПараметры = Неопределено)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 1);
	
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	Для Каждого ТекущийОтборКлассДанных Из НайденныеКомандыИспользование Цикл
		Если ЗначениеЗаполнено(ТекущийОтборКлассДанных.КомандаДанные) Тогда
			ТекущийОтборКлассДанных.Использование = НЕ (Форма.ТекущийОтборКлассДанных.НайтиПоЗначению(ТекущийОтборКлассДанных.КомандаДанные) = Неопределено);
		Иначе
			ТекущийОтборКлассДанных.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 1);
	СтруктураНомерГруппы.Вставить("Доступность", Истина);
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы); // Массив
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 1);
	СтруктураПоиска.Вставить("Использование", Истина);
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	
	Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
		Форма.Элементы.ГруппаОтборКлассификаторПодменю.Заголовок = НСтр("ru = 'Классификатор: Все'");
	Иначе
		Форма.Элементы.ГруппаОтборКлассификаторПодменю.Заголовок = НСтр("ru = 'Классификатор:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
	КонецЕсли;
	
	Если (СоответствиеКомандВременная.Количество() - НайденныеКомандыИспользование.Количество()) = 1 Тогда
		
		СтруктураНомерГруппыИспользование = Новый Структура;
		СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 1);
		СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Перечисления.КлассыДанных.ПустаяСсылка());
		
		СоответствиеКомандВременнаяИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование); // Массив
		Если СоответствиеКомандВременнаяИспользование.Количество() Тогда
			СоответствиеКомандВременнаяИспользование[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборКлассификаторПодменю.Заголовок = НСтр("ru = 'Классификатор: Все'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СкрытьНедоступныеКнопки

Процедура СкрытьНедоступныеКнопкиКлассификатор_Альтернативная(Форма, ДополнительныеПараметры = Неопределено)
	
	ВидДанныхВсе = Новый Массив; // СправочникСсылка.ВидыДанных
	ВидДанныхВсе.Добавить(Справочники.ВидыДанных.ПустаяСсылка());
	
	Для Каждого ТекущийОтборКлассДанных Из Форма.ТекущийОтборКлассДанных Цикл
		
		СтруктураПоискаКлассификатор = Новый Структура;
		СтруктураПоискаКлассификатор.Вставить("КлассДанных", ТекущийОтборКлассДанных.Значение);
		
		НайденныеСтроки = Форма.СоответствиеКомандОтбора.Выгрузить(СтруктураПоискаКлассификатор);
		ВидДанных = НайденныеСтроки.ВыгрузитьКолонку("ВидДанных"); // Массив
		ВидДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидДанных);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидДанныхВсе, ВидДанных, Истина);
		
	КонецЦикла;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 3);
	
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы);
	Для Каждого Строка Из СоответствиеКомандВременная Цикл
		Строка.Доступность = (НЕ ВидДанныхВсе.Найти(Строка.КомандаДанные) = Неопределено);
		Если Форма.ТекущийОтборВидДанных.Количество()
			И (НЕ Строка.Доступность ИЛИ НЕ ЗначениеЗаполнено(Строка.КомандаДанные) ИЛИ Форма.ТекущийОтборВидДанных.НайтиПоЗначению(Строка.КомандаДанные) = Неопределено) Тогда
				Строка.Использование = Ложь;
				ЭлементСписка = Форма.ТекущийОтборВидДанных.НайтиПоЗначению(Строка.КомандаДанные);
				Если НЕ ЭлементСписка = Неопределено И ЗначениеЗаполнено(Строка.КомандаДанные) Тогда
					Форма.ТекущийОтборВидДанных.Удалить(ЭлементСписка);
				КонецЕсли;
		Иначе
			Строка.Использование = Истина;
			ЭлементСписка = Форма.ТекущийОтборВидДанных.НайтиПоЗначению(Строка.КомандаДанные);
			Если Форма.ТекущийОтборВидДанных.Количество() И ЭлементСписка = Неопределено Тогда
				Форма.ТекущийОтборВидДанных.Добавить(Строка.КомандаДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 3);
	СтруктураНомерГруппы.Вставить("Доступность", Истина);
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 3);
	СтруктураПоиска.Вставить("Использование", Истина);
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
		Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Вид: Все'");
	Иначе
		Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Вид:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
	КонецЕсли;
	
	Если (СоответствиеКомандВременная.Количество() - НайденныеКомандыИспользование.Количество()) = 1 Тогда
		
		СтруктураНомерГруппыИспользование = Новый Структура;
		СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 3);
		СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Справочники.ВидыДанных.ПустаяСсылка());
		
		СоответствиеКомандВременнаяИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование);
		Если СоответствиеКомандВременнаяИспользование.Количество() Тогда
			СоответствиеКомандВременнаяИспользование[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Вид: Все'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьНедоступныеКнопкиКлассификаторВсе_Альтернативная(Форма, ДополнительныеПараметры = Неопределено)
	
	СтруктураНомерГруппыИспользование = Новый Структура;
	СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 1);
	СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Перечисления.КлассыДанных.ПустаяСсылка());
	
	НайденныеСтроки = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование); // Массив
	Если НайденныеСтроки.Количество() Тогда
		Признак = НайденныеСтроки[0].Использование; // Булево
	Иначе
		Признак = Ложь;
	КонецЕсли;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 3);
	
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы); // Массив
	Для Каждого Строка Из СоответствиеКомандВременная Цикл
		Если Форма.ТекущийОтборВидДанных.Количество() Тогда
			ТекущийПризнак = НЕ (Форма.ТекущийОтборВидДанных.НайтиПоЗначению(Строка.КомандаДанные) = Неопределено) И ЗначениеЗаполнено(Строка.КомандаДанные);
		Иначе
			ТекущийПризнак = Признак;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.КомандаДанные) Тогда
			Строка.Доступность = Признак;
			Строка.Использование = ТекущийПризнак;
		Иначе
			Строка.Доступность = Истина;
			Строка.Использование = ТекущийПризнак;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 3);
	СтруктураНомерГруппы.Вставить("Доступность", Истина);
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы); // Массив
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 3);
	СтруктураПоиска.Вставить("Использование", Истина);
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
	
	Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
		Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид: Все'");
	Иначе
		Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьНедоступныеКнопкиГруппы_Альтернативная(Форма, ДополнительныеПараметры = Неопределено)
	
	Если Форма.ТекущийОтборВидДанных.Количество() Тогда
		
		СкрытьНедоступныеКнопкиВидГруппы_Альтернативная(Форма, ДополнительныеПараметры);
		
	ИначеЕсли Форма.ТекущийОтборКлассДанных.Количество() Тогда
		
		СкрытьНедоступныеКнопкиГруппыКлассификатор_Альтернативная(Форма, ДополнительныеПараметры);
		
	Иначе
		
		СтруктураНомерГруппы = Новый Структура;
		СтруктураНомерГруппы.Вставить("НомерГруппы", 2);
		
		СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы); // Массив
		Для Каждого Строка Из СоответствиеКомандВременная Цикл
			Если Форма.ТекущийОтборГруппаДанных.Количество() Тогда
				ТекущийПризнак = НЕ (Форма.ТекущийОтборГруппаДанных.НайтиПоЗначению(Строка.КомандаДанные) = Неопределено) И ЗначениеЗаполнено(Строка.КомандаДанные);
			Иначе
				ТекущийПризнак = Истина;
			КонецЕсли;
			Строка.Доступность = Истина;
			Строка.Использование = ТекущийПризнак;
		КонецЦикла;
		
		СтруктураНомерГруппы = Новый Структура;
		СтруктураНомерГруппы.Вставить("НомерГруппы", 2);
		СтруктураНомерГруппы.Вставить("Доступность", Истина);
		СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы); // Массив
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 2);
		СтруктураПоиска.Вставить("Использование", Истина);
		НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска); // Массив
		
		Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
		Иначе
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьНедоступныеКнопкиГруппыКлассификатор_Альтернативная(Форма, ДополнительныеПараметры = Неопределено)
	
	ГруппаДанныхВсе = Новый Массив; // СправочникСсылка.ГруппаДанных
	ГруппаДанныхВсе.Добавить(Справочники.ГруппыДанных.ПустаяСсылка());
	
	Для Каждого ТекущийОтборКлассДанных Из Форма.ТекущийОтборКлассДанных Цикл
		
		СтруктураПоискаКлассификатор = Новый Структура;
		СтруктураПоискаКлассификатор.Вставить("КлассДанных", ТекущийОтборКлассДанных.Значение);
		
		НайденныеСтроки = Форма.СоответствиеКомандОтбора.Выгрузить(СтруктураПоискаКлассификатор);
		ГруппаДанных = НайденныеСтроки.ВыгрузитьКолонку("ГруппаДанных"); // Массив
		ГруппаДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ГруппаДанных);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппаДанныхВсе, ГруппаДанных, Истина);
		
	КонецЦикла;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 2);
	
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы);
	Для Каждого Строка Из СоответствиеКомандВременная Цикл
		Строка.Доступность = (НЕ ГруппаДанныхВсе.Найти(Строка.КомандаДанные) = Неопределено);
		Если Форма.ТекущийОтборВидДанных.Количество()
			И (НЕ Строка.Доступность ИЛИ НЕ ЗначениеЗаполнено(Строка.КомандаДанные)) Тогда
				Строка.Использование = Ложь;
				ЭлементСписка = Форма.ТекущийОтборГруппаДанных.НайтиПоЗначению(Строка.КомандаДанные);
				Если НЕ ЭлементСписка = Неопределено И ЗначениеЗаполнено(Строка.КомандаДанные) Тогда
					Форма.ТекущийОтборГруппаДанных.Удалить(ЭлементСписка);
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Форма.ТекущийОтборГруппаДанных.Количество() Тогда
		
		СтруктураНомерГруппыИспользование = Новый Структура;
		СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 2);
		СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Справочники.ГруппыДанных.ПустаяСсылка());
		
		СоответствиеКомандВременнаяИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование);
		Если СоответствиеКомандВременнаяИспользование.Количество() Тогда
			
			СоответствиеКомандВременнаяИспользование[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 3);
			
			НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
				НайденнаяКоманда.Использование = НайденнаяКоманда.Доступность;
			КонецЦикла;
			
			СтруктураНомерГруппы = Новый Структура;
			СтруктураНомерГруппы.Вставить("НомерГруппы", 3);
			СтруктураНомерГруппы.Вставить("Доступность", Истина);
			СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 3);
			СтруктураПоиска.Вставить("Использование", Истина);
			НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
				Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид: Все'");
			Иначе
				Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
			КонецЕсли;
			
			Если (СоответствиеКомандВременная.Количество() - НайденныеКомандыИспользование.Количество()) = 1 Тогда
				
				СтруктураНомерГруппыИспользование = Новый Структура;
				СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 3);
				СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Справочники.ВидыДанных.ПустаяСсылка());
				
				СоответствиеКомандВременнаяИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование);
				Если СоответствиеКомандВременнаяИспользование.Количество() Тогда
					СоответствиеКомандВременнаяИспользование[0].Использование = Истина;
					Форма.Элементы.ГруппаОтборВидДанныхПодменю.Заголовок = НСтр("ru = 'Вид: Все'");
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 2);
			
			НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
				НайденнаяКоманда.Использование = НайденнаяКоманда.Доступность;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 2);
	СтруктураНомерГруппы.Вставить("Доступность", Истина);
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 2);
	СтруктураПоиска.Вставить("Использование", Истина);
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
		Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
	Иначе
		Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьНедоступныеКнопкиВидГруппы_Альтернативная(Форма, ДополнительныеПараметры = Неопределено)
	
	ГруппаДанныхВсе = Новый Массив; // СправочникСсылка.ГруппаДанных
	ГруппаДанныхВсе.Добавить(Справочники.ГруппыДанных.ПустаяСсылка());
	
	Для Каждого ТекущийОтборВидДанных Из Форма.ТекущийОтборВидДанных Цикл
		
		СтруктураПоискаВидДанных = Новый Структура;
		СтруктураПоискаВидДанных.Вставить("ВидДанных", ТекущийОтборВидДанных.Значение);
		
		НайденныеСтроки = Форма.СоответствиеКомандОтбора.Выгрузить(СтруктураПоискаВидДанных);
		ГруппаДанных = НайденныеСтроки.ВыгрузитьКолонку("ГруппаДанных"); // Массив
		ГруппаДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ГруппаДанных);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппаДанныхВсе, ГруппаДанных, Истина);
		
	КонецЦикла;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 2);
	
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы);
	Для Каждого Строка Из СоответствиеКомандВременная Цикл
		Строка.Доступность = (НЕ ГруппаДанныхВсе.Найти(Строка.КомандаДанные) = Неопределено);
		Если НЕ Строка.Доступность ИЛИ НЕ ЗначениеЗаполнено(Строка.КомандаДанные) Тогда
			Строка.Использование = Ложь;
			ЭлементСписка = Форма.ТекущийОтборГруппаДанных.НайтиПоЗначению(Строка.КомандаДанные);
			Если НЕ ЭлементСписка = Неопределено И ЗначениеЗаполнено(Строка.КомандаДанные) Тогда
				Форма.ТекущийОтборГруппаДанных.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Форма.ТекущийОтборГруппаДанных.Количество() Тогда
		
		СтруктураНомерГруппыИспользование = Новый Структура;
		СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 2);
		СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Справочники.ГруппыДанных.ПустаяСсылка());
		
		СоответствиеКомандВременнаяИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование);
		Если СоответствиеКомандВременнаяИспользование.Количество() Тогда
			
			СоответствиеКомандВременнаяИспользование[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 2);
			
			НайденныеКоманды = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
				НайденнаяКоманда.Использование = НайденнаяКоманда.Доступность;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНомерГруппы = Новый Структура;
	СтруктураНомерГруппы.Вставить("НомерГруппы", 2);
	СтруктураНомерГруппы.Вставить("Доступность", Истина);
	СоответствиеКомандВременная = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 2);
	СтруктураПоиска.Вставить("Использование", Истина);
	НайденныеКомандыИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеКомандыИспользование.Количество() = СоответствиеКомандВременная.Количество() Тогда
		Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
	Иначе
		Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа:'") + Символы.НПП + НайденныеКомандыИспользование.Количество();
	КонецЕсли;
	
	Если (СоответствиеКомандВременная.Количество() - НайденныеКомандыИспользование.Количество()) = 1 Тогда
		
		СтруктураНомерГруппыИспользование = Новый Структура;
		СтруктураНомерГруппыИспользование.Вставить("НомерГруппы", 2);
		СтруктураНомерГруппыИспользование.Вставить("КомандаДанные", Справочники.ГруппыДанных.ПустаяСсылка());
		
		СоответствиеКомандВременнаяИспользование = Форма.СоответствиеКоманд.НайтиСтроки(СтруктураНомерГруппыИспользование);
		Если СоответствиеКомандВременнаяИспользование.Количество() Тогда
			СоответствиеКомандВременнаяИспользование[0].Использование = Истина;
			Форма.Элементы.ГруппаОтборГруппаДанныхПодменю.Заголовок = НСтр("ru = 'Группа: Все'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
