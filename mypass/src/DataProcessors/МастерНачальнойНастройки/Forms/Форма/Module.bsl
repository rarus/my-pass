///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// В режиме "Ребочее мето" скроем панель формы с заголовком
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "РежимЗапускаРабочееМесто", Константы.РежимЗапускаПриложенияРабочееМесто.Получить()) Тогда
		ЭтотОбъект.ОтображатьЗаголовок      = ЛОЖЬ;
		ЭтотОбъект.ОтображатьКнопкуЗакрытия = ЛОЖЬ;
	КонецЕсли;
	
	НачальнаяНастройкаМоиПаролиЗавершена = Константы.НачальнаяНастройкаМоиПаролиЗавершена.Получить();
	ЭтоНезависимоеПриложение             = МоиПаролиСлужебный.ЭтоНезависимоеПриложение();
	
	ОтобразитьДоступныеВидыДанных();
	
	ВыбранныйСтиль = Константы.СтильИнтерфейсаМоиПароли.Получить();
	Если НЕ ЗначениеЗаполнено(ВыбранныйСтиль) Тогда
		ВыбранныйСтиль = Перечисления.СтилиИнтерфейсаМоиПароли.Современный;
	КонецЕсли;
	ВыделитьЭлементыИнтерфейса();
	
	МоиПаролиСервер.РегистрацияСобытия("МастерНачальнойНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНезависимоеПриложение И НЕ НачальнаяНастройкаМоиПаролиЗавершена Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПередЗакрытием");
		ТекстВопроса       = НСтр("ru = 'Начальная настройка приложения не завершена.
		                                |Продолжить при следующем запуске?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
		Отказ = ИСТИНА;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Подключаемый вид данных выбор.
// 
// Параметры:
//  Элемент - ПолеФормы - Элемент
&НаКлиенте
Процедура Подключаемый_ВидДанныхВыбор(Элемент)
	
	Итератор = СтрЗаменить(Элемент.Имя, "ВидДанных", "");
	ПодчиненныеЭлементыПоИтератору = Элементы["ГруппаВидДанныхСвойства" + Итератор].ПодчиненныеЭлементы;
	
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыПоИтератору Цикл
		ЭтотОбъект[ПодчиненныйЭлемент.Имя] = ЭтотОбъект[Элемент.Имя];
	КонецЦикла;
	
КонецПроцедуры

// Подключаемый вид данных свойство выбор.
// 
// Параметры:
//  Элемент - ПолеФормы - Элемент
&НаКлиенте
Процедура Подключаемый_ВидДанныхСвойствоВыбор(Элемент)
	
	Если ЭтотОбъект[Элемент.Имя] Тогда
		ЭтотОбъект[Элемент.Родитель.Родитель.ПодчиненныеЭлементы[0].Имя] = ЭтотОбъект[Элемент.Имя];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьНачальныеНастройки(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНачальноеЗаполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыбранныеВидыДанных(Команда)
	
	СоздатьВыбранныеВидыДанныхНаСервере();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание завершено'"), ,
		НСтр("ru = 'Новые виды данных добавлены'"),
		БиблиотекаКартинок.МоиПаролиУспешно64);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборИнтерфейса;
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьСозданиеВидовДанных(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборИнтерфейса;
	
КонецПроцедуры

&НаКлиенте
Процедура Классический(Команда)
	
	ВыбранныйСтиль = ПредопределенноеЗначение("Перечисление.СтилиИнтерфейсаМоиПароли.Классический");
	ВыделитьЭлементыИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура Современный(Команда)
	
	ВыбранныйСтиль = ПредопределенноеЗначение("Перечисление.СтилиИнтерфейсаМоиПароли.Современный");
	ВыделитьЭлементыИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИЗакрыть(Команда)
	
	ЗаписатьСтильИнтерфейса(ВыбранныйСтиль);
	
	НачальнаяНастройкаМоиПаролиЗавершена = ИСТИНА;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(Результат, Дополнительный) Экспорт
	
	Если Дополнительный="ПередЗакрытием" Тогда
		
		Если Результат=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат=КодВозвратаДиалога.Нет Тогда
			ЗаписатьПризнакЗавершенияНачальнойНастройки();
		КонецЕсли;
		
		НачальнаяНастройкаМоиПаролиЗавершена = ИСТИНА;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСтильИнтерфейса(ВыбранныйСтиль)
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйСтиль) Тогда
		ВыбранныйСтиль = Перечисления.СтилиИнтерфейсаМоиПароли.Современный;
	КонецЕсли;
	Константы.СтильИнтерфейсаМоиПароли.Установить(ВыбранныйСтиль);
	
	ЗаписатьПризнакЗавершенияНачальнойНастройки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПризнакЗавершенияНачальнойНастройки()
	
	Константы.НачальнаяНастройкаМоиПаролиЗавершена.Установить(ИСТИНА);
	
КонецПроцедуры // ЗаписатьПризнакЗавершенияНачальнойНастройки()

&НаСервере
Процедура ВыделитьЭлементыИнтерфейса()
	
	Если ВыбранныйСтиль = Перечисления.СтилиИнтерфейсаМоиПароли.Классический Тогда
		
		Элементы.ГруппаКлассическийСтиль.ЦветФона = ЦветаСтиля.ЦветВажногоМоиПароли;
		Элементы.ГруппаСовременныйСтиль.ЦветФона  = ЦветаСтиля.ЦветДополнительнойНавигацииМоиПароли;
		
	ИначеЕсли ВыбранныйСтиль = Перечисления.СтилиИнтерфейсаМоиПароли.Современный Тогда
		
		Элементы.ГруппаКлассическийСтиль.ЦветФона = ЦветаСтиля.ЦветДополнительнойНавигацииМоиПароли;
		Элементы.ГруппаСовременныйСтиль.ЦветФона  = ЦветаСтиля.ЦветВажногоМоиПароли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидыДанныхБазы()
	
	ВидыДанныхБазы = Новый Соответствие();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДанных.Наименование КАК ВидДанныхНаименование,
	|	ВидыДанных.Ссылка КАК ВидДанныхСсылка,
	|	ВидыДанных.ПометкаУдаления КАК ВидДанныхПометкаУдаления,
	|	СвойстваВидовДанных.Свойство.Наименование КАК СвойствоНаименование,
	|	СвойстваВидовДанных.Свойство КАК СвойствоСсылка,
	|	СвойстваВидовДанных.Свойство.ПометкаУдаления КАК СвойствоПометкаУдаления
	|ИЗ
	|	Справочник.ВидыДанных КАК ВидыДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДанных.СвойстваВидаДанных КАК СвойстваВидовДанных
	|		ПО ВидыДанных.Ссылка = СвойстваВидовДанных.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДанныхПометкаУдаления,
	|	ВидДанныхСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КлючВидаДанных = ВРег(СокрЛП(Выборка.ВидДанныхНаименование));
		КлючСвойства   = ВРег(СокрЛП(Выборка.СвойствоНаименование));
		
		ВидДанных = ВидыДанныхБазы[КлючВидаДанных];
		Если ВидДанных=Неопределено ИЛИ ВидДанных.Ссылка<>Выборка.ВидДанныхСсылка Тогда
			ВидДанных = Новый Структура();
			ВидДанных.Вставить("Наименование",    Выборка.ВидДанныхНаименование);
			ВидДанных.Вставить("Ссылка",          Выборка.ВидДанныхСсылка);
			ВидДанных.Вставить("ПометкаУдаления", Выборка.ВидДанныхПометкаУдаления);
			ВидДанных.Вставить("Свойства",        Новый Соответствие());
			ВидыДанныхБазы.Вставить(КлючВидаДанных, ВидДанных);
		КонецЕсли;
		
		СвойствоВидаДанных = Новый Структура();
		СвойствоВидаДанных.Вставить("Наименование",    Выборка.СвойствоНаименование);
		СвойствоВидаДанных.Вставить("Ссылка",          Выборка.СвойствоСсылка);
		СвойствоВидаДанных.Вставить("ПометкаУдаления", Выборка.СвойствоПометкаУдаления);
		ВидДанных.Свойства.Вставить(КлючСвойства, СвойствоВидаДанных);
		
	КонецЦикла;
	
	Возврат ВидыДанныхБазы;
	
КонецФункции // ПолучитьВидыДанныхБазы()

//@skip-check statement-type-change
//@skip-check property-return-type
&НаСервере
Процедура ОтобразитьДоступныеВидыДанных()
	
	Итератор = 0;
	
	ВидыДанныхБазы = ПолучитьВидыДанныхБазы();
	
	Макет = Обработки.МастерНачальнойНастройки.ПолучитьМакет("НачальноеЗаполнение");
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(Макет.Область());
	ТаблицаНачальноеЗаполнение = Построитель.Результат.Выгрузить();
	
	ВидыДанных = ТаблицаНачальноеЗаполнение.ВыгрузитьКолонку("ВидДанных");
	ВидыДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыДанных);
	
	Для Каждого ВидДанных Из ВидыДанных Цикл
		
		ВидДанныхБазы = ВидыДанныхБазы[ВРег(СокрЛП(ВидДанных))];
		Если ВидДанныхБазы=Неопределено ИЛИ ВидДанныхБазы.ПометкаУдаления Тогда
			СуществуетЭлементВидаДанных = ЛОЖЬ;
			СвойстваВидаДанных = Новый Соответствие();
		Иначе
			СуществуетЭлементВидаДанных = ИСТИНА;
			СвойстваВидаДанных = ВидДанныхБазы.Свойства;
		КонецЕсли;
		
		// Общая группа
		ГруппаВидДанных = Элементы.Добавить("ГруппаВидДанных" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), Элементы.ГруппаЭлементыНачальногоЗаполнения);
		ГруппаВидДанных.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаВидДанных.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаВидДанных.ЦветФона = ЦветаСтиля.ЦветДополнительнойНавигацииМоиПароли;
		ГруппаВидДанных.РастягиватьПоВертикали = Истина;
		ГруппаВидДанных.ОтображатьЗаголовок = Ложь;
		
		// Общий флажок
		ИмяПоля = "ВидДанных" + Формат(Итератор, "ЧГ=0");
		
		МассивРеквизитовФормы = Новый Массив; // Массив из РеквизитФормы
		НовыйРеквизит = Новый РеквизитФормы(ИмяПоля, Новый ОписаниеТипов("Булево"));
		МассивРеквизитовФормы.Добавить(НовыйРеквизит);
		ИзменитьРеквизиты(МассивРеквизитовФормы);
		
		ЭтотОбъект[ИмяПоля] = ИСТИНА;
		
		НовыйЭлемент = Элементы.Добавить(ИмяПоля, Тип("ПолеФормы"), ГруппаВидДанных);
		НовыйЭлемент.ПутьКДанным = ИмяПоля;
		НовыйЭлемент.Заголовок = ВидДанных;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		НовыйЭлемент.ШрифтЗаголовка = ШрифтыСтиля.ШрифтПолужирный;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.Доступность = НЕ СуществуетЭлементВидаДанных;
		
		НовыйЭлемент.УстановитьДействие("ПриИзменении","Подключаемый_ВидДанныхВыбор");
		
		// Группа флажков свойств
		ГруппаВидДанныхСвойства = Элементы.Добавить("ГруппаВидДанныхСвойства" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаВидДанных);
		ГруппаВидДанныхСвойства.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаВидДанныхСвойства.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаВидДанныхСвойства.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаВидДанныхСвойства.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
		ГруппаВидДанныхСвойства.ОтображатьЗаголовок = Ложь;
		
		Итератор = Итератор + 1;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидДанных", ВидДанных);
		
		НайденныеСвойства = ТаблицаНачальноеЗаполнение.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Свойство Из НайденныеСвойства Цикл
			
			СвойствоБазы = СвойстваВидаДанных[ВРег(СокрЛП(Свойство.Свойство))];
			СуществуетСвойствоВидаДанных = (НЕ СвойствоБазы=Неопределено);
			
			// Флажки свойств
			ИмяПоля = "ВидДанных" + Формат(Итератор, "ЧГ=0");
			
			МассивРеквизитовФормы = Новый Массив; // Массив из РеквизитФормы
			НовыйРеквизит = Новый РеквизитФормы(ИмяПоля, Новый ОписаниеТипов("Булево"));
			МассивРеквизитовФормы.Добавить(НовыйРеквизит);
			ИзменитьРеквизиты(МассивРеквизитовФормы);
			
			ЭтотОбъект[ИмяПоля] = СуществуетСвойствоВидаДанных ИЛИ НЕ СуществуетЭлементВидаДанных;
			
			НовыйЭлемент = Элементы.Добавить(ИмяПоля, Тип("ПолеФормы"), ГруппаВидДанныхСвойства);
			НовыйЭлемент.ПутьКДанным = ИмяПоля;
			НовыйЭлемент.Заголовок = Свойство.Свойство;
			НовыйЭлемент.Подсказка = Свойство.ЗначенияПоУмолчанию;
			НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлемент.Доступность = НЕ СуществуетСвойствоВидаДанных;
			
			НовыйЭлемент.УстановитьДействие("ПриИзменении","Подключаемый_ВидДанныхСвойствоВыбор");
			
			Итератор = Итератор + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//@skip-check property-return-type
//@skip-check invocation-parameter-type-intersect
//@skip-check statement-type-change
&НаСервере
Процедура СоздатьВыбранныеВидыДанныхНаСервере()
	
	ВидыДанныхБазы = ПолучитьВидыДанныхБазы();
	
	ВсеСвойстваБазы = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвойстваВидовДанных.Ссылка КАК Ссылка,
	|	СвойстваВидовДанных.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваВидовДанных КАК СвойстваВидовДанных
	|ГДЕ
	|	НЕ СвойстваВидовДанных.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВсеСвойстваБазы.Вставить(ВРег(СокрЛП(Выборка.Наименование)), Выборка.Ссылка);
	КонецЦикла;
	
	Макет = Обработки.МастерНачальнойНастройки.ПолучитьМакет("НачальноеЗаполнение");
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(Макет.Область());
	ТаблицаНачальноеЗаполнение = Построитель.Результат.Выгрузить();
	
	Для Каждого ЭлементНачальногоЗаполнения Из Элементы.ГруппаЭлементыНачальногоЗаполнения.ПодчиненныеЭлементы Цикл
		
		Элемент = ЭлементНачальногоЗаполнения.ПодчиненныеЭлементы[0];
		ГруппаСвойств = ЭлементНачальногоЗаполнения.ПодчиненныеЭлементы[1];
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидДанных", Элемент.Заголовок);
		
		НайденныеСтроки = ТаблицаНачальноеЗаполнение.Скопировать(СтруктураПоиска);
		Если НайденныеСтроки.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Если вид данных не нужно создавать, пропустим его
		Если НЕ ЭтотОбъект[Элемент.Имя] Тогда
			Продолжить;
		КонецЕсли;
		
		// Найдем вид данных среди существующих или создадим новый
		ВидДанныхБазы = ВидыДанныхБазы[ВРег(СокрЛП(Элемент.Заголовок))];
		Если ВидДанныхБазы=Неопределено Тогда
			СвойстваВидаДанных = Новый Соответствие();
			ВидДанныхОбъект = Справочники.ВидыДанных.СоздатьЭлемент();
			ВидДанныхОбъект.Заполнить(Неопределено);
			ВидДанныхОбъект.Наименование = Элемент.Заголовок;
			ВидДанныхОбъект.Комментарий  = НСтр("ru = 'Создан при начальном заполнении'");
		Иначе
			СвойстваВидаДанных = ВидДанныхБазы.Свойства;
			ВидДанныхОбъект = ВидДанныхБазы.Ссылка.ПолучитьОбъект();
			Если ВидДанныхОбъект.ПометкаУдаления Тогда
				ВидДанныхОбъект.ПометкаУдаления = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем свойства вида данных
		Для Каждого ЭлементСвойства Из ГруппаСвойств.ПодчиненныеЭлементы Цикл
			
			СтруктураПоискаСвойства = Новый Структура;
			СтруктураПоискаСвойства.Вставить("Свойство", ЭлементСвойства.Заголовок);
			
			НайденныеСтрокиСвойства = НайденныеСтроки.Скопировать(СтруктураПоискаСвойства);
			Если НайденныеСтрокиСвойства.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			НайденнаяСтрокаСвойства = НайденныеСтрокиСвойства[0];
			
			// Если свойство не нужно создавать, пропустим его
			Если НЕ ЭтотОбъект[ЭлементСвойства.Имя] Тогда
				Продолжить;
			КонецЕсли;
			
			// Найдем свойство среди назначенных виду данных
			СвойствоВидаДанных = СвойстваВидаДанных[ВРег(СокрЛП(ЭлементСвойства.Заголовок))];
			Если НЕ СвойствоВидаДанных=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Найдем свойство среди существующих в базе данных
			СвойствоВидаДанных = ВсеСвойстваБазы[ВРег(СокрЛП(ЭлементСвойства.Заголовок))];
			Если СвойствоВидаДанных=Неопределено Тогда
				
				// Создаем свойство вида данных
				СвойствоВидаДанныхОбъект = ПланыВидовХарактеристик.СвойстваВидовДанных.СоздатьЭлемент();
				СвойствоВидаДанныхОбъект.Наименование = ЭлементСвойства.Заголовок;
				СвойствоВидаДанныхОбъект.ТипЗначения  = Новый ОписаниеТипов(НайденнаяСтрокаСвойства.ТипДанных);
				СвойствоВидаДанныхОбъект.РежимПароля  = НайденнаяСтрокаСвойства.РежимПароля;
				
				Попытка
					СвойствоВидаДанныхОбъект.Записать();
				Исключение
					ПричинаОшибки = ИнформацияОбОшибке();
					Продолжить;
				КонецПопытки;
				
				ВсеСвойстваБазы.Вставить(ВРег(СокрЛП(ЭлементСвойства.Заголовок)), СвойствоВидаДанныхОбъект.Ссылка);
				СвойствоСсылка = СвойствоВидаДанныхОбъект.Ссылка;
				
			Иначе
				СвойствоСсылка = СвойствоВидаДанных.Ссылка;
			КонецЕсли;
			
			// Вносим свойство в табличную часть вида данных
			НоваяСтрока = ВидДанныхОбъект.СвойстваВидаДанных.Добавить();
			НоваяСтрока.Свойство   = СвойствоСсылка;
			НоваяСтрока.Отображать = Истина;
			
			// Создаем варианты значения свойства
			ЗначенияПоУмолчанию = СтрРазделить(НайденнаяСтрокаСвойства.ЗначенияПоУмолчанию, ",", Ложь);
			Для Каждого ЗначениеПоУмолчанию Из ЗначенияПоУмолчанию Цикл
				
				ИмяЗначения = СокрЛП(ЗначениеПоУмолчанию);
				
				Если НЕ Справочники.ДополнительныеСвойства.НайтиПоНаименованию(ИмяЗначения).Пустая() Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеПоУмолчаниюОбъект = Справочники.ДополнительныеСвойства.СоздатьЭлемент();
				ЗначениеПоУмолчаниюОбъект.Заполнить(Неопределено);
				ЗначениеПоУмолчаниюОбъект.Владелец     = СвойствоСсылка;
				ЗначениеПоУмолчаниюОбъект.Наименование = СокрЛП(ИмяЗначения);
				
				Попытка
					ЗначениеПоУмолчаниюОбъект.Записать();
				Исключение
					ПричинаОшибки = ИнформацияОбОшибке();
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Не нужно записывать, если вид данных остался без изменений
		Если НЕ ВидДанныхОбъект.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ВидДанныхОбъект.Записать();
		Исключение
			ПричинаОшибки = ИнформацияОбОшибке();
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
