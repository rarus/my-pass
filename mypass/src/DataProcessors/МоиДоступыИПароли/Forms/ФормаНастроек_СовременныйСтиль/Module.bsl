///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
//@skip-check typed-value-adding-to-untyped-collection
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПорядокГруппировок.Количество()=0 Тогда
		ПорядокГруппировок.Добавить(Перечисления.УровниДоступов.КлассДанных,,  Истина);
		ПорядокГруппировок.Добавить(Перечисления.УровниДоступов.ВидДанных,,    Истина);
		ПорядокГруппировок.Добавить(Перечисления.УровниДоступов.ГруппаДанных,, Истина);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	ЗаполнитьСпискиВыбораОтборов();
	
	РежимЗапускаПриложенияРабочееМесто = Константы.РежимЗапускаПриложенияРабочееМесто.Получить();
	СтильИнтерфейсаМоиПароли = Константы.СтильИнтерфейсаМоиПароли.Получить();
	СохранятьСвернутыеГруппировки = Константы.СохранятьСвернутыеГруппировки.Получить();
	
	ИспользоватьКлассыДанных = Константы.ИспользоватьКлассыДанных.Получить();
	ИспользоватьГруппыДанных = Константы.ИспользоватьГруппыДанных.Получить();
	
	ИспользоватьНапоминанияПользователя = Константы.ИспользоватьНапоминанияПользователя.Получить();
	ЦветФонаНапоминанияИспользоватьИзГруппыДанных = Константы.ЦветФонаНапоминанияИспользоватьИзГруппыДанных.Получить();
	ПоложениеНапоминанийНаФормеРабочегоМеста = Константы.ПоложениеНапоминанийНаФормеРабочегоМеста.Получить();
	
	Элементы.ГруппаНастройкаЦветаФонаНапоминаний.Доступность = ИспользоватьНапоминанияПользователя;
	Элементы.ГруппаЦветФонаНапоминанияИспользоватьИзГруппыДанных.Доступность = ИспользоватьНапоминанияПользователя;
	Элементы.ГруппаПоложениеПанелиНапоминаний.Доступность = ИспользоватьНапоминанияПользователя;
	
	УстановитьОтборыСтрок();
	
	НастроитьФорму();
	
	МоиПаролиСервер.РегистрацияСобытия("Настройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИспользоватьКлассыДанныхПриИзменении(Неопределено);
	ИспользоватьГруппыДанныхПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	МоиПаролиСервер.ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная(ЭтотОбъект, Настройки);
	
	СкрытьНедоступныеКнопки(1);
	СкрытьНедоступныеКнопки(2);
	
	Элементы.ГруппаКомандыИОтборы.Доступность = (РежимОтбораПоУмолчанию = 0);
	
КонецПроцедуры

#КонецОбласти

//@skip-check module-structure-form-event-regions
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СоответствиеКомандИспользованиеКлассификаторПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеКомандОтборКлассификаторМеню.ТекущиеДанные; // СтрокаТаблицыЗначений
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	МоиПаролиКлиент.КлассификаторВыборНаКлиенте(ЭтотОбъект, ТекущиеДанные);
	
	СкрытьНедоступныеКнопки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеКомандИспользованиеГруппаДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеКомандОтборГруппаДанныхМеню.ТекущиеДанные; // СтрокаТаблицыЗначений
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	МоиПаролиКлиент.ГруппаДанныхВыборНаКлиенте(ЭтотОбъект, ТекущиеДанные);
	
	СкрытьНедоступныеКнопки(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеКомандИспользованиеВидДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеКомандОтборВидДанныхМеню.ТекущиеДанные; // СтрокаТаблицыЗначений
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	МоиПаролиКлиент.ВидДанныхВыборНаКлиенте(ЭтотОбъект, ТекущиеДанные);
	
	СкрытьНедоступныеКнопки(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеКомандИспользованиеАктуальностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоответствиеКомандОтборАктуальностьМеню.ТекущиеДанные; // СтрокаТаблицыЗначений
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	МоиПаролиКлиент.СтатусДанныхВыборНаКлиенте(ЭтотОбъект, ТекущиеДанные);
	
	СкрытьНедоступныеКнопки(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаписатьИЗакрытьНажатие(Элемент)
	
	Если ПроверкиПройдены() Тогда
		ЗаписатьИЗакрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтбораПоУмолчаниюПриИзменении(Элемент)
	
	Элементы.ГруппаКомандыИОтборы.Доступность = (РежимОтбораПоУмолчанию = 0);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаРаботаH1Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЦветТекстаПоУмолчанию("ЦветТекстаРаботаКлассыДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаРаботаH2Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЦветТекстаПоУмолчанию("ЦветТекстаРаботаВидыДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаРаботаH3Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЦветТекстаПоУмолчанию("ЦветТекстаРаботаГруппыДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаЛичноеH1Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЦветТекстаПоУмолчанию("ЦветТекстаЛичноеКлассыДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаЛичноеH2Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЦветТекстаПоУмолчанию("ЦветТекстаЛичноеВидыДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаЛичноеH3Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЦветТекстаПоУмолчанию("ЦветТекстаЛичноеГруппыДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФонаНапоминанияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЦветТекстаПоУмолчанию("ЦветФонаНапоминания");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФонаНапоминанияДобавитьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьЦветТекстаПоУмолчанию("ЦветФонаНапоминанияДобавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНапоминанияПользователяПриИзменении(Элемент)
	
	Элементы.ГруппаНастройкаЦветаФонаНапоминаний.Доступность = ИспользоватьНапоминанияПользователя;
	Элементы.ГруппаЦветФонаНапоминанияИспользоватьИзГруппыДанных.Доступность = ИспользоватьНапоминанияПользователя;
	Элементы.ГруппаПоложениеПанелиНапоминаний.Доступность = ИспользоватьНапоминанияПользователя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложениеПанелиНапоминанийЛевоПримерПравоНажатие(Элемент)
	
	ПоложениеНапоминанийНаФормеРабочегоМеста = 1;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложениеПанелиНапоминанийЛевоПримерЛевоНажатие(Элемент)
	
	ПоложениеНапоминанийНаФормеРабочегоМеста = 1;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложениеПанелиНапоминанийПравоПримерПравоНажатие(Элемент)
	
	ПоложениеНапоминанийНаФормеРабочегоМеста = 0;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложениеПанелиНапоминанийПравоПримерЛевоНажатие(Элемент)
	
	ПоложениеНапоминанийНаФормеРабочегоМеста = 0;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКлассыДанныхПриИзменении(Элемент)
	
	Элементы.ГруппаОтборКлассификаторПодменю.Видимость = ИспользоватьКлассыДанных;
	Элементы.ДекорацияЦветЗаголовок1.Доступность = ИспользоватьКлассыДанных;
	Элементы.ЦветТекстаРаботаH1     .Доступность = ИспользоватьКлассыДанных;
	Элементы.ЦветТекстаЛичноеH1     .Доступность = ИспользоватьКлассыДанных;
	
	Если ИспользоватьКлассыДанных Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГруппировки = ПорядокГруппировок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.УровниДоступов.КлассДанных"));
	Если СтрокаГруппировки=Неопределено ИЛИ НЕ СтрокаГруппировки.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГруппировки.Пометка = ЛОЖЬ;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГруппыДанныхПриИзменении(Элемент)
	
	Элементы.ГруппаОтборГруппаДанныхПодменю.Видимость = ИспользоватьГруппыДанных;
	Элементы.ДекорацияЦветЗаголовок3.Доступность = ИспользоватьГруппыДанных;
	Элементы.ЦветТекстаРаботаH3     .Доступность = ИспользоватьГруппыДанных;
	Элементы.ЦветТекстаЛичноеH3     .Доступность = ИспользоватьГруппыДанных;
	
	Если ИспользоватьГруппыДанных Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГруппировки = ПорядокГруппировок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.УровниДоступов.ГруппаДанных"));
	Если СтрокаГруппировки=Неопределено ИЛИ НЕ СтрокаГруппировки.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГруппировки.Пометка = ЛОЖЬ;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Применить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	
	Если ПроверкиПройдены() Тогда
		ЗаписатьИЗакрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииКлиент

&НаКлиенте
Функция ПроверкиПройдены()
	
	Результат = Истина;
	
	Если НЕ ПорядокГруппировок[0].Пометка И (ПорядокГруппировок[1].Пометка ИЛИ ПорядокГруппировок[2].Пометка) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'В порядке группировок отключенные должны быть в конце списка'");
		Сообщение.ПутьКДанным = "ПорядокГруппировок";
		Сообщение.Сообщить();
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ПорядокГруппировок[1].Пометка И ПорядокГруппировок[2].Пометка Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'В порядке группировок отключенные должны быть в конце списка'");
		Сообщение.ПутьКДанным = "ПорядокГруппировок";
		Сообщение.Сообщить();
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПрименитьНастройкиНаСервере();
	
	ОтборКлассДанныхПоУмолчанию  = ТекущийОтборКлассДанных;
	ОтборСтатусДанныхПоУмолчанию = ТекущийОтборСтатусДанных;
	ОтборГруппаДанныхПоУмолчанию = ТекущийОтборГруппаДанных;
	ОтборВидДанныхПоУмолчанию    = ТекущийОтборВидДанных;
	ОткрытьДругойСтильИнтерфейса = (СтильИнтерфейсаМоиПароли=ПредопределенноеЗначение("Перечисление.СтилиИнтерфейсаМоиПароли.Классический"));
	
	// Сформируем настройки закрытия
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ОтборКлассДанныхПоУмолчанию",  ОтборКлассДанныхПоУмолчанию);
	ПараметрыЗакрытия.Вставить("ОтборСтатусДанныхПоУмолчанию", ОтборСтатусДанныхПоУмолчанию);
	ПараметрыЗакрытия.Вставить("ОтборГруппаДанныхПоУмолчанию", ОтборГруппаДанныхПоУмолчанию);
	ПараметрыЗакрытия.Вставить("ОтборВидДанныхПоУмолчанию",    ОтборВидДанныхПоУмолчанию);
	ПараметрыЗакрытия.Вставить("РежимОтбораПоУмолчанию",       РежимОтбораПоУмолчанию);
	ПараметрыЗакрытия.Вставить("ПорядокГруппировок",           ПорядокГруппировок);
	ПараметрыЗакрытия.Вставить("ОткрытьДругойСтильИнтерфейса", ОткрытьДругойСтильИнтерфейса);
	
	// Закроем форму
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСервер

&НаСервере
Процедура ЗаполнитьСпискиВыбораОтборов()
	
	МоиПаролиСервер.ЗаполнитьСоответствиеКлассификацииДанных(ЭтотОбъект);
	МоиПаролиСервер.ЗаполнитьСоответствияКомандОтбора_Альтернативная(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьНедоступныеКнопки(Знач НомерГруппы)
	
	МоиПаролиСервер.СкрытьНедоступныеКомандыОтбора_Альтернативная(ЭтотОбъект, НомерГруппы);
	
КонецПроцедуры

//@skip-check property-return-type
&НаСервере
Процедура УстановитьОтборыСтрок()
	
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура("Доступность, НомерГруппы", Истина, 1);
	Элементы.СоответствиеКомандОтборКлассификаторМеню.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура("Доступность, НомерГруппы", Истина, 2);
	Элементы.СоответствиеКомандОтборГруппаДанныхМеню.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура("Доступность, НомерГруппы", Истина, 3);
	Элементы.СоответствиеКомандОтборВидДанныхМеню.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура("Доступность, НомерГруппы", Истина, 4);
	Элементы.СоответствиеКомандОтборАктуальностьМеню.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Функциональные опции
	Константы.ИспользоватьКлассыДанных.Установить(ИспользоватьКлассыДанных);
	Константы.ИспользоватьГруппыДанных.Установить(ИспользоватьГруппыДанных);
	
	// Сохранить цвета группировок
	Константы.ЦветТекстаЛичноеКлассыДанных.Установить(Новый ХранилищеЗначения(ЦветТекстаЛичноеКлассыДанных));
	Константы.ЦветТекстаЛичноеВидыДанных  .Установить(Новый ХранилищеЗначения(ЦветТекстаЛичноеВидыДанных));
	Константы.ЦветТекстаЛичноеГруппыДанных.Установить(Новый ХранилищеЗначения(ЦветТекстаЛичноеГруппыДанных));
	Константы.ЦветТекстаРаботаКлассыДанных.Установить(Новый ХранилищеЗначения(ЦветТекстаРаботаКлассыДанных));
	Константы.ЦветТекстаРаботаВидыДанных  .Установить(Новый ХранилищеЗначения(ЦветТекстаРаботаВидыДанных));
	Константы.ЦветТекстаРаботаГруппыДанных.Установить(Новый ХранилищеЗначения(ЦветТекстаРаботаГруппыДанных));
	
	// Стиль формы
	Константы.РежимЗапускаПриложенияРабочееМесто.Установить(РежимЗапускаПриложенияРабочееМесто);
	Константы.СтильИнтерфейсаМоиПароли          .Установить(СтильИнтерфейсаМоиПароли);
	Константы.СохранятьСвернутыеГруппировки     .Установить(СохранятьСвернутыеГруппировки);
	
	// Напоминанания
	Константы.ИспользоватьНапоминанияПользователя          .Установить(ИспользоватьНапоминанияПользователя);
	Константы.ПоложениеНапоминанийНаФормеРабочегоМеста     .Установить(ПоложениеНапоминанийНаФормеРабочегоМеста);
	Константы.ЦветФонаНапоминанияИспользоватьИзГруппыДанных.Установить(ЦветФонаНапоминанияИспользоватьИзГруппыДанных);
	
	// Сохранить цвета напоминаний
	Константы.ЦветФонаНапоминания        .Установить(Новый ХранилищеЗначения(ЦветФонаНапоминания));
	Константы.ЦветФонаНапоминанияДобавить.Установить(Новый ХранилищеЗначения(ЦветФонаНапоминанияДобавить));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПрименитьНастройкиНаСервере()

//@skip-check statement-type-change
&НаСервере
Процедура НастроитьФорму()
	
	ЦветТекстаЛичноеКлассыДанных = Константы.ЦветТекстаЛичноеКлассыДанных.Получить().Получить();
	ЦветТекстаЛичноеВидыДанных   = Константы.ЦветТекстаЛичноеВидыДанных  .Получить().Получить();
	ЦветТекстаЛичноеГруппыДанных = Константы.ЦветТекстаЛичноеГруппыДанных.Получить().Получить();
	
	ЦветТекстаРаботаКлассыДанных = Константы.ЦветТекстаРаботаКлассыДанных.Получить().Получить();
	ЦветТекстаРаботаВидыДанных   = Константы.ЦветТекстаРаботаВидыДанных  .Получить().Получить();
	ЦветТекстаРаботаГруппыДанных = Константы.ЦветТекстаРаботаГруппыДанных.Получить().Получить();
	
	ЦветФонаНапоминания          = Константы.ЦветФонаНапоминания         .Получить().Получить();
	ЦветФонаНапоминанияДобавить  = Константы.ЦветФонаНапоминанияДобавить .Получить().Получить();
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаЛичноеКлассыДанных) Тогда
		ЦветТекстаЛичноеКлассыДанных = ЦветаСтиля.ЦветТекстаЛичноеКлассыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаЛичноеВидыДанных) Тогда
		ЦветТекстаЛичноеВидыДанных = ЦветаСтиля.ЦветТекстаЛичноеВидыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаЛичноеГруппыДанных) Тогда
		ЦветТекстаЛичноеГруппыДанных = ЦветаСтиля.ЦветТекстаЛичноеГруппыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаРаботаКлассыДанных) Тогда
		ЦветТекстаРаботаКлассыДанных = ЦветаСтиля.ЦветТекстаРаботаКлассыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаРаботаВидыДанных) Тогда
		ЦветТекстаРаботаВидыДанных = ЦветаСтиля.ЦветТекстаРаботаВидыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаРаботаГруппыДанных) Тогда
		ЦветТекстаРаботаГруппыДанных = ЦветаСтиля.ЦветТекстаРаботаГруппыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветФонаНапоминания) Тогда
		ЦветФонаНапоминания = ЦветаСтиля.ЦветФонаНапоминания;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветФонаНапоминанияДобавить) Тогда
		ЦветФонаНапоминанияДобавить = ЦветаСтиля.ЦветФонаНапоминанияДобавить;
	КонецЕсли;
	
	Если ПоложениеНапоминанийНаФормеРабочегоМеста = 0 Тогда
		
		Элементы.ГруппаПоложениеПанелиНапоминанийПравоПример.ЦветФона = ЦветаСтиля.ЦветВажногоМоиПароли;
		Элементы.ГруппаПоложениеПанелиНапоминанийЛевоПример.ЦветФона = WebЦвета.СветлоСерый;
		
	ИначеЕсли ПоложениеНапоминанийНаФормеРабочегоМеста = 1 Тогда
		
		Элементы.ГруппаПоложениеПанелиНапоминанийПравоПример.ЦветФона = WebЦвета.СветлоСерый;
		Элементы.ГруппаПоложениеПанелиНапоминанийЛевоПример.ЦветФона = ЦветаСтиля.ЦветВажногоМоиПароли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветТекстаПоУмолчанию(Знач ИмяЭлементаСтиля)
	
	ЭтотОбъект[ИмяЭлементаСтиля] = ЦветаСтиля[ИмяЭлементаСтиля];
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
