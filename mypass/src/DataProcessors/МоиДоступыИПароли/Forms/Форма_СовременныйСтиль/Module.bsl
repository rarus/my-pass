///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

//@skip-check typed-value-adding-to-untyped-collection
//@skip-check invocation-parameter-type-intersect
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// В режиме "Ребочее мето" скроем панель формы с заголовком
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "РежимЗапускаРабочееМесто", Константы.РежимЗапускаПриложенияРабочееМесто.Получить()) Тогда
		ЭтотОбъект.ОтображатьЗаголовок      = ЛОЖЬ;
		ЭтотОбъект.ОтображатьКнопкуЗакрытия = ЛОЖЬ;
	КонецЕсли;
	
	СохранятьСвернутыеГруппировки = Константы.СохранятьСвернутыеГруппировки.Получить();
	
	Если ПорядокГруппировок.Количество()=0 Тогда
		ПорядокГруппировок.Добавить(Перечисления.УровниДоступов.КлассДанных,,  Константы.ИспользоватьКлассыДанных.Получить());
		ПорядокГруппировок.Добавить(Перечисления.УровниДоступов.ВидДанных,,    Истина);
		ПорядокГруппировок.Добавить(Перечисления.УровниДоступов.ГруппаДанных,, Константы.ИспользоватьГруппыДанных.Получить());
	КонецЕсли;
	
	УстановитьЦвета();
	НастроитьФорму();
	
	ОбновитьНаСервере(Истина, Ложь);
	
	УстановитьОтборыСтрок();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	МинутыНовогоНапоминания = Дата('00010101') + Минута(ТекущаяДатаСеанса) * 60;
	ЧасыНовогоНапоминания   = Дата('00010101') + Час(ТекущаяДатаСеанса) * 3600;
	ДатаНовогоНапоминания   = ТекущаяДатаСеанса;
	
	МоиПаролиСервер.РегистрацияСобытия("МоиДоступыИПароли.Современный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьНапоминанияПользователя Тогда
		ПодключитьОбработчикОжидания("ОтобразитьНапоминанияНаКлиенте", 50, Ложь);
	КонецЕсли;
	
	МоиПаролиКлиент.ПодключитьОбработчикЗавершенияНапоминания(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СохранитьСвернутыеГруппировкиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыОповещенияНапоминанийПользователя" Тогда
		ОтобразитьНапоминанияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	МоиПаролиСервер.ПриЗагрузкеДанныхИзНастроекНаСервере_Альтернативная(ЭтотОбъект, Настройки);
	
	ВосстановитьСвернутыеГруппировки();
	
	СкрытьНедоступныеКнопки("Все", Истина, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборКлассификаторКнопкаНажатие(Элемент)
	
	Если Элементы.ГруппаОтборКлассификаторПодменю.Скрыта() Тогда
		Элементы.ГруппаОтборКлассификаторПодменю.Показать();
	Иначе
		Элементы.ГруппаОтборКлассификаторПодменю.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборГруппаДанныхКнопкаНажатие(Элемент)
	
	Если Элементы.ГруппаОтборГруппаДанныхПодменю.Скрыта() Тогда
		Элементы.ГруппаОтборГруппаДанныхПодменю.Показать();
	Иначе
		Элементы.ГруппаОтборГруппаДанныхПодменю.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДанныхКнопкаНажатие(Элемент)
	
	Если Элементы.ГруппаОтборВидДанныхПодменю.Скрыта() Тогда
		Элементы.ГруппаОтборВидДанныхПодменю.Показать();
	Иначе
		Элементы.ГруппаОтборВидДанныхПодменю.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАктуальностьКнопкаНажатие(Элемент)
	
	Если Элементы.ГруппаОтборАктуальностьПодменю.Скрыта() Тогда
		Элементы.ГруппаОтборАктуальностьПодменю.Показать();
	Иначе
		Элементы.ГруппаОтборАктуальностьПодменю.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

// Поле поиска начало выбора.
// 
// Параметры:
//  Элемент - ПолеФормы -  Элемент
//  ДанныеВыбора - СписокЗначений из Строка-  Данные выбора
//  ВыборДобавлением - Булево -  Выбор добавлением
//  СтандартнаяОбработка - Булево - Стандартная обработка
&НаКлиенте
Процедура ПолеПоискаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолеПоиска = "";
	
	ПодключитьОбработчикОжидания("Подключаемый_ПолеПоискаОчистка", 0.1, ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолеПоискаАвтоПодборНаСервере(Текст);
	
КонецПроцедуры

// Подключаемый классификатор нажатие.
// 
// Параметры:
//  Элемент - ПолеФормы - Элемент
&НаКлиенте
Процедура Подключаемый_КлассификаторНажатие(Элемент)
	
	ДанныеНажатие(Элемент);
	
КонецПроцедуры

// Подключаемый вид данных нажатие.
// 
// Параметры:
//  Элемент - ПолеФормы - Элемент
&НаКлиенте
Процедура Подключаемый_ВидДанныхНажатие(Элемент)
	
	ДанныеНажатие(Элемент);
	
КонецПроцедуры

// Подключаемый группа данных нажатие.
// 
// Параметры:
//  Элемент - ПолеФормы - Элемент
&НаКлиенте
Процедура Подключаемый_ГруппаДанныхНажатие(Элемент)
	
	ДанныеНажатие(Элемент);
	
КонецПроцедуры

// Подключаемый очистка поля поиска
// 
// Параметры:
//  Элемент - ПолеФормы - Элемент
&НаКлиенте
Процедура Подключаемый_ПолеПоискаОчистка()
	
	ОбновитьНаСервере();
	
КонецПроцедуры

// Текст нового напоминания начало выбора.
// 
// Параметры:
//  Элемент - ПолеФормы -  Элемент
//  ДанныеВыбора - СписокЗначений из Строка -  Данные выбора
//  ВыборДобавлением - Булево -  Выбор добавлением
//  СтандартнаяОбработка - Булево - Стандартная обработка
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура ТекстНовогоНапоминанияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	
	// Формируем описание обработчика перехвата закрытия формы.
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "РедактированиеПоляНапоминания");
	
	// Открываем диалог многострочного редактирования текста комментария.
	ПоказатьВводСтроки(ОписаниеОповещения, СокрЛП(ТекстНовогоНапоминания), НСтр("ru = 'Введите новое напоминание...'"), , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаНапоминанийПриИзменении(Элемент)
	
	ОтобразитьНапоминанияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаНапоминанийАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолеПоискаНапоминанияАвтоПодборНаСервере(Текст);
	
КонецПроцедуры

#КонецОбласти

//@skip-check module-structure-form-event-regions
#Область ОбработчикиСобытийЭлементовТаблицыФормыСоответствиеКоманд

&НаКлиенте
Процедура СоответствиеКомандИспользованиеКлассификаторПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные; // СтрокаТаблицыЗначений
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МоиПаролиКлиент.КлассификаторВыборНаКлиенте(ЭтотОбъект, ТекущиеДанные);
	
	СкрытьНедоступныеКнопки(1, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеКомандИспользованиеВидДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные; // СтрокаТаблицыЗначений
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МоиПаролиКлиент.ВидДанныхВыборНаКлиенте(ЭтотОбъект, ТекущиеДанные);
	
	СкрытьНедоступныеКнопки(2, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеКомандИспользованиеГруппаДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные; // СтрокаТаблицыЗначений
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МоиПаролиКлиент.ГруппаДанныхВыборНаКлиенте(ЭтотОбъект, ТекущиеДанные);
	
	СкрытьНедоступныеКнопки(3, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеКомандИспользованиеАктуальностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные; // СтрокаТаблицыЗначений
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МоиПаролиКлиент.СтатусДанныхВыборНаКлиенте(ЭтотОбъект, ТекущиеДанные);
	
	СкрытьНедоступныеКнопки(4, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Обновить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
	Элементы.ГруппаОтборВсеОтборыПодменю.Скрыть();
	Элементы.ГруппаОтборКлассификаторПодменю.Скрыть();
	Элементы.ГруппаОтборВидДанныхПодменю.Скрыть();
	Элементы.ГруппаОтборГруппаДанныхПодменю.Скрыть();
	Элементы.ГруппаОтборАктуальностьПодменю.Скрыть();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура Настройки(Команда)
	
	// оповещение
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "Настройки");
	
	// открываем форму настроек
	МоиПаролиКлиент.ОткрытьНастройки(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Добавить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура Добавить(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаИмя", Команда.Имя);
	
	НайденныеСтроки = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	
	СтруктураЗаполнения = Новый Структура;
	Если НайденныеСтроки.Количество() Тогда
		СтруктураЗаполнения.Вставить("ГруппаДанных",  НайденныеСтроки[0].ГруппаДанных);
		СтруктураЗаполнения.Вставить("ВидДанных",     НайденныеСтроки[0].ВидДанных);
		СтруктураЗаполнения.Вставить("КлассДанных", НайденныеСтроки[0].КлассДанных);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытиеФормыДоступа");
	
	ОткрытьФорму(
		"Документ.ЭкземплярДоступа.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Скопировать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура Скопировать(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаИмя", Команда.Имя);
	
	НайденныеСтроки = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	
	ПараметрыФормы = Новый Структура;
	Если НайденныеСтроки.Количество() Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", НайденныеСтроки[0].КомандаДанные);
	КонецЕсли;
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытиеФормыДоступа");
	
	ОткрытьФорму(
		"Документ.ЭкземплярДоступа.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Изменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура Изменить(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаИмя", Команда.Имя);
	
	НайденныеСтроки = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	
	ПараметрыФормы = Новый Структура;
	Если НайденныеСтроки.Количество() Тогда
		ПараметрыФормы.Вставить("Ключ", НайденныеСтроки[0].КомандаДанные);
	КонецЕсли;
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытиеФормыДоступа");
	
	ОткрытьФорму(
		"Документ.ЭкземплярДоступа.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Удалить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
//@skip-check dynamic-access-method-not-found
//@skip-check property-return-type
&НаКлиенте
Процедура Удалить(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаИмя", Команда.Имя);
	
	НайденныеСтроки = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Регистратор_ИзРегистраСведений", НайденныеСтроки[0].КомандаДанные);
		
		//@skip-check wrong-string-literal-content
		НайденныеСтроки = ЭтотОбъект["МоиПароли"].НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеСтроки.Количество() Тогда
			
			// Описание оповещения
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Событие", "ВопросУдаленияДоступа");
			СтруктураОповещения.Вставить("Документ", НайденныеСтроки[0].Регистратор_ИзРегистраСведений);
			СтруктураОповещения.Вставить("ВидДанных", НайденныеСтроки[0].ВидДанных_ИзРегистраСведений);
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, СтруктураОповещения);
			
			Если НайденныеСтроки[0].СтатусДанных_ИзРегистраСведений = ПредопределенноеЗначение("Перечисление.СтатусыДанных.Актуальный") Тогда
				ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), НайденныеСтроки[0].Регистратор_ИзРегистраСведений);
			Иначе
				ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), НайденныеСтроки[0].Регистратор_ИзРегистраСведений);
			КонецЕсли;
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Выгрузить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Скачать(Команда)
	
	// открываем форму настроек
	ОткрытьФорму(
		"Обработка.МоиДоступыИПароли.Форма.ФормаСкачивания", ,
		ЭтотОбъект,
		ЭтотОбъект, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "СкопироватьВБуферОбмена".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check module-unused-method
//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура СкопироватьВБуферОбмена(Команда)
	
	СкопироватьВБуферОбменаНаКлиенте(Команда.Имя);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Меню".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Меню(Команда)
	
	Если Элементы.ГруппаОтборВсеОтборыПодменю.Скрыта() Тогда
		Элементы.ГруппаОтборВсеОтборыПодменю.Показать();
	Иначе
		Элементы.ГруппаОтборВсеОтборыПодменю.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Информация".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Информация(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ОткрытьЗначение".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check module-unused-method
//@skip-check module-structure-form-event-regions
//@skip-check invocation-parameter-type-intersect
//@skip-check dynamic-access-method-not-found
&НаКлиенте
Процедура ОткрытьЗначениеСтроки(Команда)
	
	КомандаИмя = Команда.Имя;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаИмя", КомандаИмя);
	
	НайденныеСтроки = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Регистратор_ИзРегистраСведений", НайденныеСтроки[0].КомандаДанные);
		
		//@skip-check wrong-string-literal-content
		НайденныеСтрокиМоиПароли = ЭтотОбъект["МоиПароли"].НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеСтрокиМоиПароли.Количество() Тогда
			
			НайденнаяСтрока = НайденныеСтрокиМоиПароли[0];
			
			Значение = НайденнаяСтрока[НайденныеСтроки[0].ЗаголовокКоманды]; // Строка
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ЗапускПриложения");
			НачатьЗапускПриложения(ОписаниеОповещения, Строка(Значение));
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Открытие значения'"), , НСтр("ru = 'Переход по ссылке выполнен'"), БиблиотекаКартинок.МоиПаролиУспешно64);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ПрисоединенныеФайлы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check module-unused-method
//@skip-check module-structure-form-event-regions
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаИмя", Команда.Имя);
	
	НайденныеСтроки = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	
	ПараметрыФормы = Новый Структура;
	Если НайденныеСтроки.Количество() Тогда
		ПараметрыФормы.Вставить("Ключ",  НайденныеСтроки[0].КомандаДанные);
		ПараметрыФормы.Вставить("ПоказатьПрисоединенныеФайлы", Истина);
	КонецЕсли;
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытиеФормыДоступа");
	
	ОткрытьФорму(
		"Документ.ЭкземплярДоступа.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ДобавитьПрисоединенныеФайлы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check module-unused-method
//@skip-check module-structure-form-event-regions
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура ДобавитьПрисоединенныеФайлы(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаИмя", Команда.Имя);
	
	НайденныеСтроки = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	
	ПараметрыФормы = Новый Структура;
	Если НайденныеСтроки.Количество() Тогда
		ПараметрыФормы.Вставить("Ключ",  НайденныеСтроки[0].КомандаДанные);
		ПараметрыФормы.Вставить("ПоказатьПрисоединенныеФайлы", Истина);
		ПараметрыФормы.Вставить("ДобавитьПрисоединенныеФайлы", Истина);
	КонецЕсли;
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытиеФормыДоступа");
	
	ОткрытьФорму(
		"Документ.ЭкземплярДоступа.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "НапоминаниеИзменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check module-unused-method
//@skip-check module-structure-form-event-regions
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура НапоминаниеИзменить(Команда)
	
	НомерГруппы = СтрЗаменить(Команда.Имя, "НапоминаниеИзменить", ""); // Число
	НомерГруппы = Число(НомерГруппы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", НомерГруппы);
	НайденныеСтроки = МоиНапоминания.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() Тогда
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Пользователь", НайденнаяСтрока.Пользователь);
		СтруктураКлюча.Вставить("ВремяСобытия", НайденнаяСтрока.ВремяСобытия);
		СтруктураКлюча.Вставить("Источник",     НайденнаяСтрока.Источник);
		
		КлючЗаписи = СоздатьКлючЗаписиРегистраСведений(СтруктураКлюча);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ИзменениеНапоминания");
		
		ОткрытьФорму(
			"РегистрСведений.НапоминанияПользователя.ФормаЗаписи",
			ПараметрыФормы,
			ЭтотОбъект, , , ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "НапоминениеУдалить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check module-unused-method
//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура НапоминениеУдалить(Команда)
	
	НомерГруппы = СтрЗаменить(Команда.Имя, "НапоминаниеУдалить", ""); // Число
	НомерГруппы = Число(НомерГруппы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", НомерГруппы);
	НайденныеСтроки = МоиНапоминания.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() Тогда
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Пользователь", НайденнаяСтрока.Пользователь);
		СтруктураКлюча.Вставить("ВремяСобытия", НайденнаяСтрока.ВремяСобытия);
		СтруктураКлюча.Вставить("Источник",     НайденнаяСтрока.Источник);
		
		УдалитьЗаписьРегистраСведений(СтруктураКлюча);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Удаление напоминания'"), ,
			НСтр("ru = 'Выполнено успешно'"),
			БиблиотекаКартинок.МоиПаролиУспешно64);
		
		ОтобразитьНапоминанияНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ДобавитьНапоминание".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ДобавитьНапоминание(Команда)
	
	Если НЕ ЗначениеЗаполнено(ТекстНовогоНапоминания) Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Добавление напоминания'"), ,
			НСтр("ru = 'Отсутствует текст'"),
			БиблиотекаКартинок.МоиПаролиНеуспешно64);
		
		Возврат;
		
	КонецЕсли;
	
	ВремяСобытия = НачалоДня(ДатаНовогоНапоминания) + Час(ЧасыНовогоНапоминания) * 3600 + Минута(МинутыНовогоНапоминания) * 60;
	
	СтруктураКлюча = Новый Структура;
	СтруктураКлюча.Вставить("Текст", ТекстНовогоНапоминания);
	СтруктураКлюча.Вставить("ВремяСобытия", ВремяСобытия);
	СтруктураКлюча.Вставить("Источник", ИсточникНовогоНапоминания);
	
	ДобавитьНапоминаниеНаСервере(СтруктураКлюча);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Добавление напоминания'"), ,
		НСтр("ru = 'Выполнено успешно'"),
		БиблиотекаКартинок.МоиПаролиУспешно64);
	
	ОтобразитьНапоминанияНаКлиенте();
	
	ТекстНовогоНапоминания = "";
	
КонецПроцедуры

// Обработчик события нажатия кнопки "СортировкаНапоминанийПоВозрастанию".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СортировкаНапоминанийПоВозрастанию(Команда)
	
	СортировкаНапоминанийПоУбыванию = Ложь;
	ОтобразитьНапоминанияНаКлиенте();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "СортировкаНапоминанийПоУбыванию".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СортировкаНапоминанийПоУбыванию(Команда)
	
	СортировкаНапоминанийПоУбыванию = Истина;
	ОтобразитьНапоминанияНаКлиенте();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "УстановитьОтборПоДатеВНапоминаниях".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура УстановитьОтборПоДатеВНапоминаниях(Команда)
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "УстановкаОтбораПоДате");
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, ДоступныеДатыДляВыбораНапоминаний, Элементы.УстановитьОтборПоДатеВНапоминаниях);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "СнятьОтборПоДатеВНапоминаниях".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура СнятьОтборПоДатеВНапоминаниях(Команда)
	
	Элементы.УстановитьОтборПоДатеВНапоминаниях.Картинка = Новый Картинка;
	ОтборПоДатеВНапоминаниях = Дата('00010101');
	ОтобразитьНапоминанияНаКлиенте();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ОткрытьОПрограмме".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОткрытьОПрограмме(Команда)
	
	ОткрытьФорму("Обработка.МоиДоступыИПароли.Форма.ОПродукте", , , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ВернутьУдаленноеНапоминание".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВернутьУдаленноеНапоминание(Команда)
	
	МенеджерУдаленногоНапоминанияДляВозврата = МенеджерУдаленногоНапоминания[0].Значение;
	
	ВернутьУдаленноеНапоминаниеНаСервере(
		МенеджерУдаленногоНапоминанияДляВозврата.Описание,
		МенеджерУдаленногоНапоминанияДляВозврата.ВремяСобытия,
		МенеджерУдаленногоНапоминанияДляВозврата.Источник);
	
	МенеджерУдаленногоНапоминания.Удалить(0);
	
	// Напоминания
	ОтобразитьНапоминания();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "НеВозвращатьУдаленноеНапоминание".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура НеВозвращатьУдаленноеНапоминание(Команда)
	
	МенеджерУдаленногоНапоминания.Очистить();
	
	Элементы.ВернутьУдаленноеНапоминание.Видимость      = Ложь;
	Элементы.НеВозвращатьУдаленноеНапоминание.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаДобавленияНовойЗаписиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Добавить(ЭтотОбъект.Команды.Добавить);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
//@skip-check statement-type-change
//@skip-check property-return-type
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Если это было открытие формы настроек
	Если ДополнительныеПараметры = "Настройки" И РезультатОповещения <> Неопределено Тогда
		
		СохранятьСвернутыеГруппировки = МоиПаролиВызовСервера.ПолучитьЗначениеКонстантыПоИмени("СохранятьСвернутыеГруппировки");
		
		УстановитьЦвета();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатОповещения);
		ОбновитьНаСервере();
		НастроитьФорму();
		
		Если РезультатОповещения.ОткрытьДругойСтильИнтерфейса Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытьДругойСтильИнтерфейса");
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Закрыть рабочее место и открыть новое окно в стиле ""Классический""?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ОтобразитьНапоминанияНаКлиенте");
		Если ИспользоватьНапоминанияПользователя Тогда
			ПодключитьОбработчикОжидания("ОтобразитьНапоминанияНаКлиенте", 50, Ложь);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ОткрытиеФормыДоступа" Тогда
		
		ОбновитьНаСервере(Ложь);
		СкрытьНедоступныеКнопки("Все", Ложь);
		
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Событие = "ВопросУдаленияДоступа" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			УдалитьДокументДоступа(ДополнительныеПараметры.Документ);
		КонецЕсли;
		
		// ЖурналСобытий
		ЗаписатьСобытие(
			ПредопределенноеЗначение("Перечисление.ТипыСобытия.Редактирование"),
			ДополнительныеПараметры.Документ,
			ДополнительныеПараметры.ВидДанных);
		// Конец ЖурналСобытий
		
	ИначеЕсли ДополнительныеПараметры = "ОткрытьДругойСтильИнтерфейса" И РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФорму("Обработка.МоиДоступыИПароли.Форма.Форма_КлассическийСтиль");
		Закрыть();
		
	ИначеЕсли ДополнительныеПараметры = "ЗапускПриложения" Тогда
		
		// Зарезервировано
		
	ИначеЕсли ДополнительныеПараметры = "ИзменениеНапоминания" Тогда
		
		ОтобразитьНапоминанияНаКлиенте();
		
	ИначеЕсли ДополнительныеПараметры = "РедактированиеПоляНапоминания" Тогда
		
		Если НЕ РезультатОповещения = Неопределено Тогда
			ТекстНовогоНапоминания = СокрЛП(РезультатОповещения);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "УстановкаОтбораПоДате" Тогда
		
		Если НЕ РезультатОповещения = Неопределено Тогда
			Элементы.УстановитьОтборПоДатеВНапоминаниях.Картинка = БиблиотекаКартинок.МоиПаролиОтборПрименен;
			ОтборПоДатеВНапоминаниях = СокрЛП(РезультатОповещения.Значение);
			ОтобразитьНапоминанияНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииКлиент

//@skip-check dynamic-access-method-not-found
//@skip-check property-return-type
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Асинх Процедура СкопироватьВБуферОбменаНаКлиенте(КомандаИмя)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаИмя", КомандаИмя);
	
	НайденныеСтроки = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Регистратор_ИзРегистраСведений", НайденныеСтроки[0].КомандаДанные);
		
		//@skip-check wrong-string-literal-content
		НайденныеСтрокиМоиПароли = ЭтотОбъект["МоиПароли"].НайтиСтроки(СтруктураПоиска); // Массив
		Если НайденныеСтрокиМоиПароли.Количество() Тогда
			
			НайденнаяСтрока = НайденныеСтрокиМоиПароли[0];
			
			Если СтрНайти(КомандаИмя, "КопироватьВсе") Тогда
				
				МассивСтрокДляКопирования = Новый Массив; // Массив из Строка
				
				Для Каждого Колонка Из СоответствиеКолонок Цикл
					Если ЗначениеЗаполнено(НайденнаяСтрока[Колонка.ИмяКолонки])
						И НЕ (ТипЗнч(НайденнаяСтрока[Колонка.ИмяКолонки]) = Тип("Булево") И НЕ НайденнаяСтрока[Колонка.ИмяКолонки]) Тогда
							СтрокаДляКопирования = СтрШаблон(НСтр("ru = '%1: %2'"), Колонка.ЗаголовокКолонки, НайденнаяСтрока[Колонка.ИмяКолонки]);
							МассивСтрокДляКопирования.Добавить(СтрокаДляКопирования);
					КонецЕсли;
				КонецЦикла;
				
				Значение = СтрСоединить(МассивСтрокДляКопирования, Символы.ПС);
				РезультатКопирования = Ждать ПоместитьТекстВБуфераОбмена(Значение);
				
				Если РезультатКопирования Тогда
					ПоказатьОповещениеПользователя(НСтр("ru = 'Буфер обмена'"), , НСтр("ru = 'Значения скопированы'"), БиблиотекаКартинок.МоиПаролиУспешно64);
				Иначе
					ПоказатьОповещениеПользователя(НСтр("ru = 'Буфер обмена'"), , НСтр("ru = 'Не удалось скопировать значения'"), БиблиотекаКартинок.МоиПаролиНеуспешно64);
				КонецЕсли;
				
				// ЖурналСобытий
				ЗаписатьСобытие(
					ПредопределенноеЗначение("Перечисление.ТипыСобытия.Копирование"),
					НайденнаяСтрока.Регистратор_ИзРегистраСведений,
					НайденнаяСтрока.ВидДанных_ИзРегистраСведений,);
				// Конец ЖурналСобытий
				
			Иначе
				
				Значение = НайденнаяСтрока[НайденныеСтроки[0].ЗаголовокКоманды]; // Строка
				РезультатКопирования = Ждать ПоместитьТекстВБуфераОбмена(Строка(Значение));
				
				Если РезультатКопирования Тогда
					ПоказатьОповещениеПользователя(НСтр("ru = 'Буфер обмена'"), , НСтр("ru = 'Значение скопировано'"), БиблиотекаКартинок.МоиПаролиУспешно64);
				Иначе
					ПоказатьОповещениеПользователя(НСтр("ru = 'Буфер обмена'"), , НСтр("ru = 'Не удалось скопировать значение'"), БиблиотекаКартинок.МоиПаролиНеуспешно64);
				КонецЕсли;
				
				// ЖурналСобытий
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ИмяКолонки", НайденныеСтроки[0].ЗаголовокКоманды);
				НайденныеСтроки = СоответствиеКолонок.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() Тогда
					Свойство = НайденныеСтроки[0].Свойство;
				Иначе
					Свойство = Неопределено;
				КонецЕсли;
				
				ЗаписатьСобытие(
					ПредопределенноеЗначение("Перечисление.ТипыСобытия.Копирование"),
					НайденнаяСтрока.Регистратор_ИзРегистраСведений,
					НайденнаяСтрока.ВидДанных_ИзРегистраСведений,
					Свойство);
				// Конец ЖурналСобытий
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Асинх Функция ПоместитьТекстВБуфераОбмена(Текст)
	
	Если СредстваБуфераОбмена.ИспользованиеДоступно() Тогда
		ФорматДанных = СтандартныйФорматДанныхБуфераОбмена.Текст;
		Если Ждать СредстваБуфераОбмена.ПоддерживаетсяФорматДанных(ФорматДанных) Тогда
			ПомещаемыеДанные = Новый ЭлементБуфераОбмена(ФорматДанных, Текст);
			Возврат Ждать СредстваБуфераОбмена.ПоместитьДанныеАсинх(ПомещаемыеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДанныеНажатие(Элемент)
	
	МассивОбрабатываемыхГруппЭлементов = Новый Массив; // Массив из ГруппаФормы
	Для Каждого ГруппаЭлементов Из Элемент.Родитель.Родитель.ПодчиненныеЭлементы Цикл
		Если НЕ СтрНайти(ГруппаЭлементов.Имя, "Заголовок") Тогда
			МассивОбрабатываемыхГруппЭлементов.Добавить(ГруппаЭлементов);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ МассивОбрабатываемыхГруппЭлементов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	НовоеЗначениеВидимости = НЕ МассивОбрабатываемыхГруппЭлементов[0].Видимость;
	
	Для Каждого ГруппаЭлементов Из МассивОбрабатываемыхГруппЭлементов Цикл
		
		ГруппаЭлементов.Видимость = НовоеЗначениеВидимости;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяГруппы", Элемент.Родитель.Родитель.Имя);
		НайденныеСтроки = ГруппировкиЭлементовДанных.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			НайденныеСтроки[0].Свернута = НЕ НовоеЗначениеВидимости;
		Иначе
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИмяГруппы", ГруппаЭлементов.Имя);
			НайденныеСтроки = ГруппировкиЭлементовДанных.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() Тогда
				НайденныеСтроки[0].Свернута = НЕ НовоеЗначениеВидимости;
			Иначе
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ИмяГруппы", ГруппаЭлементов.Родитель.Имя);
				НайденныеСтроки = ГруппировкиЭлементовДанных.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() Тогда
					НайденныеСтроки[0].Свернута = НЕ НовоеЗначениеВидимости;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрНайти(Элемент.Имя, "ГруппаДанных") Тогда
		КоличествоСвернутыхЭлементов = МассивОбрабатываемыхГруппЭлементов[0].ПодчиненныеЭлементы[0].ПодчиненныеЭлементы.Количество() - 1;
	Иначе
		КоличествоСвернутыхЭлементов = МассивОбрабатываемыхГруппЭлементов.Количество();
	КонецЕсли;
	
	Если НовоеЗначениеВидимости Тогда
		Элементы[Элемент.Имя + "Количество"].Заголовок = "";
	Иначе
		Элементы[Элемент.Имя + "Количество"].Заголовок = СтрШаблон(НСтр("ru = 'свернуто %1'"), Формат(КоличествоСвернутыхЭлементов, "ЧН="));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСвернутыеГруппировкиНаКлиенте()
	
	СвернутыеГруппировки.Очистить();
	
	Если СохранятьСвернутыеГруппировки Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Свернута", Истина);
		
		Данные = ГруппировкиЭлементовДанных.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаДанных Из Данные Цикл
			ЗаполнитьЗначенияСвойств(СвернутыеГруппировки.Добавить(), СтрокаДанных);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Напоминания

&НаКлиенте
Процедура ОтобразитьНапоминанияНаКлиенте()
	
	ТекстНовогоНапоминания = Элементы.ТекстНовогоНапоминания.ТекстРедактирования;
	
	ОтобразитьНапоминания();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСервер

#Область СпискиВыбораОтборов

&НаСервере
Процедура ЗаполнитьСпискиВыбораОтборов(ИспользованиеДляНовых = Истина)
	
	МоиПаролиСервер.ЗаполнитьСоответствиеКлассификацииДанных(ЭтотОбъект);
	МоиПаролиСервер.ЗаполнитьСоответствияКомандОтбора_Альтернативная(ЭтотОбъект, ИспользованиеДляНовых);
	
	Элементы.СоответствиеКомандОтборКлассификаторМеню.Обновить();
	Элементы.СоответствиеКомандОтборВидДанныхМеню.Обновить();
	Элементы.СоответствиеКомандОтборГруппаДанныхМеню.Обновить();
	Элементы.СоответствиеКомандОтборАктуальностьМеню.Обновить();
	
	Элементы.СоответствиеКомандОтборКлассификатор.Обновить();
	Элементы.СоответствиеКомандОтборВидДанных.Обновить();
	Элементы.СоответствиеКомандОтборГруппаДанных.Обновить();
	Элементы.СоответствиеКомандОтборАктуальность.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СкрытьНедоступныеКнопки(Знач НомерГруппы, Знач ТребуетсяОбновить = Истина, Знач ОчищатьСохраненныеГруппировки = Истина)
	
	Если НомерГруппы = "Все" Тогда
		МоиПаролиСервер.СкрытьНедоступныеКомандыОтбора_Альтернативная(ЭтотОбъект, 1);
		МоиПаролиСервер.СкрытьНедоступныеКомандыОтбора_Альтернативная(ЭтотОбъект, 2);
	Иначе
		МоиПаролиСервер.СкрытьНедоступныеКомандыОтбора_Альтернативная(ЭтотОбъект, НомерГруппы);
	КонецЕсли;
	
	Если ТребуетсяОбновить Тогда
		ОбновитьНаСервере(Истина, ОчищатьСохраненныеГруппировки);
	КонецЕсли;
	
КонецПроцедуры

//@skip-check property-return-type
&НаСервере
Процедура УстановитьОтборыСтрок()
	
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура("Доступность, НомерГруппы", Истина, 1);
	Элементы.СоответствиеКомандОтборКлассификатор.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	Элементы.СоответствиеКомандОтборКлассификаторМеню.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура("Доступность, НомерГруппы", Истина, 2);
	Элементы.СоответствиеКомандОтборГруппаДанных.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	Элементы.СоответствиеКомандОтборГруппаДанныхМеню.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура("Доступность, НомерГруппы", Истина, 3);
	Элементы.СоответствиеКомандОтборВидДанных.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	Элементы.СоответствиеКомандОтборВидДанныхМеню.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура("Доступность, НомерГруппы", Истина, 4);
	Элементы.СоответствиеКомандОтборАктуальность.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	Элементы.СоответствиеКомандОтборАктуальностьМеню.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаВысотыГруппОтборов()
	
	МаксимальнаяВысотаСписка = 0;
	
	СтруктураОтбора = Новый Структура("Доступность, НомерГруппы", Истина, 1);
	ВысотаСписка = Мин(СоответствиеКоманд.НайтиСтроки(СтруктураОтбора).Количество(), 12);
	Элементы.СоответствиеКомандОтборКлассификатор.ВысотаВСтрокахТаблицы = ВысотаСписка;
	МаксимальнаяВысотаСписка = Макс(МаксимальнаяВысотаСписка, ВысотаСписка);
	
	СтруктураОтбора = Новый Структура("Доступность, НомерГруппы", Истина, 2);
	ВысотаСписка = Мин(СоответствиеКоманд.НайтиСтроки(СтруктураОтбора).Количество(), 12);
	Элементы.СоответствиеКомандОтборГруппаДанных.ВысотаВСтрокахТаблицы = ВысотаСписка;
	МаксимальнаяВысотаСписка = Макс(МаксимальнаяВысотаСписка, ВысотаСписка);
	
	СтруктураОтбора = Новый Структура("Доступность, НомерГруппы", Истина, 3);
	ВысотаСписка = Мин(СоответствиеКоманд.НайтиСтроки(СтруктураОтбора).Количество(), 12);
	Элементы.СоответствиеКомандОтборВидДанных.ВысотаВСтрокахТаблицы = ВысотаСписка;
	МаксимальнаяВысотаСписка = Макс(МаксимальнаяВысотаСписка, ВысотаСписка);
	
	СтруктураОтбора = Новый Структура("Доступность, НомерГруппы", Истина, 4);
	ВысотаСписка = Мин(СоответствиеКоманд.НайтиСтроки(СтруктураОтбора).Количество(), 12);
	Элементы.СоответствиеКомандОтборАктуальность.ВысотаВСтрокахТаблицы = ВысотаСписка;
	МаксимальнаяВысотаСписка = Макс(МаксимальнаяВысотаСписка, ВысотаСписка);
	
	Элементы.СоответствиеКомандОтборКлассификаторМеню.ВысотаВСтрокахТаблицы = МаксимальнаяВысотаСписка;
	Элементы.СоответствиеКомандОтборГруппаДанныхМеню.ВысотаВСтрокахТаблицы     = МаксимальнаяВысотаСписка;
	Элементы.СоответствиеКомандОтборВидДанныхМеню.ВысотаВСтрокахТаблицы     = МаксимальнаяВысотаСписка;
	Элементы.СоответствиеКомандОтборАктуальностьМеню.ВысотаВСтрокахТаблицы  = МаксимальнаяВысотаСписка;
	
КонецПроцедуры

#КонецОбласти

#Область ПостроениеИнтерфейса

&НаСервере
Процедура ОбновитьНаСервере(Знач ИспользованиеДляНовых = Истина, Знач ОчищатьСохраненныеГруппировки = Истина)
	
	Если ОчищатьСохраненныеГруппировки Тогда
		СохранитьСвернутыеГруппировки();
	КонецЕсли;
	
	УдалениеСозданныхДанныхФормы();
	
	Итератор = 1;
	
	ЗаполнитьСпискиВыбораОтборов(ИспользованиеДляНовых);
	
	РезультатЗапроса = ПакетыЗапросаДляФормированияДанныхФормы();
	
	ЗаполнитьТаблицуМоиПароли(РезультатЗапроса);
	СформироватьИнтерфейс(РезультатЗапроса);
	
	НастройкаВысотыГруппОтборов();
	
	ВосстановитьСвернутыеГруппировки();
	
	// Напоминания
	ОтобразитьНапоминания();
	
КонецПроцедуры

&НаСервере
Процедура УдалениеСозданныхДанныхФормы()
	
	Если Элементы.Найти("ГруппаСписокПаролейОбщая") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив; // Массив из Строка
	УдаляемыеРеквизиты.Добавить("МоиПароли");
	Для Каждого Элемент Из Элементы Цикл
		Если СтрНайти(Элемент.Имя, "ЗначениеСвойства")
			И НЕ СтрНайти(Элемент.Имя, "КонтекстноеМеню")
			И НЕ СтрНайти(Элемент.Имя, "РасширеннаяПодсказка") Тогда
				УдаляемыеРеквизиты.Добавить(Элемент.Имя);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НомерГруппы", 0);
	УдаляемыеКоманды = СоответствиеКоманд.НайтиСтроки(СтруктураОтбора);
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команды.Найти(УдаляемаяКоманда.КомандаИмя));
		СоответствиеКоманд.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НомерГруппы", 5);
	УдаляемыеКоманды = СоответствиеКоманд.НайтиСтроки(СтруктураОтбора);
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команды.Найти(УдаляемаяКоманда.КомандаИмя));
		СоответствиеКоманд.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НомерГруппы", 6);
	УдаляемыеКоманды = СоответствиеКоманд.НайтиСтроки(СтруктураОтбора);
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команды.Найти(УдаляемаяКоманда.КомандаИмя));
		СоответствиеКоманд.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НомерГруппы", 7);
	УдаляемыеКоманды = СоответствиеКоманд.НайтиСтроки(СтруктураОтбора);
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команды.Найти(УдаляемаяКоманда.КомандаИмя));
		СоответствиеКоманд.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	
	СоответствиеКолонок.Очистить();
	
	Элементы.Удалить(Элементы["ГруппаСписокПаролейОбщая"]);
	
КонецПроцедуры

&НаСервере
Функция ПакетыЗапросаДляФормированияДанныхФормы()
	
	Запрос = Новый Запрос;
	
	МассивОтборов = Новый Массив; // Массив из Строка
	МассивОтбораСвойстваВидаДанных = Новый Массив; // Массив из Строка
	
	Если ТекущийОтборВидДанных.Количество()
		И НЕ (ТекущийОтборВидДанных.Количество() = 0 И ТекущийОтборВидДанных[0].Значение = Справочники.ВидыДанных.ПустаяСсылка()) Тогда
			МассивОтборов.Добавить("ВидДанных В (&ВидДанных)");
			МассивОтбораСвойстваВидаДанных.Добавить("ВидыДанныхСвойстваВидаДанных.Ссылка В (&ВидДанных)");
	КонецЕсли;
	
	Если ТекущийОтборКлассДанных.Количество() Тогда
		МассивОтборов.Добавить("КлассДанных В (&КлассДанных)");
	КонецЕсли;
	
	Если ТекущийОтборГруппаДанных.Количество() Тогда
		МассивОтборов.Добавить("ГруппаДанных В (&ГруппаДанных)");
	КонецЕсли;
	
	Если ТекущийОтборСтатусДанных.Количество() Тогда
		МассивОтборов.Добавить("СтатусДанных В (&СтатусДанных)");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеПоиска) Тогда
		МассивОтборовПолеПоиска = Новый Массив; // Массив из Строка
		МассивПолеПоиска = СтрРазделить(ПолеПоиска, " ", Ложь);
		Для Счет = 0 По МассивПолеПоиска.Количество() - 1 Цикл
			МассивОтборовПолеПоиска.Добавить(СтрШаблон("(НРЕГ(ВидДанных.Наименование) ПОДОБНО &ПолеПоиска%1
				|ИЛИ НРЕГ(Комментарий) ПОДОБНО &ПолеПоиска%1
				|ИЛИ НРЕГ(ГруппаДанных.Наименование) ПОДОБНО &ПолеПоиска%1
				|ИЛИ НРЕГ(ВЫРАЗИТЬ(Значение КАК Строка(1024))) ПОДОБНО &ПолеПоиска%1)", Счет));
			Запрос.УстановитьПараметр(СтрШаблон("ПолеПоиска%1", Счет), "%" + НРег(МассивПолеПоиска[Счет]) + "%");
		КонецЦикла;
		МассивОтборов.Добавить(СтрШаблон("(%1)", СтрСоединить(МассивОтборовПолеПоиска, " И ")));
	КонецЕсли;
	
	Если НЕ МассивОтборов.Количество() Тогда
		МассивОтборов.Добавить("Истина");
	КонецЕсли;
	СтрокаОтбора = СтрСоединить(МассивОтборов, " И ");
	
	Если НЕ МассивОтбораСвойстваВидаДанных.Количество() Тогда
		МассивОтбораСвойстваВидаДанных.Добавить("Истина");
	КонецЕсли;
	СтрокаОтбораСвойстваВидаДанных = СтрСоединить(МассивОтбораСвойстваВидаДанных, " И ");
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МоиПароли.Регистратор КАК Регистратор_ИзРегистраСведений
		|ПОМЕСТИТЬ втОсновная
		|ИЗ
		|	РегистрСведений.МоиПароли КАК МоиПароли
		|ГДЕ
		|	&Отбор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор_ИзРегистраСведений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДанныхСвойстваВидаДанных.Свойство КАК Свойство,
		|	МАКСИМУМ(ВидыДанныхСвойстваВидаДанных.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ втПорядокСвойств
		|ИЗ
		|	Справочник.ВидыДанных.СвойстваВидаДанных КАК ВидыДанныхСвойстваВидаДанных
		|ГДЕ
		|	НЕ ВидыДанныхСвойстваВидаДанных.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыДанныхСвойстваВидаДанных.Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоступПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ДоступПрисоединенныеФайлы.НомерСтроки) КАК КоличествоФайлов
		|ПОМЕСТИТЬ втПрисоединенныеФайлы
		|ИЗ
		|	Документ.ЭкземплярДоступа.ПрисоединенныеФайлы КАК ДоступПрисоединенныеФайлы
		|ГДЕ
		|	ДоступПрисоединенныеФайлы.Ссылка В
		|			(ВЫБРАТЬ
		|				втОсновная.Регистратор_ИзРегистраСведений КАК Регистратор_ИзРегистраСведений
		|			ИЗ
		|				втОсновная КАК втОсновная)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступПрисоединенныеФайлы.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МоиПароли.ВидДанных КАК ВидДанных_ИзРегистраСведений,
		|	МоиПароли.ГруппаДанных КАК ГруппаДанных_ИзРегистраСведений,
		|	МоиПароли.КлассДанных КАК Классификатор_ИзРегистраСведений,
		|	МоиПароли.Регистратор КАК Регистратор_ИзРегистраСведений,
		|	втПрисоединенныеФайлы.КоличествоФайлов КАК Регистратор_КоличествоФайлов,
		|	МоиПароли.Свойство КАК Свойство,
		|	МоиПароли.Свойство.Представление КАК СвойствоПредставление,
		|	МоиПароли.Свойство.ТипЗначения КАК СвойствоТипЗначения,
		|	МоиПароли.Значение КАК Значение,
		|	МоиПароли.СтатусДанных КАК СтатусДанных_ИзРегистраСведений,
		|	МоиПароли.Комментарий КАК Комментарий_ИзРегистраСведений,
		|	МоиПароли.Свойство.Предопределенный КАК СвойствоПредопределенный,
		|	МоиПароли.Свойство.ИмяПредопределенныхДанных КАК СвойствоИмяПредопределенныхДанных,
		|	МоиПароли.ДатаИзменения КАК ДатаИзменения_ИзРегистраСведений,
		|	ЕСТЬNULL(ПорядокСвойств.НомерСтроки, 0) КАК Порядок
		|ИЗ
		|	РегистрСведений.МоиПароли КАК МоиПароли
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокСвойств КАК ПорядокСвойств
		|		ПО МоиПароли.Свойство = ПорядокСвойств.Свойство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
		|		ПО МоиПароли.Регистратор = втПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	МоиПароли.Регистратор В
		|			(ВЫБРАТЬ
		|				втОсновная.Регистратор_ИзРегистраСведений КАК Регистратор_ИзРегистраСведений
		|			ИЗ
		|				втОсновная КАК втОсновная)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ВидДанных_ИзРегистраСведений,
		|	ГруппаДанных_ИзРегистраСведений,
		|	ДатаИзменения_ИзРегистраСведений УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДанныхСвойстваВидаДанных.Ссылка КАК Ссылка,
		|	ВидыДанныхСвойстваВидаДанных.Свойство КАК Свойство,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.ТипЗначения КАК ТипЗначения,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.РежимПароля КАК РежимПароля,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.Открывать КАК Открывать,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.Предопределенный КАК Предопределенный,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ВидыДанныхСвойстваВидаДанных.Отображать КАК Отображать
		|ИЗ
		|	Справочник.ВидыДанных.СвойстваВидаДанных КАК ВидыДанныхСвойстваВидаДанных
		|ГДЕ
		|	&СвойстваВидаДанных
		|	И НЕ ВидыДанныхСвойстваВидаДанных.Свойство.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыДанныхСвойстваВидаДанных.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДанных.Ссылка КАК Ссылка,
		|	ВидыДанных.Цвет КАК Цвет
		|ИЗ
		|	Справочник.ВидыДанных КАК ВидыДанных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыДанных.Ссылка,
		|	ГруппыДанных.Цвет
		|ИЗ
		|	Справочник.ГруппыДанных КАК ГруппыДанных";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвойстваВидаДанных", СтрокаОтбораСвойстваВидаДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", СтрокаОтбора);
	
	Запрос.УстановитьПараметр("ВидДанных",     ТекущийОтборВидДанных);
	Запрос.УстановитьПараметр("КлассДанных", ТекущийОтборКлассДанных);
	Запрос.УстановитьПараметр("ГруппаДанных",  ТекущийОтборГруппаДанных);
	Запрос.УстановитьПараметр("СтатусДанных",  ТекущийОтборСтатусДанных);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

//@skip-check property-return-type
//@skip-check statement-type-change
//@skip-check invocation-parameter-type-intersect
&НаСервере
Процедура ЗаполнитьТаблицуМоиПароли(РезультатЗапроса, ДополнительныеПараметры = Неопределено)
	
	Выборка = РезультатЗапроса[3].Выбрать();
	
	МоиПароли = Новый ТаблицаЗначений;
	МоиПароли.Колонки.Добавить("СтатусДанных_ИзРегистраСведений",  Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДанных"),        НСтр("ru = 'Статус'"));
	МоиПароли.Колонки.Добавить("ВидДанных_ИзРегистраСведений",     Новый ОписаниеТипов("СправочникСсылка.ВидыДанных"),            НСтр("ru = 'Вид данных'"));
	МоиПароли.Колонки.Добавить("Классификатор_ИзРегистраСведений", Новый ОписаниеТипов("ПеречислениеСсылка.КлассыДанных"),         НСтр("ru = 'Класс данных'"));
	МоиПароли.Колонки.Добавить("ГруппаДанных_ИзРегистраСведений",  Новый ОписаниеТипов("СправочникСсылка.ГруппыДанных"),          НСтр("ru = 'Группа данных'"));
	МоиПароли.Колонки.Добавить("Комментарий_ИзРегистраСведений",   Новый ОписаниеТипов("Строка"),                                 НСтр("ru = 'Комментарий'"));
	МоиПароли.Колонки.Добавить("ДатаИзменения_ИзРегистраСведений", Новый ОписаниеТипов("Дата"),                                   НСтр("ru = 'Дата записи'"));
	МоиПароли.Колонки.Добавить("Регистратор_ИзРегистраСведений",   Новый ОписаниеТипов("ДокументСсылка.ЭкземплярДоступа"),                  НСтр("ru = 'Регистратор'"));
	МоиПароли.Колонки.Добавить("Регистратор_КоличествоФайлов",     Новый ОписаниеТипов("Число"),                                  НСтр("ru = 'Количество файлов'"));
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Свойство",     Выборка.Свойство);
		СтруктураПоиска.Вставить("ГруппаДанных", Выборка.ГруппаДанных_ИзРегистраСведений);
		СтруктураПоиска.Вставить("ВидДанных",    Выборка.ВидДанных_ИзРегистраСведений);
		НайденныеСтроки = СоответствиеКолонок.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			ИмяКолонки = НайденныеСтроки[0].ИмяКолонки;
		Иначе
			ИмяКолонки = "КолонкаМоиПароли" + Формат(Итератор, "ЧГ=0");
			МоиПароли.Колонки.Добавить(ИмяКолонки, Выборка.СвойствоТипЗначения, Выборка.СвойствоПредставление);
			НоваяСтрока = СоответствиеКолонок.Добавить();
			НоваяСтрока.ИмяКолонки       = ИмяКолонки;
			НоваяСтрока.Свойство         = Выборка.Свойство;
			НоваяСтрока.ГруппаДанных     = Выборка.ГруппаДанных_ИзРегистраСведений;
			НоваяСтрока.ВидДанных        = Выборка.ВидДанных_ИзРегистраСведений;
			НоваяСтрока.ЗаголовокКолонки = Выборка.СвойствоПредставление;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Регистратор_ИзРегистраСведений", Выборка.Регистратор_ИзРегистраСведений);
		НайденныеСтрокиРегистратора = МоиПароли.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтрокиРегистратора.Количество() Тогда
			НоваяСтрока = НайденныеСтрокиРегистратора[0];
		Иначе
			НоваяСтрока = МоиПароли.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,
				"ВидДанных_ИзРегистраСведений, ДатаИзменения_ИзРегистраСведений, Комментарий_ИзРегистраСведений,
				|Регистратор_ИзРегистраСведений, СтатусДанных_ИзРегистраСведений, ГруппаДанных_ИзРегистраСведений,
				|Классификатор_ИзРегистраСведений, Регистратор_КоличествоФайлов");
		КонецЕсли;
		
		НоваяСтрока[ИмяКолонки] = Выборка.Значение;
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	// Описание таблицы значений как реквизита
	МассивТипа = Новый Массив; // Массив из ОписаниеТипов
	МассивТипа.Добавить(Тип("ТаблицаЗначений"));
	
	// Добавление ТаблицыЗначений в массив реквизитов
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипа);
	МассивРеквизитовФормы = Новый Массив; // Массив из РеквизитФормы
	МассивРеквизитовФормы.Добавить(Новый РеквизитФормы("МоиПароли", ОписаниеТипа, "", НСтр("ru = 'Мои пароли'")));
	
	// Добавление в массив реквизитов колонок таблицы значений
	Для Каждого Колонка Из МоиПароли.Колонки Цикл
		НовыйРеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "МоиПароли");
		НовыйРеквизитФормы.СохраняемыеДанные = Истина;
		МассивРеквизитовФормы.Добавить(НовыйРеквизитФормы);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитовФормы);
	
	//@skip-check wrong-string-literal-content
	ЗначениеВРеквизитФормы(МоиПароли, "МоиПароли");
	
КонецПроцедуры

//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаСервере
Процедура СформироватьИнтерфейс(РезультатЗапроса, ДополнительныеПараметры = Неопределено)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	// Применим функциональные опции к настройкам группировок
	ИсправитьНастройкуГруппировок();
	
	// Формирование реквизитов формы
	ГруппаСписокПаролейОбщая = Элементы.Добавить("ГруппаСписокПаролейОбщая", Тип("ГруппаФормы"), Элементы.СтраницаСписокПаролей);
	ГруппаСписокПаролейОбщая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСписокПаролейОбщая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСписокПаролейОбщая.РастягиватьПоГоризонтали = Истина;
	ГруппаСписокПаролейОбщая.ОтображатьЗаголовок = Ложь;
	
	СоответствиеРеквизитовИЭлементов = Новый ТаблицаЗначений;
	СоответствиеРеквизитовИЭлементов.Колонки.Добавить("Реквизит");
	СоответствиеРеквизитовИЭлементов.Колонки.Добавить("Элемент");
	СоответствиеРеквизитовИЭлементов.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка"));
	СоответствиеРеквизитовИЭлементов.Колонки.Добавить("Значение");
	
	ИндексЗначенияПеречисления = Перечисления.УровниДоступов.Индекс(ПорядокГруппировок[0].Значение);
	ИмяКолонки1 = Метаданные.Перечисления.УровниДоступов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	МассивУровень1 = СоответствиеКомандОтбора.Выгрузить(, ИмяКолонки1).ВыгрузитьКолонку(ИмяКолонки1);
	МассивУровень1 = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивУровень1);
	
	Для Каждого Уровень1 Из МассивУровень1 Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидДанных",    Справочники.ВидыДанных.ПустаяСсылка());
		СтруктураОтбора.Вставить("ГруппаДанных", Справочники.ГруппыДанных.ПустаяСсылка());
		СтруктураОтбора.Вставить("КлассДанных",  Перечисления.КлассыДанных.ПустаяСсылка());
		
		СтруктураОтбора.Вставить(ИмяКолонки1, Уровень1);
		
		ДополнительныеПараметры.Вставить("СтруктураОтбора", СтруктураОтбора);
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("Уровень1",                         Уровень1);
		ПараметрыОперации.Вставить("ГруппаСписокПаролейОбщая",         ГруппаСписокПаролейОбщая);
		ПараметрыОперации.Вставить("РезультатЗапроса",                 РезультатЗапроса);
		ПараметрыОперации.Вставить("СоответствиеРеквизитовИЭлементов", СоответствиеРеквизитовИЭлементов);
		
		ДобавитьЭлементыФормыУровень1(ПараметрыОперации, ДополнительныеПараметры);
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	// Создаем подготовленные реквизиты
	МассивРеквизитовФормы = СоответствиеРеквизитовИЭлементов.ВыгрузитьКолонку("Реквизит");
	ИзменитьРеквизиты(МассивРеквизитовФормы);
	
	// Заполняем пути в элементах формы
	Для Каждого СоответствиеРеквизитаИЭлемента Из СоответствиеРеквизитовИЭлементов Цикл
		СоответствиеРеквизитаИЭлемента.Элемент.ПутьКДанным = СоответствиеРеквизитаИЭлемента.ИмяПоля;
		ЭтотОбъект[СоответствиеРеквизитаИЭлемента.ИмяПоля] = СоответствиеРеквизитаИЭлемента.Значение;
	КонецЦикла;
	
	Элементы.СоответствиеКомандОтборКлассификаторМеню.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКлассыДанных");
	Элементы.ГруппаОтборКлассификатор                .Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКлассыДанных");
	
	Элементы.СоответствиеКомандОтборГруппаДанныхМеню .Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДанных");
	Элементы.ГруппаОтборГруппаДанных                 .Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДанных");
	
	// Отобразим или скроем подсказку добавления первой записи
	Если МассивУровень1.Количество()=0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДобавитьПервый;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПаролей;
	КонецЕсли;
	
КонецПроцедуры

//@skip-check statement-type-change
//@skip-check invocation-parameter-type-intersect
&НаСервере
Процедура ДобавитьЭлементыФормыУровень1(ПараметрыОперации, ДополнительныеПараметры = Неопределено)
	
	Уровень1                         = ПараметрыОперации.Уровень1;
	ГруппаСписокПаролейОбщая         = ПараметрыОперации.ГруппаСписокПаролейОбщая;
	РезультатЗапроса                 = ПараметрыОперации.РезультатЗапроса;
	СоответствиеРеквизитовИЭлементов = ПараметрыОперации.СоответствиеРеквизитовИЭлементов;
	
	Если ПорядокГруппировок[0].Пометка Тогда
		
		ГруппаУровень1 = Элементы.Добавить("ГруппаКлассификатор" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаСписокПаролейОбщая);
		ГруппаУровень1.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаУровень1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаУровень1.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаУровень1.РастягиватьПоГоризонтали = Истина;
		ГруппаУровень1.ОтображатьЗаголовок = Ложь;
		
		ГруппаЗаголовокКлассификатор = Элементы.Добавить("ГруппаЗаголовокКлассификатор" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаУровень1);
		ГруппаЗаголовокКлассификатор.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаголовокКлассификатор.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗаголовокКлассификатор.РастягиватьПоГоризонтали = Истина;
		ГруппаЗаголовокКлассификатор.ОтображатьЗаголовок = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("ДекорацияКлассификатор" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаЗаголовокКлассификатор);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = Уровень1;
		НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH1;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.ЦветТекста = WebЦвета.Черный;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		
		НовыйЭлемент.УстановитьДействие("Нажатие","Подключаемый_КлассификаторНажатие");
		
		// Команда
		НоваяКоманда = Команды.Добавить("КлассификаторДобавить" + Формат(Итератор, "ЧГ=0"));
		НоваяКоманда.Действие = "Добавить";
		НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиДобавить;
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка = НСтр("ru = 'Добавить экземпляр доступа'");
		// Соответствие команды и данных
		НовоеСоответствие = СоответствиеКоманд.Добавить();
		НовоеСоответствие.КомандаИмя    = НоваяКоманда.Имя;
		НовоеСоответствие.КомандаДанные = Уровень1;
		НовоеСоответствие.ГруппаДанных  = ДополнительныеПараметры.СтруктураОтбора.ГруппаДанных;
		НовоеСоответствие.ВидДанных     = ДополнительныеПараметры.СтруктураОтбора.ВидДанных;
		НовоеСоответствие.КлассДанных = ДополнительныеПараметры.СтруктураОтбора.КлассДанных;
		
		НовыйЭлемент = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаЗаголовокКлассификатор);
		НовыйЭлемент.ИмяКоманды = НовоеСоответствие.КомандаИмя;
		НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйЭлемент.Ширина = 4;
		
		НовыйЭлемент = Элементы.Добавить("ДекорацияКлассификатор" + Формат(Итератор, "ЧГ=0") + "Количество", Тип("ДекорацияФормы"), ГруппаЗаголовокКлассификатор);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = "";
		НовыйЭлемент.ЦветТекста = WebЦвета.Серый;
		
	Иначе
		
		ГруппаУровень1 = ГруппаСписокПаролейОбщая;
		
	КонецЕсли;
	
	НоваяГруппировка = ГруппировкиЭлементовДанных.Добавить();
	НоваяГруппировка.ИмяГруппы = ГруппаУровень1.Имя;
	НоваяГруппировка.Данные = Уровень1;
	
	ИндексЗначенияПеречисления = Перечисления.УровниДоступов.Индекс(ПорядокГруппировок[1].Значение);
	ИмяКолонки2 = Метаданные.Перечисления.УровниДоступов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	СтруктураОтбора = Новый Структура;
	Для Каждого Свойство Из ДополнительныеПараметры.СтруктураОтбора Цикл
		Если ЗначениеЗаполнено(Свойство.Значение) Тогда
			СтруктураОтбора.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЕсли;
	КонецЦикла;
	
	МассивУровень2 = СоответствиеКомандОтбора.Выгрузить(СтруктураОтбора).ВыгрузитьКолонку(ИмяКолонки2);
	МассивУровень2 = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивУровень2);
	
	Для Каждого Уровень2 Из МассивУровень2 Цикл
		
		ДополнительныеПараметры.СтруктураОтбора.Вставить(ИмяКолонки2, Уровень2);
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("Уровень1",                         Уровень1);
		ПараметрыОперации.Вставить("ГруппаУровень1",                   ГруппаУровень1);
		ПараметрыОперации.Вставить("Уровень2",                         Уровень2);
		ПараметрыОперации.Вставить("ГруппаСписокПаролейОбщая",         ГруппаСписокПаролейОбщая);
		ПараметрыОперации.Вставить("РезультатЗапроса",                 РезультатЗапроса);
		ПараметрыОперации.Вставить("СоответствиеРеквизитовИЭлементов", СоответствиеРеквизитовИЭлементов);
		
		ДобавитьЭлементыФормыУровень2(ПараметрыОперации, ДополнительныеПараметры);
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	ДополнительныеПараметры.СтруктураОтбора[ИмяКолонки2] = Неопределено;
	
	Если ПорядокГруппировок[0].Пометка И ГруппаУровень1.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.Удалить(ГруппаУровень1);
	КонецЕсли;
	
КонецПроцедуры

//@skip-check statement-type-change
//@skip-check invocation-parameter-type-intersect
&НаСервере
Процедура ДобавитьЭлементыФормыУровень2(ПараметрыОперации, ДополнительныеПараметры = Неопределено)
	
	Уровень1                         = ПараметрыОперации.Уровень1;
	ГруппаУровень1                   = ПараметрыОперации.ГруппаУровень1;
	Уровень2                         = ПараметрыОперации.Уровень2;
	РезультатЗапроса                 = ПараметрыОперации.РезультатЗапроса;
	СоответствиеРеквизитовИЭлементов = ПараметрыОперации.СоответствиеРеквизитовИЭлементов;
	
	Если ПорядокГруппировок[1].Пометка Тогда
		
		ГруппаУровень2 = Элементы.Добавить("ГруппаВидДанных" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаУровень1);
		ГруппаУровень2.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаУровень2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаУровень2.РастягиватьПоГоризонтали = Истина;
		ГруппаУровень2.ОтображатьЗаголовок = Ложь;
		
		ГруппаЗаголовокВидДанных = Элементы.Добавить("ГруппаЗаголовокВидДанных" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаУровень2);
		ГруппаЗаголовокВидДанных.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаголовокВидДанных.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗаголовокВидДанных.РастягиватьПоГоризонтали = Истина;
		ГруппаЗаголовокВидДанных.ОтображатьЗаголовок = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("ДекорацияВидДанных" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаЗаголовокВидДанных);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = Уровень2;
		НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH2;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.ЦветТекста = WebЦвета.Черный;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		
		НовыйЭлемент.УстановитьДействие("Нажатие","Подключаемый_ВидДанныхНажатие");
		
		// Команда
		НоваяКоманда = Команды.Добавить("ВидДанныхДобавить" + Формат(Итератор, "ЧГ=0"));
		НоваяКоманда.Действие = "Добавить";
		НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиДобавить;
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка = НСтр("ru = 'Добавить экземпляр доступа'");
		// Соответствие команды и данных
		НовоеСоответствие = СоответствиеКоманд.Добавить();
		НовоеСоответствие.КомандаИмя    = НоваяКоманда.Имя;
		НовоеСоответствие.КомандаДанные = Уровень2;
		НовоеСоответствие.ГруппаДанных  = ДополнительныеПараметры.СтруктураОтбора.ГруппаДанных;
		НовоеСоответствие.ВидДанных     = ДополнительныеПараметры.СтруктураОтбора.ВидДанных;
		НовоеСоответствие.КлассДанных = ДополнительныеПараметры.СтруктураОтбора.КлассДанных;
		
		НовыйЭлемент = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаЗаголовокВидДанных);
		НовыйЭлемент.ИмяКоманды = НовоеСоответствие.КомандаИмя;
		НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйЭлемент.Ширина = 4;
		
		НовыйЭлемент = Элементы.Добавить("ДекорацияВидДанных" + Формат(Итератор, "ЧГ=0") + "Количество", Тип("ДекорацияФормы"), ГруппаЗаголовокВидДанных);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = "";
		НовыйЭлемент.ЦветТекста = WebЦвета.Серый;
		
	Иначе
		
		ГруппаУровень2 = ГруппаУровень1;
		
	КонецЕсли;
	
	НоваяГруппировка = ГруппировкиЭлементовДанных.Добавить();
	НоваяГруппировка.ИмяГруппы = ГруппаУровень2.Имя;
	НоваяГруппировка.Данные = Уровень1;
	НоваяГруппировка.ДанныеУровень2 = Уровень2;
	
	ИндексЗначенияПеречисления = Перечисления.УровниДоступов.Индекс(ПорядокГруппировок[2].Значение);
	ИмяКолонки3 = Метаданные.Перечисления.УровниДоступов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	СтруктураОтбора = Новый Структура;
	Для Каждого Свойство Из ДополнительныеПараметры.СтруктураОтбора Цикл
		Если ЗначениеЗаполнено(Свойство.Значение) Тогда
			СтруктураОтбора.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЕсли;
	КонецЦикла;
	
	МассивУровень3 = СоответствиеКомандОтбора.Выгрузить(СтруктураОтбора).ВыгрузитьКолонку(ИмяКолонки3);
	МассивУровень3 = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивУровень3);
	
	Для Каждого Уровень3 Из МассивУровень3 Цикл
		
		ДополнительныеПараметры.СтруктураОтбора.Вставить(ИмяКолонки3, Уровень3);
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("Уровень1",                         Уровень1);
		ПараметрыОперации.Вставить("ГруппаУровень2",                   ГруппаУровень2);
		ПараметрыОперации.Вставить("Уровень3",                         Уровень3);
		ПараметрыОперации.Вставить("Уровень2",                         Уровень2);
		ПараметрыОперации.Вставить("РезультатЗапроса",                 РезультатЗапроса);
		ПараметрыОперации.Вставить("СоответствиеРеквизитовИЭлементов", СоответствиеРеквизитовИЭлементов);
		
		ДобавитьЭлементыФормыУровень3(ПараметрыОперации, ДополнительныеПараметры);
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	ДополнительныеПараметры.СтруктураОтбора[ИмяКолонки3] = Неопределено;
	
	Если ПорядокГруппировок[1].Пометка И ГруппаУровень2.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.Удалить(ГруппаУровень2);
	КонецЕсли;
	
КонецПроцедуры

//@skip-check invocation-parameter-type-intersect
//@skip-check dynamic-access-method-not-found
//@skip-check statement-type-change
//@skip-check property-return-type
&НаСервере
Процедура ДобавитьЭлементыФормыУровень3(ПараметрыОперации, ДополнительныеПараметры = Неопределено)
	
	Уровень1                         = ПараметрыОперации.Уровень1;
	ГруппаУровень2                   = ПараметрыОперации.ГруппаУровень2;
	Уровень3                         = ПараметрыОперации.Уровень3;
	Уровень2                         = ПараметрыОперации.Уровень2;
	РезультатЗапроса                 = ПараметрыОперации.РезультатЗапроса;
	СоответствиеРеквизитовИЭлементов = ПараметрыОперации.СоответствиеРеквизитовИЭлементов;
	
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("Классификатор_ИзРегистраСведений", ДополнительныеПараметры.СтруктураОтбора.КлассДанных);
	СтруктураПроверки.Вставить("ГруппаДанных_ИзРегистраСведений", ДополнительныеПараметры.СтруктураОтбора.ГруппаДанных);
	СтруктураПроверки.Вставить("ВидДанных_ИзРегистраСведений", ДополнительныеПараметры.СтруктураОтбора.ВидДанных);
	
	//@skip-check wrong-string-literal-content
	Если НЕ ЭтотОбъект["МоиПароли"].НайтиСтроки(СтруктураПроверки).Количество() Тогда
		Итератор = Итератор + 1;
		Возврат;
	КонецЕсли;
	
	СвойстваВидаДанных = РезультатЗапроса[4].Выбрать();
	
	Если ПорядокГруппировок[2].Пометка Тогда
		
		ГруппаГруппаДанных = Элементы.Добавить("ГруппаГруппаДанных" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаУровень2);
		ГруппаГруппаДанных.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаГруппаДанных.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаГруппаДанных.РастягиватьПоГоризонтали = Истина;
		ГруппаГруппаДанных.ОтображатьЗаголовок = Ложь;
		
		ГруппаЗаголовокГруппаДанных = Элементы.Добавить("ГруппаЗаголовокГруппаДанных" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаГруппаДанных);
		ГруппаЗаголовокГруппаДанных.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаголовокГруппаДанных.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗаголовокГруппаДанных.РастягиватьПоГоризонтали = Истина;
		ГруппаЗаголовокГруппаДанных.ОтображатьЗаголовок = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("ДекорацияГруппаДанных" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаЗаголовокГруппаДанных);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = Уровень3;
		НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH3;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.ЦветТекста = WebЦвета.Черный;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		
		НовыйЭлемент.УстановитьДействие("Нажатие","Подключаемый_ГруппаДанныхНажатие");
		
		// Команда
		НоваяКоманда = Команды.Добавить("ГруппаДанныхДобавить" + Формат(Итератор, "ЧГ=0"));
		НоваяКоманда.Действие = "Добавить";
		НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиДобавить;
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка = НСтр("ru = 'Добавить экземпляр доступа'");
		// Соответствие команды и данных
		НовоеСоответствие = СоответствиеКоманд.Добавить();
		НовоеСоответствие.КомандаИмя    = НоваяКоманда.Имя;
		НовоеСоответствие.КомандаДанные = Уровень3;
		НовоеСоответствие.ГруппаДанных  = ДополнительныеПараметры.СтруктураОтбора.ГруппаДанных;
		НовоеСоответствие.ВидДанных     = ДополнительныеПараметры.СтруктураОтбора.ВидДанных;
		НовоеСоответствие.КлассДанных = ДополнительныеПараметры.СтруктураОтбора.КлассДанных;
		
		НовыйЭлемент = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаЗаголовокГруппаДанных);
		НовыйЭлемент.ИмяКоманды = НовоеСоответствие.КомандаИмя;
		НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйЭлемент.Ширина = 4;
		
		НовыйЭлемент = Элементы.Добавить("ДекорацияГруппаДанных" + Формат(Итератор, "ЧГ=0") + "Количество", Тип("ДекорацияФормы"), ГруппаЗаголовокГруппаДанных);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = "";
		НовыйЭлемент.ЦветТекста = WebЦвета.Серый;
		
	Иначе
		
		ГруппаГруппаДанных = ГруппаУровень2;
		
	КонецЕсли;
	
	// Раскраска групп
	ИндексЗначенияПеречисления = Перечисления.КлассыДанных.Индекс(ДополнительныеПараметры.СтруктураОтбора.КлассДанных);
	Суффикс = Метаданные.Перечисления.КлассыДанных.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	ВыборкаЦветовОбъектов = РезультатЗапроса[5].Выбрать();
	
	Уровень = ДополнительныеПараметры.СтруктураОтбора[СтрЗаменить(ПорядокГруппировок[0].Значение, " ", "")]; // Число
	ВыборкаЦветовОбъектов.Сбросить();
	Если ВыборкаЦветовОбъектов.НайтиСледующий(Уровень, "Ссылка") Тогда
		Цвет = ВыборкаЦветовОбъектов.Цвет.Получить(); // Цвет
		Если ЗначениеЗаполнено(Цвет) Тогда
			ГруппаГруппаДанных.ЦветФона = Цвет;
		Иначе
			ГруппаГруппаДанных.ЦветФона = ЭтотОбъект["ЦветТекста" + Суффикс + Уровень.Метаданные().Имя];
		КонецЕсли;
	Иначе
		ГруппаГруппаДанных.ЦветФона = ЭтотОбъект["ЦветТекста" + Суффикс + Уровень.Метаданные().Имя];
	КонецЕсли;
	
	Если ПорядокГруппировок[1].Пометка Тогда
		ГруппаГруппаДанных.Родитель.ЦветФона = ГруппаГруппаДанных.ЦветФона;
		Уровень = ДополнительныеПараметры.СтруктураОтбора[СтрЗаменить(ПорядокГруппировок[1].Значение, " ", "")];
		ВыборкаЦветовОбъектов.Сбросить();
		Если ВыборкаЦветовОбъектов.НайтиСледующий(Уровень, "Ссылка") Тогда
			Цвет = ВыборкаЦветовОбъектов.Цвет.Получить();
			Если ЗначениеЗаполнено(Цвет) Тогда
				ГруппаГруппаДанных.ЦветФона = Цвет;
			Иначе
				ГруппаГруппаДанных.ЦветФона = ЭтотОбъект["ЦветТекста" + Суффикс + Уровень.Метаданные().Имя];
			КонецЕсли;
		Иначе
			ГруппаГруппаДанных.ЦветФона = ЭтотОбъект["ЦветТекста" + Суффикс + Уровень.Метаданные().Имя];
		КонецЕсли;
	КонецЕсли;
	
	Если ПорядокГруппировок[2].Пометка Тогда
		ГруппаГруппаДанных.Родитель.Родитель.ЦветФона = ГруппаГруппаДанных.Родитель.ЦветФона;
		ГруппаГруппаДанных.Родитель.ЦветФона = ГруппаГруппаДанных.ЦветФона;
		Уровень = ДополнительныеПараметры.СтруктураОтбора[СтрЗаменить(ПорядокГруппировок[2].Значение, " ", "")];
		ВыборкаЦветовОбъектов.Сбросить();
		Если ВыборкаЦветовОбъектов.НайтиСледующий(Уровень, "Ссылка") Тогда
			Цвет = ВыборкаЦветовОбъектов.Цвет.Получить();
			Если ЗначениеЗаполнено(Цвет) Тогда
				ГруппаГруппаДанных.ЦветФона = Цвет;
			Иначе
				ГруппаГруппаДанных.ЦветФона = ЭтотОбъект["ЦветТекста" + Суффикс + Уровень.Метаданные().Имя];
			КонецЕсли;
		Иначе
			ГруппаГруппаДанных.ЦветФона = ЭтотОбъект["ЦветТекста" + Суффикс + Уровень.Метаданные().Имя];
		КонецЕсли;
	КонецЕсли;
	
	ГруппаДеталиГруппаДанных = Элементы.Добавить("ГруппаДеталиГруппаДанных" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаГруппаДанных);
	ГруппаДеталиГруппаДанных.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДеталиГруппаДанных.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаДеталиГруппаДанных.РастягиватьПоГоризонтали = Истина;
	ГруппаДеталиГруппаДанных.ОтображатьЗаголовок = Ложь;
	ГруппаДеталиГруппаДанных.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
	
	НоваяГруппировка = ГруппировкиЭлементовДанных.Добавить();
	НоваяГруппировка.ИмяГруппы = ГруппаДеталиГруппаДанных.Имя;
	НоваяГруппировка.Данные = Уровень1;
	НоваяГруппировка.ДанныеУровень2 = Уровень2;
	НоваяГруппировка.ДанныеУровень3 = Уровень3;
	
	СвойстваВидаДанных.Сбросить();
	Пока СвойстваВидаДанных.НайтиСледующий(ДополнительныеПараметры.СтруктураОтбора.ВидДанных, "Ссылка") Цикл
		
		Если НЕ СвойстваВидаДанных.Отображать Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("КлассДанных",                    ДополнительныеПараметры.СтруктураОтбора.КлассДанных);
		ПараметрыОперации.Вставить("ГруппаДанных",                     ДополнительныеПараметры.СтруктураОтбора.ГруппаДанных);
		ПараметрыОперации.Вставить("ВидДанных",                        ДополнительныеПараметры.СтруктураОтбора.ВидДанных);
		ПараметрыОперации.Вставить("ГруппаДеталиГруппаДанных",         ГруппаДеталиГруппаДанных);
		ПараметрыОперации.Вставить("СвойстваВидаДанных",               СвойстваВидаДанных);
		ПараметрыОперации.Вставить("СоответствиеРеквизитовИЭлементов", СоответствиеРеквизитовИЭлементов);
		
		ДобавитьЭлементыФормыСвойствоДанных(ПараметрыОперации, ДополнительныеПараметры);
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("КлассДанных",            ДополнительныеПараметры.СтруктураОтбора.КлассДанных);
	ПараметрыОперации.Вставить("ГруппаДанных",             ДополнительныеПараметры.СтруктураОтбора.ГруппаДанных);
	ПараметрыОперации.Вставить("ВидДанных",                ДополнительныеПараметры.СтруктураОтбора.ВидДанных);
	ПараметрыОперации.Вставить("ГруппаДеталиГруппаДанных", ГруппаДеталиГруппаДанных);
	
	ДобавитьЭлементыФормыСлужебнойИнформацииДанных(ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

//@skip-check statement-type-change
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДобавитьЭлементыФормыСвойствоДанных(ПараметрыОперации, ДополнительныеПараметры = Неопределено)
	
	Классификатор                    = ПараметрыОперации.КлассДанных;
	ГруппаДанных                     = ПараметрыОперации.ГруппаДанных;
	ВидДанных                        = ПараметрыОперации.ВидДанных;
	ГруппаДеталиГруппаДанных         = ПараметрыОперации.ГруппаДеталиГруппаДанных;
	СвойстваВидаДанных               = ПараметрыОперации.СвойстваВидаДанных;
	СоответствиеРеквизитовИЭлементов = ПараметрыОперации.СоответствиеРеквизитовИЭлементов;
	
	ГруппаСвойствоДанных = Элементы.Добавить("ГруппаСвойствоДанных" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаДеталиГруппаДанных);
	ГруппаСвойствоДанных.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСвойствоДанных.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСвойствоДанных.ОтображатьЗаголовок = Ложь;
	ГруппаСвойствоДанных.Объединенная = Ложь;
	ГруппаСвойствоДанных.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
	
	НовыйЭлемент = Элементы.Добавить("ДекорацияСвойствоДанных" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаСвойствоДанных);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = СвойстваВидаДанных.Свойство;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтПолужирный;
	НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Свойство", СвойстваВидаДанных.Свойство);
	СтруктураПоиска.Вставить("ГруппаДанных", ГруппаДанных);
	СтруктураПоиска.Вставить("ВидДанных", ВидДанных);
	
	НайденныеСтроки = СоответствиеКолонок.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ГруппаДанных_ИзРегистраСведений",  ГруппаДанных);
		СтруктураОтбора.Вставить("ВидДанных_ИзРегистраСведений",     ВидДанных);
		СтруктураОтбора.Вставить("Классификатор_ИзРегистраСведений", Классификатор);
		
		//@skip-check wrong-string-literal-content
		НайденныеСтрокиПаролей = ЭтотОбъект["МоиПароли"].НайтиСтроки(СтруктураОтбора); // Массив
		Для Каждого Строка Из НайденныеСтрокиПаролей Цикл
			
			ПараметрыОперации = Новый Структура;
			ПараметрыОперации.Вставить("КлассДанных",                    Классификатор);
			ПараметрыОперации.Вставить("ГруппаДанных",                     ГруппаДанных);
			ПараметрыОперации.Вставить("ВидДанных",                        ВидДанных);
			ПараметрыОперации.Вставить("Строка",                           Строка);
			ПараметрыОперации.Вставить("НайденныеСтроки",                  НайденныеСтроки);
			ПараметрыОперации.Вставить("ГруппаСвойствоДанных",             ГруппаСвойствоДанных);
			ПараметрыОперации.Вставить("СвойстваВидаДанных",               СвойстваВидаДанных);
			ПараметрыОперации.Вставить("СоответствиеРеквизитовИЭлементов", СоответствиеРеквизитовИЭлементов);
			
			ДобавитьЭлементыФормыСвойствоДанныхСтрока(ПараметрыОперации, ДополнительныеПараметры);
			
			Итератор = Итератор + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ГруппаСвойствоДанных.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.Удалить(ГруппаСвойствоДанных);
	КонецЕсли;
	
КонецПроцедуры

//@skip-check property-return-type
//@skip-check statement-type-change
&НаСервере
Процедура ДобавитьЭлементыФормыСвойствоДанныхСтрока(ПараметрыОперации, ДополнительныеПараметры = Неопределено)
	
	Строка                           = ПараметрыОперации.Строка;
	НайденныеСтроки                  = ПараметрыОперации.НайденныеСтроки;
	ГруппаСвойствоДанных             = ПараметрыОперации.ГруппаСвойствоДанных;
	СвойстваВидаДанных               = ПараметрыОперации.СвойстваВидаДанных;
	СоответствиеРеквизитовИЭлементов = ПараметрыОперации.СоответствиеРеквизитовИЭлементов;
	
	ГруппаСвойствоДанныхСтрока = Элементы.Добавить("ГруппаСвойствоДанныхСтрока" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаСвойствоДанных);
	ГруппаСвойствоДанныхСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСвойствоДанныхСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаСвойствоДанныхСтрока.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	ГруппаСвойствоДанныхСтрока.ОтображатьЗаголовок = Ложь;
	
	ИмяКолонки = НайденныеСтроки[0].ИмяКолонки;
	Значение = Строка[ИмяКолонки]; // Произвольный
	
	ИмяПоля = "ЗначениеСвойства" + Формат(Итератор, "ЧГ=0");
	
	НовыйРеквизит = Новый РеквизитФормы(ИмяПоля, СвойстваВидаДанных.ТипЗначения);
	
	НовыйЭлемент = Элементы.Добавить(ИмяПоля, Тип("ПолеФормы"), ГруппаСвойствоДанныхСтрока);
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	
	Если СвойстваВидаДанных.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		
	Иначе
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		
		ГруппаСвойствоДанныхСтрока.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		
		НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		НовыйЭлемент.КнопкаОткрытия = Ложь;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.МаксимальнаяШирина = 15;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 5);
		СтруктураПоиска.Вставить("ЗаголовокКоманды", ИмяКолонки);
		СтруктураПоиска.Вставить("КомандаДанные", Строка.Регистратор_ИзРегистраСведений);
		СтруктураПоиска.Вставить("ГруппаДанных", Строка.ГруппаДанных_ИзРегистраСведений);
		СтруктураПоиска.Вставить("ВидДанных", Строка.ВидДанных_ИзРегистраСведений);
		
		НайденныеСтрокиСоответствия = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиСоответствия.Количество() Тогда
			НовоеСоответствие = НайденныеСтрокиСоответствия[0];
		Иначе
			// Команда
			НоваяКоманда = Команды.Добавить("СтрокаЗначениеКопировать" + Формат(Итератор, "ЧГ=0"));
			НоваяКоманда.Действие = "СкопироватьВБуферОбмена";
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиКопировать;
			НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
			НоваяКоманда.Подсказка = НСтр("ru = 'Скопировать значение в буфер обмена'");
			// Соответствие команды и данных
			НовоеСоответствие = СоответствиеКоманд.Добавить();
			НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
			НовоеСоответствие.НомерГруппы = 5;
			НовоеСоответствие.ЗаголовокКоманды = ИмяКолонки;
			НовоеСоответствие.КомандаДанные = Строка.Регистратор_ИзРегистраСведений;
		КонецЕсли;
		
		НовыйЭлементКнопки = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаСвойствоДанныхСтрока);
		НовыйЭлементКнопки.ИмяКоманды = НовоеСоответствие.КомандаИмя;
		НовыйЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		
		// Кнопка открытия значения
		Если СвойстваВидаДанных.Открывать Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерГруппы", 7);
			СтруктураПоиска.Вставить("ЗаголовокКоманды", ИмяКолонки);
			СтруктураПоиска.Вставить("КомандаДанные", Строка.Регистратор_ИзРегистраСведений);
			СтруктураПоиска.Вставить("ГруппаДанных", Строка.ГруппаДанных_ИзРегистраСведений);
			СтруктураПоиска.Вставить("ВидДанных", Строка.ВидДанных_ИзРегистраСведений);
			
			НайденныеСтрокиСоответствия = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтрокиСоответствия.Количество() Тогда
				НовоеСоответствие = НайденныеСтрокиСоответствия[0];
			Иначе
				// Команда
				НоваяКоманда = Команды.Добавить("СтрокаЗначениеОткрытьЗначениеСтроки" + Формат(Итератор, "ЧГ=0"));
				НоваяКоманда.Действие = "ОткрытьЗначениеСтроки";
				НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиПереходПоСсылке;
				НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
				НоваяКоманда.Подсказка = НСтр("ru = 'Открыть значение в стороннем приложении'");
				// Соответствие команды и данных
				НовоеСоответствие = СоответствиеКоманд.Добавить();
				НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
				НовоеСоответствие.НомерГруппы = 7;
				НовоеСоответствие.ЗаголовокКоманды = ИмяКолонки;
				НовоеСоответствие.КомандаДанные = Строка.Регистратор_ИзРегистраСведений;
			КонецЕсли;
			
			НовыйЭлементКнопки = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаСвойствоДанныхСтрока);
			НовыйЭлементКнопки.ИмяКоманды = НовоеСоответствие.КомандаИмя;
			НовыйЭлементКнопки.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			
		КонецЕсли;
		
		НовыйЭлемент.РежимПароля = СвойстваВидаДанных.РежимПароля;
		
	КонецЕсли;
	
	НовоеСоответствиеРеквизитаИЭлемента = СоответствиеРеквизитовИЭлементов.Добавить();
	НовоеСоответствиеРеквизитаИЭлемента.Реквизит = НовыйРеквизит;
	НовоеСоответствиеРеквизитаИЭлемента.Элемент  = НовыйЭлемент;
	НовоеСоответствиеРеквизитаИЭлемента.ИмяПоля  = ИмяПоля;
	НовоеСоответствиеРеквизитаИЭлемента.Значение = Значение;
	
КонецПроцедуры

//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДобавитьЭлементыФормыСлужебнойИнформацииДанных(ПараметрыОперации, ДополнительныеПараметры = Неопределено)
	
	Классификатор            = ПараметрыОперации.КлассДанных;
	ГруппаДанных             = ПараметрыОперации.ГруппаДанных;
	ВидДанных                = ПараметрыОперации.ВидДанных;
	ГруппаДеталиГруппаДанных = ПараметрыОперации.ГруппаДеталиГруппаДанных;
	
	// Кнопки действий
	ГруппаСвойствоДанныхКоманды = Элементы.Добавить("ГруппаСвойствоДанныхКоманды" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаДеталиГруппаДанных);
	ГруппаСвойствоДанныхКоманды.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСвойствоДанныхКоманды.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСвойствоДанныхКоманды.ОтображатьЗаголовок = Ложь;
	ГруппаСвойствоДанныхКоманды.Объединенная = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("ДекорацияСвойствоДанныхКоманды" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаСвойствоДанныхКоманды);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = "";
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ГруппаДанных_ИзРегистраСведений",  ГруппаДанных);
	СтруктураОтбора.Вставить("ВидДанных_ИзРегистраСведений",     ВидДанных);
	СтруктураОтбора.Вставить("Классификатор_ИзРегистраСведений", Классификатор);
	
	//@skip-check wrong-string-literal-content
	НайденныеСтрокиПаролей = ЭтотОбъект["МоиПароли"].НайтиСтроки(СтруктураОтбора); // Массив
	Для Каждого НайденнаяСтрокаПароля Из НайденныеСтрокиПаролей Цикл
		
		ДобавитьЭлементыФормыКнопкиСлужебнойИнформацииДанных(НайденнаяСтрокаПароля, ГруппаСвойствоДанныхКоманды);
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
КонецПроцедуры

//@skip-check property-return-type
//@skip-check statement-type-change
&НаСервере
Процедура ДобавитьЭлементыФормыКнопкиСлужебнойИнформацииДанных(НайденнаяСтрокаПароля, ГруппаСвойствоДанныхКоманды, ДополнительныеПараметры = Неопределено)
	
	ГруппаСвойствоДанныхСтрокаКоманды = Элементы.Добавить("ГруппаСвойствоДанныхСтрокаКоманды" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаСвойствоДанныхКоманды);
	ГруппаСвойствоДанныхСтрокаКоманды.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСвойствоДанныхСтрокаКоманды.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаСвойствоДанныхСтрокаКоманды.ОтображатьЗаголовок = Ложь;
	
	// Кнопка "Копировать все"
	КомандаИмя = "КомандаКопироватьВсе" + Формат(Итератор, "ЧГ=0");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 6);
	СтруктураПоиска.Вставить("ЗаголовокКоманды", КомандаИмя);
	СтруктураПоиска.Вставить("КомандаДанные", НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений);
	
	НайденныеСтрокиСоответствия = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтрокиСоответствия.Количество() Тогда
		НовоеСоответствие = НайденныеСтрокиСоответствия[0];
	Иначе
		// Команда
		НоваяКоманда = Команды.Добавить("СтрокаЗначениеКопироватьВсе" + Формат(Итератор, "ЧГ=0"));
		НоваяКоманда.Действие = "СкопироватьВБуферОбмена";
		НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиКопировать;
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка = НСтр("ru = 'Скопировать все значения этого доступа в буфер обмена'");
		// Соответствие команды и данных
		НовоеСоответствие = СоответствиеКоманд.Добавить();
		НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
		НовоеСоответствие.НомерГруппы = 6;
		НовоеСоответствие.ЗаголовокКоманды = КомандаИмя;
		НовоеСоответствие.КомандаДанные = НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений;
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаСвойствоДанныхСтрокаКоманды);
	НовыйЭлемент.ИмяКоманды = НовоеСоответствие.КомандаИмя;
	НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	// Кнопка "Изменить"
	КомандаИмя = "КомандаИзменить" + Формат(Итератор, "ЧГ=0");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 6);
	СтруктураПоиска.Вставить("ЗаголовокКоманды", КомандаИмя);
	СтруктураПоиска.Вставить("КомандаДанные", НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений);
	
	НайденныеСтрокиСоответствия = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтрокиСоответствия.Количество() Тогда
		НовоеСоответствие = НайденныеСтрокиСоответствия[0];
	Иначе
		// Команда
		НоваяКоманда = Команды.Добавить("СтрокаЗначениеИзменить" + Формат(Итератор, "ЧГ=0"));
		НоваяКоманда.Действие = "Изменить";
		НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиИзменить;
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка = НСтр("ru = 'Изменить доступ'");
		// Соответствие команды и данных
		НовоеСоответствие = СоответствиеКоманд.Добавить();
		НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
		НовоеСоответствие.НомерГруппы = 6;
		НовоеСоответствие.ЗаголовокКоманды = КомандаИмя;
		НовоеСоответствие.КомандаДанные = НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений;
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаСвойствоДанныхСтрокаКоманды);
	НовыйЭлемент.ИмяКоманды = НовоеСоответствие.КомандаИмя;
	НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	// Кнопка "Копировать"
	КомандаИмя = "КомандаСкопировать" + Формат(Итератор, "ЧГ=0");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 6);
	СтруктураПоиска.Вставить("ЗаголовокКоманды", КомандаИмя);
	СтруктураПоиска.Вставить("КомандаДанные", НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений);
	
	НайденныеСтрокиСоответствия = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтрокиСоответствия.Количество() Тогда
		НовоеСоответствие = НайденныеСтрокиСоответствия[0];
	Иначе
		// Команда
		НоваяКоманда = Команды.Добавить("СтрокаЗначениеКопировать" + Формат(Итератор, "ЧГ=0"));
		НоваяКоманда.Действие = "Скопировать";
		НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиСкопировать;
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка = НСтр("ru = 'Скопировать доступ'");
		// Соответствие команды и данных
		НовоеСоответствие = СоответствиеКоманд.Добавить();
		НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
		НовоеСоответствие.НомерГруппы = 6;
		НовоеСоответствие.ЗаголовокКоманды = КомандаИмя;
		НовоеСоответствие.КомандаДанные = НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений;
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаСвойствоДанныхСтрокаКоманды);
	НовыйЭлемент.ИмяКоманды = НовоеСоответствие.КомандаИмя;
	НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	// Кнопка "Удалить"
	КомандаИмя = "КомандаУдалить" + Формат(Итератор, "ЧГ=0");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 6);
	СтруктураПоиска.Вставить("ЗаголовокКоманды", КомандаИмя);
	СтруктураПоиска.Вставить("КомандаДанные", НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений);
	
	НайденныеСтрокиСоответствия = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтрокиСоответствия.Количество() Тогда
		НовоеСоответствие = НайденныеСтрокиСоответствия[0];
	Иначе
		// Команда
		НоваяКоманда = Команды.Добавить("СтрокаЗначениеУдалить" + Формат(Итератор, "ЧГ=0"));
		НоваяКоманда.Действие = "Удалить";
		НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
		Если НайденнаяСтрокаПароля.СтатусДанных_ИзРегистраСведений = Перечисления.СтатусыДанных.Актуальный Тогда
			НоваяКоманда.Подсказка = НСтр("ru = 'Установить в доступе статус ""Неактуальный"" и пометить на удаление'");
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиУдалить;
		ИначеЕсли НайденнаяСтрокаПароля.СтатусДанных_ИзРегистраСведений = Перечисления.СтатусыДанных.Неактуальный Тогда
			НоваяКоманда.Подсказка = НСтр("ru = 'Установить в доступе статус ""Актуальный"" и снять пометку на удаление'");
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиОтменитьУдаление;
		КонецЕсли;
		// Соответствие команды и данных
		НовоеСоответствие = СоответствиеКоманд.Добавить();
		НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
		НовоеСоответствие.НомерГруппы = 6;
		НовоеСоответствие.ЗаголовокКоманды = КомандаИмя;
		НовоеСоответствие.КомандаДанные = НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений;
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаСвойствоДанныхСтрокаКоманды);
	НовыйЭлемент.ИмяКоманды = НовоеСоответствие.КомандаИмя;
	НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	// Кнопка "Присоединенные файлы"
	Если НайденнаяСтрокаПароля.Регистратор_КоличествоФайлов Тогда
		
		КомандаИмя = "КомандаПрисоединенныеФайлы" + Формат(Итератор, "ЧГ=0");
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 6);
		СтруктураПоиска.Вставить("ЗаголовокКоманды", КомандаИмя);
		СтруктураПоиска.Вставить("КомандаДанные", НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений);
		
		НайденныеСтрокиСоответствия = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиСоответствия.Количество() Тогда
			НовоеСоответствие = НайденныеСтрокиСоответствия[0];
		Иначе
			// Команда
			НоваяКоманда = Команды.Добавить("СтрокаЗначениеПрисоединенныеФайлы" + Формат(Итератор, "ЧГ=0"));
			НоваяКоманда.Действие = "ПрисоединенныеФайлы";
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиПрикрепить;
			НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
			НоваяКоманда.Подсказка = НСтр("ru = 'Открыть список присоединенных файлов'");
			// Соответствие команды и данных
			НовоеСоответствие = СоответствиеКоманд.Добавить();
			НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
			НовоеСоответствие.НомерГруппы = 6;
			НовоеСоответствие.ЗаголовокКоманды = КомандаИмя;
			НовоеСоответствие.КомандаДанные = НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаСвойствоДанныхСтрокаКоманды);
		НовыйЭлемент.ИмяКоманды = НовоеСоответствие.КомандаИмя;
		НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		
	Иначе
		
		КомандаИмя = "КомандаДобавитьПрисоединенныеФайлы" + Формат(Итератор, "ЧГ=0");
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", 6);
		СтруктураПоиска.Вставить("ЗаголовокКоманды", КомандаИмя);
		СтруктураПоиска.Вставить("КомандаДанные", НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений);
		
		НайденныеСтрокиСоответствия = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиСоответствия.Количество() Тогда
			НовоеСоответствие = НайденныеСтрокиСоответствия[0];
		Иначе
			// Команда
			НоваяКоманда = Команды.Добавить("СтрокаЗначениеДобавитьПрисоединенныеФайлы" + Формат(Итератор, "ЧГ=0"));
			НоваяКоманда.Действие = "ДобавитьПрисоединенныеФайлы";
			НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиЗагрузить;
			НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
			НоваяКоманда.Подсказка = НСтр("ru = 'Добавить присоединенный файл'");
			// Соответствие команды и данных
			НовоеСоответствие = СоответствиеКоманд.Добавить();
			НовоеСоответствие.КомандаИмя = НоваяКоманда.Имя;
			НовоеСоответствие.НомерГруппы = 6;
			НовоеСоответствие.ЗаголовокКоманды = КомандаИмя;
			НовоеСоответствие.КомандаДанные = НайденнаяСтрокаПароля.Регистратор_ИзРегистраСведений;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить(НовоеСоответствие.КомандаИмя, Тип("КнопкаФормы"), ГруппаСвойствоДанныхСтрокаКоманды);
		НовыйЭлемент.ИмяКоманды = НовоеСоответствие.КомандаИмя;
		НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//@skip-check invocation-parameter-type-intersect
&НаСервереБезКонтекста
Функция ПолеПоискаАвтоПодборНаСервере(Знач Текст)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МоиПароли.Комментарий КАК Данные
		|ПОМЕСТИТЬ втОсновные
		|ИЗ
		|	РегистрСведений.МоиПароли КАК МоиПароли
		|ГДЕ
		|	НРЕГ(МоиПароли.Комментарий) ПОДОБНО &ПолеПоиска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МоиПароли.ВидДанных.Наименование
		|ИЗ
		|	РегистрСведений.МоиПароли КАК МоиПароли
		|ГДЕ
		|	НРЕГ(МоиПароли.ВидДанных.Наименование) ПОДОБНО &ПолеПоиска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МоиПароли.ГруппаДанных.Наименование
		|ИЗ
		|	РегистрСведений.МоиПароли КАК МоиПароли
		|ГДЕ
		|	НРЕГ(МоиПароли.ГруппаДанных.Наименование) ПОДОБНО &ПолеПоиска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(МоиПароли.Значение КАК СТРОКА(250))
		|ИЗ
		|	РегистрСведений.МоиПароли КАК МоиПароли
		|ГДЕ
		|	НЕ МоиПароли.Свойство.РежимПароля
		|	И НРЕГ(ВЫРАЗИТЬ(МоиПароли.Значение КАК СТРОКА(1024))) ПОДОБНО &ПолеПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 20
		|	втОсновные.Данные КАК Данные
		|ИЗ
		|	втОсновные КАК втОсновные";
	Запрос.УстановитьПараметр("ПолеПоиска", "%" + Текст + "%");
	
	Данные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Данные");
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(Данные);
	
	Для Каждого ЗначениеДанных Из ДанныеВыбора Цикл
		
		ПозицияНачало = СтрНайти(НРег(ЗначениеДанных.Значение), НРег(Текст));
		ПозицияКонец = ПозицияНачало + СтрДлина(Текст);
		
		МассивЧастейСлова = Новый Массив; // Массив из Строка
		МассивЧастейСлова.Добавить(Лев(ЗначениеДанных.Значение, ПозицияНачало - 1));
		МассивЧастейСлова.Добавить(
			Новый ФорматированнаяСтрока(
				Сред(ЗначениеДанных, ПозицияНачало, ПозицияКонец - ПозицияНачало), ,
				ЦветаСтиля.ЦветАкцентированияМоиПароли));
		МассивЧастейСлова.Добавить(Сред(ЗначениеДанных.Значение, ПозицияКонец));
		
		ЗначениеДанных.Представление = Новый ФорматированнаяСтрока(МассивЧастейСлова);
		
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Удалить документ доступа.
// 
// Параметры:
//  Документ - ДокументСсылка.ЭкземплярДоступа - Документ
&НаСервере
Процедура УдалитьДокументДоступа(Знач Документ)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭкземплярДоступа");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ);
		Блокировка.Заблокировать();
		
		РегистраторОбъект = Документ.ПолучитьОбъект();
		Если РегистраторОбъект.СтатусДанных = Перечисления.СтатусыДанных.Актуальный Тогда
			РегистраторОбъект.УстановитьПометкуУдаления(Истина);
		Иначе
			РегистраторОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		РегистраторОбъект.Прочитать();
		РегистраторОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		//@skip-check object-deprecated
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Не удалось пометить на удаление документ-регистратор %1 по причине: %2'"), Документ, ОписаниеОшибки);
		Сообщение.Сообщить();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление доступа'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			РегистраторОбъект.Ссылка.Метаданные(),
			РегистраторОбъект.Ссылка,
			Сообщение.Текст);
		
	КонецПопытки;
	
	ОбновитьНаСервере();
	
КонецПроцедуры

//@skip-check statement-type-change
&НаСервере
Процедура УстановитьЦвета()
	
	ЦветТекстаЛичноеКлассыДанных = Константы.ЦветТекстаЛичноеКлассыДанных.Получить().Получить();
	ЦветТекстаЛичноеВидыДанных          = Константы.ЦветТекстаЛичноеВидыДанных.Получить().Получить();
	ЦветТекстаЛичноеГруппыДанных        = Константы.ЦветТекстаЛичноеГруппыДанных.Получить().Получить();
	ЦветТекстаРаботаКлассыДанных = Константы.ЦветТекстаРаботаКлассыДанных.Получить().Получить();
	ЦветТекстаРаботаВидыДанных          = Константы.ЦветТекстаРаботаВидыДанных.Получить().Получить();
	ЦветТекстаРаботаГруппыДанных        = Константы.ЦветТекстаРаботаГруппыДанных.Получить().Получить();
	ЦветФонаНапоминания                 = Константы.ЦветФонаНапоминания.Получить().Получить();
	ЦветФонаНапоминанияДобавить         = Константы.ЦветФонаНапоминанияДобавить.Получить().Получить();
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаЛичноеКлассыДанных) Тогда
		ЦветТекстаЛичноеКлассыДанных = ЦветаСтиля.ЦветТекстаЛичноеКлассыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаЛичноеВидыДанных) Тогда
		ЦветТекстаЛичноеВидыДанных = ЦветаСтиля.ЦветТекстаЛичноеВидыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаЛичноеГруппыДанных) Тогда
		ЦветТекстаЛичноеГруппыДанных = ЦветаСтиля.ЦветТекстаЛичноеГруппыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаРаботаКлассыДанных) Тогда
		ЦветТекстаРаботаКлассыДанных = ЦветаСтиля.ЦветТекстаРаботаКлассыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаРаботаВидыДанных) Тогда
		ЦветТекстаРаботаВидыДанных = ЦветаСтиля.ЦветТекстаРаботаВидыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветТекстаРаботаГруппыДанных) Тогда
		ЦветТекстаРаботаГруппыДанных = ЦветаСтиля.ЦветТекстаРаботаГруппыДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветФонаНапоминания) Тогда
		ЦветФонаНапоминания = ЦветаСтиля.ЦветФонаНапоминания;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветФонаНапоминанияДобавить) Тогда
		ЦветФонаНапоминанияДобавить = ЦветаСтиля.ЦветФонаНапоминанияДобавить;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	ПоложениеНапоминаний = МоиПаролиВызовСервера.ПолучитьЗначениеКонстантыПоИмени("ПоложениеНапоминанийНаФормеРабочегоМеста");
	Если ПоложениеНапоминаний = 0 Тогда
		Элементы.Переместить(Элементы.СтраницыНапоминания, ЭтотОбъект);
	Иначе
		Элементы.Переместить(Элементы.СтраницыНапоминания, ЭтотОбъект, Элементы.ГруппаПароли);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьНастройкуГруппировок()
	
	Элемент = ПорядокГруппировок.НайтиПоЗначению(Перечисления.УровниДоступов.КлассДанных);
	Если Элемент<>Неопределено И Элемент.Пометка И НЕ Константы.ИспользоватьКлассыДанных.Получить() Тогда
		Элемент.Пометка = ЛОЖЬ;
	КонецЕсли;
	
	Элемент = ПорядокГруппировок.НайтиПоЗначению(Перечисления.УровниДоступов.ГруппаДанных);
	Если Элемент<>Неопределено И Элемент.Пометка И НЕ Константы.ИспользоватьГруппыДанных.Получить() Тогда
		Элемент.Пометка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры // ИсправитьНастройкуГруппировок()

&НаСервере
Процедура СохранитьСвернутыеГруппировки()
	
	Если Элементы.Найти("ГруппаСписокПаролейОбщая") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвернутыеГруппировки.Очистить();
	
	Если СохранятьСвернутыеГруппировки Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Свернута", Истина);
		
		Данные = ГруппировкиЭлементовДанных.Выгрузить(СтруктураПоиска);
		СвернутыеГруппировки.Загрузить(Данные);
		
	КонецЕсли;
	
	ГруппировкиЭлементовДанных.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСвернутыеГруппировки()
	
	Если НЕ СохранятьСвернутыеГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СвернутаяГруппировка Из СвернутыеГруппировки Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Данные", СвернутаяГруппировка.Данные);
		СтруктураПоиска.Вставить("ДанныеУровень2", СвернутаяГруппировка.ДанныеУровень2);
		СтруктураПоиска.Вставить("ДанныеУровень3", СвернутаяГруппировка.ДанныеУровень3);
		
		НайденныеСтроки = ГруппировкиЭлементовДанных.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденнаяСтрока.Свернута = Истина;
			
			Если СтрНайти(НайденнаяСтрока.ИмяГруппы, "ГруппаДанных") Тогда
				
				ГруппаЭлементов = Элементы.Найти(НайденнаяСтрока.ИмяГруппы);
				Если НЕ ГруппаЭлементов = Неопределено Тогда
					
					ГруппаЭлементов.Видимость = Ложь;
					
					КоличествоСвернутыхЭлементов = ГруппаЭлементов.ПодчиненныеЭлементы[0].ПодчиненныеЭлементы.Количество() - 1;
					
				КонецЕсли;
				
			Иначе
				
				ГруппаЭлементов = Элементы.Найти(НайденнаяСтрока.ИмяГруппы);
				Если НЕ ГруппаЭлементов = Неопределено Тогда
					
					Для Каждого ПодчиненныйЭлемент Из ГруппаЭлементов.ПодчиненныеЭлементы Цикл
						Если НЕ СтрНайти(ПодчиненныйЭлемент.Имя, "Заголовок") Тогда
							ПодчиненныйЭлемент.Видимость = Ложь;
						КонецЕсли;
					КонецЦикла;
					
					КоличествоСвернутыхЭлементов = ГруппаЭлементов.ПодчиненныеЭлементы.Количество() - 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ГруппаЭлементов = Неопределено Тогда
				
				Если СтрНачинаетсяС(ГруппаЭлементов.Имя, "Группа") Тогда
					ИмяДекорации = "Декорация" + Сред(ГруппаЭлементов.Имя, 7);
				КонецЕсли;
				ИмяДекорации = СтрЗаменить(ИмяДекорации, "Детали", "") + "Количество";
				Элементы[ИмяДекорации].Заголовок = СтрШаблон(НСтр("ru = 'свернуто %1'"), Формат(КоличествоСвернутыхЭлементов, "ЧН="));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗаписатьСобытие

// Записать событие.
// 
// Параметры:
//  ТипСобытия - ПеречислениеСсылка.ТипСобытия -  Тип события
//  Доступ - ДокументСсылка.ЭкземплярДоступа - Доступ
//  ВидДанных - СправочникСсылка.ВидыДанных - Вид данных
//  Свойство - Неопределено, ПланВидовХарактеристикСсылка.СвойстваВидовДанных -  Свойство
//@skip-check property-return-type
&НаСервереБезКонтекста
Процедура ЗаписатьСобытие(Знач ТипСобытия, Знач Доступ, Знач ВидДанных, Знач Свойство = Неопределено)
	
	// ЖурналСобытий
	СтруктураСобытия = РегистрыСведений.ЖурналСобытий.СтруктураСобытия();
	СтруктураСобытия.ТипСобытия = ТипСобытия;
	СтруктураСобытия.ЭкземплярДоступа = Доступ;
	СтруктураСобытия.ВидДанных = ВидДанных;
	СтруктураСобытия.Свойство = Свойство;
	РегистрыСведений.ЖурналСобытий.ЗаписатьСобытие(СтруктураСобытия);
	// Конец ЖурналСобытий
	
КонецПроцедуры

#КонецОбласти

#Область Напоминания

&НаСервере
Процедура ОтобразитьНапоминания()
	
	ИспользоватьНапоминанияПользователя = Константы.ИспользоватьНапоминанияПользователя.Получить();
	Элементы.СтраницыНапоминания.Видимость = ИспользоватьНапоминанияПользователя;
	Если НЕ ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	ЦветФонаНапоминанияИспользоватьИзГруппыДанных = Константы.ЦветФонаНапоминанияИспользоватьИзГруппыДанных.Получить();
	
	Элементы.ГруппаДобавитьНапоминание.ЦветФона            = ЦветФонаНапоминанияДобавить;
	Элементы.ГруппаДобавитьНапоминаниеВерхНиз.ЦветФона     = ЦветФонаНапоминанияДобавить;
	Элементы.ГруппаУправлениеНапоминаниями.ЦветФона        = ЦветФонаНапоминанияДобавить;
	Элементы.ГруппаУправлениеНапоминаниямиВерхНиз.ЦветФона = ЦветФонаНапоминанияДобавить;
	
	УдалениеСозданныхДанныхФормы_Напоминания();
	
	Итератор = 1;
	
	ЗаполнитьТаблицу_Напоминания();
	
	СформироватьИнтерфейс_Напоминания();
	
	МенеджерУдаленногоНапоминанияЗаполнен = МенеджерУдаленногоНапоминания.Количество();
	Элементы.ВернутьУдаленноеНапоминание.Видимость      = МенеджерУдаленногоНапоминанияЗаполнен;
	Элементы.НеВозвращатьУдаленноеНапоминание.Видимость = МенеджерУдаленногоНапоминанияЗаполнен;
	
КонецПроцедуры

&НаСервере
Процедура УдалениеСозданныхДанныхФормы_Напоминания()
	
	Если Элементы.Найти("ГруппаМоиНапоминания") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Напоминание Из МоиНапоминания Цикл
		Если ЗначениеЗаполнено(Напоминание.Номергруппы) Тогда
			Команды.Удалить(Команды.Найти("НапоминаниеИзменить" + Напоминание.НомерГруппы));
			Команды.Удалить(Команды.Найти("НапоминаниеУдалить" + Напоминание.НомерГруппы));
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Удалить(Элементы.Найти("ГруппаМоиНапоминания"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицу_Напоминания()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НапоминанияПользователя.Пользователь КАК Пользователь,
		|	НапоминанияПользователя.ВремяСобытия КАК ВремяСобытия,
		|	НапоминанияПользователя.Источник КАК Источник,
		|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
		|	НапоминанияПользователя.Описание КАК Описание
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокНапоминания";
	
	Если СортировкаНапоминанийПоУбыванию Тогда
		Запрос.Текст = СтрШаблон("%1 УБЫВ", Запрос.Текст);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеПоискаНапоминаний) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (Описание ПОДОБНО &Описание ИЛИ Источник.Наименование ПОДОБНО &Описание) И ");
		Запрос.УстановитьПараметр("Описание", "%" + ПолеПоискаНапоминаний + "%");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	
	МоиНапоминания.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//@skip-check invocation-parameter-type-intersect
//@skip-check typed-value-adding-to-untyped-collection
//@skip-check dynamic-access-method-not-found
//@skip-check property-return-type
&НаСервере
Процедура СформироватьИнтерфейс_Напоминания(ДополнительныеПараметры = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыДанных.Ссылка КАК Ссылка,
		|	ГруппыДанных.Цвет КАК Цвет
		|ИЗ
		|	Справочник.ГруппыДанных КАК ГруппыДанных
		|ГДЕ
		|	НЕ ГруппыДанных.ПометкаУдаления";
	ВыборкаЦветовГруппДанных = Запрос.Выполнить().Выбрать();
	
	ДоступныеДатыДляВыбораНапоминаний.Очистить();
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	// Формирование реквизитов формы
	ГруппаМоиНапоминанияОбщая = Элементы.Добавить("ГруппаМоиНапоминания", Тип("ГруппаФормы"), Элементы.СтраницаНапоминания);
	ГруппаМоиНапоминанияОбщая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаМоиНапоминанияОбщая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаМоиНапоминанияОбщая.ОтображатьЗаголовок = Ложь;
	
	МесяцНапоминания  = Дата('00010101');
	ДеньНапоминания   = Дата('00010101');
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Для Каждого Напоминание Из МоиНапоминания Цикл
		
		МесяцТекущегоНапоминания = НачалоМесяца(Напоминание.СрокНапоминания);
		ДеньТекущегоНапоминания  = НачалоДня(Напоминание.СрокНапоминания);
		
		Если НЕ МесяцНапоминания = МесяцТекущегоНапоминания Тогда
			
			ФорматДаты = "ДФ='ММММ'";
			
			Если НЕ НачалоГода(Напоминание.СрокНапоминания) = НачалоГода(ТекущаяДатаСеанса) Тогда
				ФорматДаты = "ДФ='ММММ гггг'";
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОтборПоДатеВНапоминаниях) ИЛИ МесяцТекущегоНапоминания = НачалоМесяца(ОтборПоДатеВНапоминаниях) Тогда
				
				НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеДатаМесяц" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаМоиНапоминанияОбщая);
				НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
				НовыйЭлемент.Заголовок = Формат(МесяцТекущегоНапоминания, ФорматДаты);
				НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH2;
				НовыйЭлемент.ЦветТекста = ЦветФонаНапоминанияДобавить;
				НовыйЭлемент.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
				НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
			МесяцНапоминания = МесяцТекущегоНапоминания;
			
		КонецЕсли;
		
		Если НЕ ДеньНапоминания = ДеньТекущегоНапоминания Тогда
			
			ФорматДаты = "ДФ='дд ММММ'";
			Если ДеньТекущегоНапоминания > КонецГода(ТекущаяДатаСеанса) ИЛИ ДеньТекущегоНапоминания < НачалоГода(ТекущаяДатаСеанса) Тогда
				ФорматДаты = "ДФ='дд ММММ гггг'";
			ИначеЕсли ДеньТекущегоНапоминания = НачалоДня(ТекущаяДатаСеанса) Тогда
				ФорматДаты = "ДФ='""Сегодня""'";
			ИначеЕсли ДеньТекущегоНапоминания = НачалоДня(НачалоДня(ТекущаяДатаСеанса) - 1) Тогда
				ФорматДаты = "ДФ='""Вчера""'";
			ИначеЕсли ДеньТекущегоНапоминания = КонецДня(ТекущаяДатаСеанса) + 1 Тогда
				ФорматДаты = "ДФ='""Завтра""'";
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОтборПоДатеВНапоминаниях) ИЛИ ДеньТекущегоНапоминания = ОтборПоДатеВНапоминаниях Тогда
				
				ГруппаДекорацииНапоминания = Элементы.Добавить("ГруппаДекорацииНапоминания" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаМоиНапоминанияОбщая);
				ГруппаДекорацииНапоминания.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаДекорацииНапоминания.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ГруппаДекорацииНапоминания.ОтображатьЗаголовок = Ложь;
				ГруппаДекорацииНапоминания.РастягиватьПоГоризонтали = Истина;
				
				НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеДатаДень" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаДекорацииНапоминания);
				НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
				НовыйЭлемент.Заголовок = Формат(ДеньТекущегоНапоминания, ФорматДаты);
				НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH3;
				НовыйЭлемент.ЦветТекста = ЦветФонаНапоминанияДобавить;
				НовыйЭлемент.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
				НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
				
				НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеДатаДеньНедели" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаДекорацииНапоминания);
				НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
				НовыйЭлемент.Заголовок = Формат(ДеньТекущегоНапоминания, "ДФ=дддд");
				НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH3;
				НовыйЭлемент.ЦветТекста = ЦветФонаНапоминанияДобавить;
				НовыйЭлемент.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
				НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
				НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
				
			КонецЕсли;
			
			ДоступныеДатыДляВыбораНапоминаний.Добавить(ДеньТекущегоНапоминания, СтрШаблон("%1     ", Формат(ДеньТекущегоНапоминания, ФорматДаты)));
			
			ДеньНапоминания = ДеньТекущегоНапоминания;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтборПоДатеВНапоминаниях) ИЛИ ДеньТекущегоНапоминания = ОтборПоДатеВНапоминаниях Тогда
			
			Если ЦветФонаНапоминанияИспользоватьИзГруппыДанных Тогда
				ВыборкаЦветовГруппДанных.Сбросить();
				Если ВыборкаЦветовГруппДанных.НайтиСледующий(Напоминание.Источник, "Ссылка") Тогда
					ТекущийЦветФонаНапоминания = ВыборкаЦветовГруппДанных.Цвет.Получить(); // Цвет
					Если НЕ ЗначениеЗаполнено(ТекущийЦветФонаНапоминания) Тогда
						ТекущийЦветФонаНапоминания = ЦветФонаНапоминания;
					КонецЕсли;
				Иначе
					ТекущийЦветФонаНапоминания = ЦветФонаНапоминания;
				КонецЕсли;
			Иначе
				ТекущийЦветФонаНапоминания = ЦветФонаНапоминания;
			КонецЕсли;
			
			ДобавитьНапоминаниеВИнтерфейс(Напоминание, ГруппаМоиНапоминанияОбщая, ТекущийЦветФонаНапоминания);
			
			Напоминание.НомерГруппы = Итератор;
			
		КонецЕсли;
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
КонецПроцедуры

//@skip-check object-deprecated
//@skip-check statement-type-change
&НаСервере
Процедура ДобавитьНапоминаниеВИнтерфейс(Напоминание, ГруппаМоиНапоминанияОбщая, ТекущийЦветФонаНапоминания, ДополнительныеПараметры = Неопределено)
	
	ГруппаНапоминание = Элементы.Добавить("ГруппаНапоминания" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаМоиНапоминанияОбщая);
	ГруппаНапоминание.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНапоминание.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаНапоминание.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	ГруппаНапоминание.ОтображатьЗаголовок = Ложь;
	ГруппаНапоминание.ЦветФона = ТекущийЦветФонаНапоминания;
	ГруппаНапоминание.РастягиватьПоГоризонтали = Истина;
	
	// Дата и время напоминания
	ФорматДаты = "ДФ='дд ММММ ""в"" ЧЧ:мм'";
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	НачалоДняНапоминание = НачалоДня(Напоминание.СрокНапоминания);
	РазницаТекущегоВремениИСрока = Окр((Напоминание.СрокНапоминания - ТекущаяДатаСеанса) / 60, 0);
	Если РазницаТекущегоВремениИСрока > 1 И РазницаТекущегоВремениИСрока < 60 Тогда
		ФорматДаты = СтрШаблон("ДФ='""через %1""'",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(РазницаТекущегоВремениИСрока, "минуту,минуты,минут"));
	ИначеЕсли РазницаТекущегоВремениИСрока >= -1 И РазницаТекущегоВремениИСрока <= 1 Тогда
		ФорматДаты = "ДФ='""сейчас""'";
	ИначеЕсли РазницаТекущегоВремениИСрока > -60 И РазницаТекущегоВремениИСрока < -1 Тогда
		ФорматДаты = СтрШаблон("ДФ='""просрочено на %1""'",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(-РазницаТекущегоВремениИСрока, "минуту,минуты,минут"));
	ИначеЕсли НачалоДняНапоминание = НачалоДня(ТекущаяДатаСеанса) Тогда
		ФорматДаты = "ДФ='""сегодня в"" ЧЧ:мм'";
	ИначеЕсли НачалоДняНапоминание = НачалоДня(НачалоДня(ТекущаяДатаСеанса) - 1) Тогда
		ФорматДаты = "ДФ='""вчера в"" ЧЧ:мм'";
	ИначеЕсли НачалоДняНапоминание = КонецДня(ТекущаяДатаСеанса) + 1 Тогда
		ФорматДаты = "ДФ='""завтра в"" ЧЧ:мм'";
	КонецЕсли;
	
	// Цвет текста
	ЦветТекста = WebЦвета.Черный;
	Если Напоминание.СрокНапоминания < ТекущаяДатаСеанса Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
	КонецЕсли;
	
	// Источник
	ГруппаШапкаНапоминаниеГруппа = Неопределено;
	Если ЗначениеЗаполнено(Напоминание.Источник) Тогда
		
		ГруппаШапкаНапоминаниеГруппа = Элементы.Добавить("ГруппаШапкаНапоминаниеГруппа" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаНапоминание);
		ГруппаШапкаНапоминаниеГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаШапкаНапоминаниеГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаШапкаНапоминаниеГруппа.ОтображатьЗаголовок = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеИсточник" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаШапкаНапоминаниеГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = Строка(Напоминание.Источник);
		НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH4;
		НовыйЭлемент.ЦветТекста = ЦветТекста;
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		
	КонецЕсли;
	
	// Дата и команды
	ГруппаШапкаНапоминание = Элементы.Добавить("ГруппаШапкаНапоминание" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаНапоминание);
	ГруппаШапкаНапоминание.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШапкаНапоминание.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаШапкаНапоминание.ОтображатьЗаголовок = Ложь;
	
	// Дата и время
	НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеДата" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаШапкаНапоминание);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = Формат(Напоминание.СрокНапоминания, ФорматДаты);
	НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтКурсивный;
	НовыйЭлемент.ЦветТекста = ЦветТекста;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
	// Определение группы кнопок
	Если ГруппаШапкаНапоминаниеГруппа = Неопределено Тогда
		ГруппаДляКнопок = ГруппаШапкаНапоминание;
	Иначе
		ГруппаДляКнопок = ГруппаШапкаНапоминаниеГруппа;
	КонецЕсли;
	
	// Команда "Изменить"
	НоваяКоманда = Команды.Добавить("НапоминаниеИзменить" + Формат(Итератор, "ЧГ=0"));
	НоваяКоманда.Действие = "НапоминаниеИзменить";
	НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиИзменить;
	НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
	НоваяКоманда.Подсказка = НСтр("ru = 'Изменить напоминание'");
	
	НовыйЭлемент = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаДляКнопок);
	НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
	НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	// Команда "Удалить"
	НоваяКоманда = Команды.Добавить("НапоминаниеУдалить" + Формат(Итератор, "ЧГ=0"));
	НоваяКоманда.Действие = "НапоминениеУдалить";
	НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиУдалить;
	НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
	НоваяКоманда.Подсказка = НСтр("ru = 'Удалить напоминание'");
	
	НовыйЭлемент = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаДляКнопок);
	НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
	НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	// Напоминание
	НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеОписание" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаНапоминание);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = Напоминание.Описание;
	НовыйЭлемент.ЦветТекста = ЦветТекста;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьКлючЗаписиРегистраСведений(Знач СтруктураКлюча)
	
	КлючЗаписи = РегистрыСведений.НапоминанияПользователя.СоздатьКлючЗаписи(СтруктураКлюча);
	
	Возврат КлючЗаписи;
	
КонецФункции

&НаСервере
Процедура УдалитьЗаписьРегистраСведений(Знач СтруктураКлюча)
	
	МенеджерЗаписи = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураКлюча);
	МенеджерЗаписи.Прочитать();
	
	СтруктураМенеджера = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураКлюча);
	СтруктураМенеджера.Вставить("Описание", МенеджерЗаписи.Описание);
	МенеджерУдаленногоНапоминания.Вставить(0, СтруктураМенеджера);
	
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьНапоминаниеНаСервере(Знач СтруктураКлюча)
	
	НапоминанияПользователя.УстановитьНапоминание(СтруктураКлюча.Текст, СтруктураКлюча.ВремяСобытия, , СтруктураКлюча.Источник);
	
КонецПроцедуры

//@skip-check invocation-parameter-type-intersect
&НаСервереБезКонтекста
Функция ПолеПоискаНапоминанияАвтоПодборНаСервере(Знач Текст)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НапоминанияПользователя.Описание КАК Данные
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.Пользователь = &Пользователь
		|	И НапоминанияПользователя.Описание ПОДОБНО &Описание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НапоминанияПользователя.Источник.Наименование
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.Пользователь = &Пользователь
		|	И НапоминанияПользователя.Источник.Наименование ПОДОБНО &Описание";
	Запрос.УстановитьПараметр("Описание", "%" + Текст + "%");
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	
	Данные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Данные");
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(Данные);
	
	Для Каждого ЗначениеДанных Из ДанныеВыбора Цикл
		
		ПозицияНачало = СтрНайти(НРег(ЗначениеДанных.Значение), НРег(Текст));
		ПозицияКонец = ПозицияНачало + СтрДлина(Текст);
		
		МассивЧастейСлова = Новый Массив; // Массив из Строка
		МассивЧастейСлова.Добавить(Лев(ЗначениеДанных.Значение, ПозицияНачало - 1));
		МассивЧастейСлова.Добавить(
			Новый ФорматированнаяСтрока(
				Сред(ЗначениеДанных, ПозицияНачало, ПозицияКонец - ПозицияНачало), ,
				ЦветаСтиля.ЦветАкцентированияМоиПароли));
		МассивЧастейСлова.Добавить(Сред(ЗначениеДанных.Значение, ПозицияКонец));
		
		ЗначениеДанных.Представление = Новый ФорматированнаяСтрока(МассивЧастейСлова);
		
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВернутьУдаленноеНапоминаниеНаСервере(Знач Описание, Знач ВремяСобытия, Знач Источник)
	
	НапоминанияПользователя.УстановитьНапоминание(Описание, ВремяСобытия, , Источник);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
