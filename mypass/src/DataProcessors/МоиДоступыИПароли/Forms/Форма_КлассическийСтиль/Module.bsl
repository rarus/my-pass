///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
//////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

//@skip-check invocation-parameter-type-intersect
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// В режиме "Ребочее мето" скроем панель формы с заголовком
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "РежимЗапускаРабочееМесто", Константы.РежимЗапускаПриложенияРабочееМесто.Получить()) Тогда
		ЭтотОбъект.ОтображатьЗаголовок      = ЛОЖЬ;
		ЭтотОбъект.ОтображатьКнопкуЗакрытия = ЛОЖЬ;
	КонецЕсли;
	
	ЗаполнитьСпискиВыбораОтборов();
	
	// устанавливаем условное оформление списков
	УстановитьУсловноеОформление();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	МинутыНовогоНапоминания = Дата('00010101') + Минута(ТекущаяДатаСеанса) * 60;
	ЧасыНовогоНапоминания   = Дата('00010101') + Час(ТекущаяДатаСеанса) * 3600;
	ДатаНовогоНапоминания   = ТекущаяДатаСеанса;
	
	УстановитьЦвета();
	
	МоиПаролиСервер.РегистрацияСобытия("МоиДоступыИПароли.Современный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьНапоминанияПользователя Тогда
		ПодключитьОбработчикОжидания("ОтобразитьНапоминанияНаКлиенте", 50, Ложь);
	КонецЕсли;
	
	МоиПаролиКлиент.ПодключитьОбработчикЗавершенияНапоминания(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыОповещенияНапоминанийПользователя" Тогда
		ОтобразитьНапоминанияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	МоиПаролиСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
	СкрытьНедоступныеКнопки(1);
	СкрытьНедоступныеКнопки(2);
	
	НастроитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Подключаемый мои пароли выбор.
// 
// Параметры:
//  Элемент - ТаблицаФормы - Элемент
//  ВыбраннаяСтрока - СтрокаТаблицыЗначений - Выбранная строка
//  Поле - ПолеФормы - Поле
//  СтандартнаяОбработка - Булево - Стандартная обработка
//@skip-check property-return-type
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура Подключаемый_МоиПаролиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы["МоиПароли"].ДанныеСтроки(ВыбраннаяСтрока);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКолонки", Поле.Имя);
	НайденныеСтроки = СоответствиеКолонок.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() И НайденныеСтроки[0].Свойство = ПредопределенноеЗначение("ПланВидовХарактеристик.СвойстваВидовДанных.СтатусДанных_ИзРегистраСведений") Тогда
		
		УдалитьДокументДоступа(ДанныеСтроки.Регистратор_ИзРегистраСведений);
		
		// ЖурналСобытий
		ЗаписатьСобытие(
			ПредопределенноеЗначение("Перечисление.ТипыСобытия.Редактирование"),
			ДанныеСтроки.Регистратор_ИзРегистраСведений,
			ДанныеСтроки.ВидДанных_ИзРегистраСведений);
		// Конец ЖурналСобытий
		
	ИначеЕсли СтрНайти(Поле.Имя, "КолонкаМоиПароли") Тогда
		
		СкопироватьВБуферОбменаНаКлиенте(ДанныеСтроки[Поле.Имя]);
		
		// ЖурналСобытий
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяКолонки", Поле.Имя);
		НайденныеСтроки = СоответствиеКолонок.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			Свойство = НайденныеСтроки[0].Свойство;
		Иначе
			Свойство = Неопределено;
		КонецЕсли;
		
		ЗаписатьСобытие(
			ПредопределенноеЗначение("Перечисление.ТипыСобытия.Копирование"),
			ДанныеСтроки.Регистратор_ИзРегистраСведений,
			ДанныеСтроки.ВидДанных_ИзРегистраСведений,
			Свойство);
		// Конец ЖурналСобытий
		
	Иначе
		
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("Ключ", ДанныеСтроки.Регистратор_ИзРегистраСведений);
		
		// Описание оповещения
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытиеФормыДоступа");
		
		ОткрытьФорму(
			"Документ.ЭкземплярДоступа.ФормаОбъекта",
			СтруктураОткрытия,
			ЭтотОбъект, , , ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Текст нового напоминания начало выбора.
// 
// Параметры:
//  Элемент - ПолеФормы -  Элемент
//  ДанныеВыбора - СписокЗначений из Строка -  Данные выбора
//  ВыборДобавлением - Булево -  Выбор добавлением
//  СтандартнаяОбработка - Булево - Стандартная обработка
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура ТекстНовогоНапоминанияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	
	// Формируем описание обработчика перехвата закрытия формы.
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "РедактированиеПоляНапоминания");
	
	// Открываем диалог многострочного редактирования текста комментария.
	ПоказатьВводСтроки(ОписаниеОповещения, СокрЛП(ТекстНовогоНапоминания), НСтр("ru = 'Введите новое напоминание...'"), , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаНапоминанийПриИзменении(Элемент)
	
	ОтобразитьНапоминанияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаНапоминанийАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолеПоискаНапоминанияАвтоПодборНаСервере(Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Обновить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСпискиВыбораОтборов();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "КлассификаторВыбор".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура КлассификаторВыбор(Команда)
	
	КлассификаторВыборНаКлиенте(Команда);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ГруппаДанныхВыбор".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ГруппаДанныхВыбор(Команда)
	
	ГруппаДанныхВыборНаКлиенте(Команда);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ВидДанныхВыбор".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВидДанныхВыбор(Команда)
	
	ВидДанныхВыборНаКлиенте(Команда);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "СтатусДанныхВыбор".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СтатусДанныхВыбор(Команда)
	
	СтатусДанныхВыборНаКлиенте(Команда);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Настройки".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура Настройки(Команда)
	
	// оповещение
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "Настройки");
	
	// открываем форму настроек
	МоиПаролиКлиент.ОткрытьНастройки(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Добавить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура Добавить(Команда)
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("ВидДанных",    ТекущийОтборВидДанных);
	СтруктураЗаполнения.Вставить("СтатусДанных", ТекущийОтборСтатусДанных);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытиеФормыДоступа");
	
	ОткрытьФорму(
		"Документ.ЭкземплярДоступа.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Скопировать".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаКлиенте
Процедура Скопировать(Команда)
	
	ТекущиеДанные = Элементы["МоиПароли"].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		Добавить(Неопределено);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Регистратор_ИзРегистраСведений);
		
		// Описание оповещения
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытиеФормыДоступа");
		
		ОткрытьФорму(
			"Документ.ЭкземплярДоступа.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект, , , ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Изменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаКлиенте
Процедура Изменить(Команда)
	
	ТекущиеДанные = Элементы["МоиПароли"].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Ключ", ТекущиеДанные.Регистратор_ИзРегистраСведений);
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытиеФормыДоступа");
	
	ОткрытьФорму(
		"Документ.ЭкземплярДоступа.ФормаОбъекта",
		СтруктураОткрытия,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Удалить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
&НаКлиенте
Процедура Удалить(Команда)
	
	ТекущиеДанные = Элементы["МоиПароли"].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВопросУдаленияДоступа");
	Если СтатусДокументаДоступа(ТекущиеДанные.Регистратор_ИзРегистраСведений) = ПредопределенноеЗначение("Перечисление.СтатусыДанных.Актуальный") Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), ТекущиеДанные.Регистратор_ИзРегистраСведений);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), ТекущиеДанные.Регистратор_ИзРегистраСведений);
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Выгрузить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Скачать(Команда)
	
	// открываем форму настроек
	ОткрытьФорму(
		"Обработка.МоиДоступыИПароли.Форма.ФормаСкачивания", ,
		ЭтотОбъект,
		ЭтотОбъект, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ОчиститьОтборы".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОчиститьОтборы(Команда)
	
	КлассификаторВыборНаКлиенте(Команды.Найти("КлассификаторВыбор_Все"), Ложь);
	ГруппаДанныхВыборНаКлиенте(Команды.Найти("ГруппаДанныхВыбор_Все"), Ложь);
	ВидДанныхВыборНаКлиенте(Команды.Найти("ВидДанныхВыбор_Все"), Ложь);
	СтатусДанныхВыборНаКлиенте(Команды.Найти("СтатусДанныхВыбор_Все"), Истина);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Информация".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Информация(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "НапоминаниеИзменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check module-structure-form-event-regions
//@skip-check module-unused-method
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура НапоминаниеИзменить(Команда)
	
	НомерГруппы = СтрЗаменить(Команда.Имя, "НапоминаниеИзменить", ""); // Число
	НомерГруппы = Число(НомерГруппы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", НомерГруппы);
	НайденныеСтроки = МоиНапоминания.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() Тогда
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Пользователь", НайденнаяСтрока.Пользователь);
		СтруктураКлюча.Вставить("ВремяСобытия", НайденнаяСтрока.ВремяСобытия);
		СтруктураКлюча.Вставить("Источник",     НайденнаяСтрока.Источник);
		
		КлючЗаписи = СоздатьКлючЗаписиРегистраСведений(СтруктураКлюча);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ИзменениеНапоминания");
		
		ОткрытьФорму(
			"РегистрСведений.НапоминанияПользователя.ФормаЗаписи",
			ПараметрыФормы,
			ЭтотОбъект, , , ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "НапоминениеУдалить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check module-structure-form-event-regions
//@skip-check module-unused-method
&НаКлиенте
Процедура НапоминениеУдалить(Команда)
	
	НомерГруппы = СтрЗаменить(Команда.Имя, "НапоминаниеУдалить", ""); // Число
	НомерГруппы = Число(НомерГруппы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", НомерГруппы);
	НайденныеСтроки = МоиНапоминания.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() Тогда
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Пользователь", НайденнаяСтрока.Пользователь);
		СтруктураКлюча.Вставить("ВремяСобытия", НайденнаяСтрока.ВремяСобытия);
		СтруктураКлюча.Вставить("Источник",     НайденнаяСтрока.Источник);
		
		УдалитьЗаписьРегистраСведений(СтруктураКлюча);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Удаление напоминания'"), ,
			НСтр("ru = 'Выполнено успешно'"),
			БиблиотекаКартинок.МоиПаролиУспешно64);
		
		ОтобразитьНапоминанияНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ДобавитьНапоминание".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ДобавитьНапоминание(Команда)
	
	Если НЕ ЗначениеЗаполнено(ТекстНовогоНапоминания) Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Добавление напоминания'"), ,
			НСтр("ru = 'Отсутствует текст'"),
			БиблиотекаКартинок.МоиПаролиНеуспешно64);
		
		Возврат;
		
	КонецЕсли;
	
	ВремяСобытия = НачалоДня(ДатаНовогоНапоминания) + Час(ЧасыНовогоНапоминания) * 3600 + Минута(МинутыНовогоНапоминания) * 60;
	
	СтруктураКлюча = Новый Структура;
	СтруктураКлюча.Вставить("Текст", ТекстНовогоНапоминания);
	СтруктураКлюча.Вставить("ВремяСобытия", ВремяСобытия);
	СтруктураКлюча.Вставить("Источник", ИсточникНовогоНапоминания);
	
	ДобавитьНапоминаниеНаСервере(СтруктураКлюча);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Добавление напоминания'"), ,
		НСтр("ru = 'Выполнено успешно'"),
		БиблиотекаКартинок.МоиПаролиУспешно64);
	
	ОтобразитьНапоминанияНаКлиенте();
	
	ТекстНовогоНапоминания = "";
	
КонецПроцедуры

// Обработчик события нажатия кнопки "СортировкаНапоминанийПоВозрастанию".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СортировкаНапоминанийПоВозрастанию(Команда)
	
	СортировкаНапоминанийПоУбыванию = Ложь;
	ОтобразитьНапоминанияНаКлиенте();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "СортировкаНапоминанийПоУбыванию".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СортировкаНапоминанийПоУбыванию(Команда)
	
	СортировкаНапоминанийПоУбыванию = Истина;
	ОтобразитьНапоминанияНаКлиенте();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "УстановитьОтборПоДатеВНапоминаниях".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура УстановитьОтборПоДатеВНапоминаниях(Команда)
	
	// Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "УстановкаОтбораПоДате");
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, ДоступныеДатыДляВыбораНапоминаний, Элементы.УстановитьОтборПоДатеВНапоминаниях);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "СнятьОтборПоДатеВНапоминаниях".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
//@skip-check invocation-parameter-type-intersect
&НаКлиенте
Процедура СнятьОтборПоДатеВНапоминаниях(Команда)
	
	Элементы.УстановитьОтборПоДатеВНапоминаниях.Картинка = Новый Картинка;
	ОтборПоДатеВНапоминаниях = Дата('00010101');
	ОтобразитьНапоминанияНаКлиенте();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ОткрытьОПрограмме".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОткрытьОПрограмме(Команда)
	
	ОткрытьФорму("Обработка.МоиДоступыИПароли.Форма.ОПродукте", , , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "ВернутьУдаленноеНапоминание".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ВернутьУдаленноеНапоминание(Команда)
	
	МенеджерУдаленногоНапоминанияДляВозврата = МенеджерУдаленногоНапоминания[0].Значение;
	
	ВернутьУдаленноеНапоминаниеНаСервере(
		МенеджерУдаленногоНапоминанияДляВозврата.Описание,
		МенеджерУдаленногоНапоминанияДляВозврата.ВремяСобытия,
		МенеджерУдаленногоНапоминанияДляВозврата.Источник);
	
	МенеджерУдаленногоНапоминания.Удалить(0);
	
	// Напоминания
	ОтобразитьНапоминания();
	
КонецПроцедуры

// Обработчик события нажатия кнопки "НеВозвращатьУдаленноеНапоминание".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура НеВозвращатьУдаленноеНапоминание(Команда)
	
	МенеджерУдаленногоНапоминания.Очистить();
	
	Элементы.ВернутьУдаленноеНапоминание.Видимость      = Ложь;
	Элементы.НеВозвращатьУдаленноеНапоминание.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
//@skip-check property-return-type
//@skip-check invocation-parameter-type-intersect
//@skip-check statement-type-change
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Если это было открытие формы настроек
	Если ДополнительныеПараметры = "Настройки" И РезультатОповещения <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатОповещения);
		
		УстановитьЦвета();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатОповещения);
		ОбновитьНаСервере();
		НастроитьФорму();
		
		Если РезультатОповещения.ОткрытьДругойСтильИнтерфейса Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытьДругойСтильИнтерфейса");
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Закрыть рабочее место и открыть новое окно в стиле ""Современный""?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ОтобразитьНапоминанияНаКлиенте");
		Если ИспользоватьНапоминанияПользователя Тогда
			ПодключитьОбработчикОжидания("ОтобразитьНапоминанияНаКлиенте", 50, Ложь);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ОткрытиеФормыДоступа" Тогда
		
		ТекущаяСтрока = Элементы["МоиПароли"].ТекущаяСтрока;
		ОбновитьНаСервере();
		Элементы["МоиПароли"].ТекущаяСтрока = ТекущаяСтрока;
		
	ИначеЕсли ДополнительныеПараметры = "ВопросУдаленияДоступа" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ТекущиеДанные = Элементы["МоиПароли"].ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено Тогда
				УдалитьДокументДоступа(ТекущиеДанные.Регистратор_ИзРегистраСведений);
				// ЖурналСобытий
				ЗаписатьСобытие(
					ПредопределенноеЗначение("Перечисление.ТипыСобытия.Редактирование"),
					ТекущиеДанные.Регистратор_ИзРегистраСведений,
					ТекущиеДанные.ВидДанных_ИзРегистраСведений);
				// Конец ЖурналСобытий
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ОткрытьДругойСтильИнтерфейса" И РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФорму("Обработка.МоиДоступыИПароли.Форма.Форма_СовременныйСтиль");
		Закрыть();
		
	ИначеЕсли ДополнительныеПараметры = "ИзменениеНапоминания" Тогда
		
		ОтобразитьНапоминанияНаКлиенте();
		
	ИначеЕсли ДополнительныеПараметры = "РедактированиеПоляНапоминания" Тогда
		
		Если НЕ РезультатОповещения = Неопределено Тогда
			ТекстНовогоНапоминания = СокрЛП(РезультатОповещения);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "УстановкаОтбораПоДате" Тогда
		
		Если НЕ РезультатОповещения = Неопределено Тогда
			Элементы.УстановитьОтборПоДатеВНапоминаниях.Картинка = БиблиотекаКартинок.МоиПаролиОтборПрименен;
			ОтборПоДатеВНапоминаниях = РезультатОповещения.Значение;
			ОтобразитьНапоминанияНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииКлиент

&НаКлиенте
Процедура КлассификаторВыборНаКлиенте(Команда, СкрытьНедоступныеКнопки = Истина)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 1);
	
	НайденныеКоманды = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
		Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Ложь;
		Если Команда.Имя = НайденнаяКоманда.КомандаИмя Тогда
			Элементы.ПодменюКлассификаторДанных.Заголовок = НайденнаяКоманда.ЗаголовокКоманды;
			ТекущийОтборКлассДанных = НайденнаяКоманда.КомандаДанные;
		КонецЕсли;
	КонецЦикла;
	
	Элементы[Команда.Имя].Пометка = Истина;
	
	Если СкрытьНедоступныеКнопки Тогда
		СкрытьНедоступныеКнопки(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДанныхВыборНаКлиенте(Команда, СкрытьНедоступныеКнопки = Истина)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 2);
	
	НайденныеКоманды = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
		Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Ложь;
		Если Команда.Имя = НайденнаяКоманда.КомандаИмя Тогда
			Элементы.ПодменюГруппыДанных.Заголовок = НайденнаяКоманда.ЗаголовокКоманды;
			ТекущийОтборГруппаДанных = НайденнаяКоманда.КомандаДанные;
		КонецЕсли;
	КонецЦикла;
	
	Элементы[Команда.Имя].Пометка = Истина;
	
	Если СкрытьНедоступныеКнопки Тогда
		СкрытьНедоступныеКнопки(2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДанныхВыборНаКлиенте(Команда, СкрытьНедоступныеКнопки = Истина)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 3);
	
	НайденныеКоманды = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
		Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Ложь;
		Если Команда.Имя = НайденнаяКоманда.КомандаИмя Тогда
			Элементы.ПодменюВидыДанных.Заголовок = НайденнаяКоманда.ЗаголовокКоманды;
			ТекущийОтборВидДанных = НайденнаяКоманда.КомандаДанные;
		КонецЕсли;
	КонецЦикла;
	
	Элементы[Команда.Имя].Пометка = Истина;
	
	Если СкрытьНедоступныеКнопки Тогда
		СкрытьНедоступныеКнопки(3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДанныхВыборНаКлиенте(Команда, СкрытьНедоступныеКнопки = Истина)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", 4);
	
	НайденныеКоманды = СоответствиеКоманд.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяКоманда Из НайденныеКоманды Цикл
		Элементы[НайденнаяКоманда.КомандаИмя].Пометка = Ложь;
		Если Команда.Имя = НайденнаяКоманда.КомандаИмя Тогда
			Элементы.ПодменюСтатусДанных.Заголовок = НайденнаяКоманда.ЗаголовокКоманды;
			ТекущийОтборСтатусДанных = НайденнаяКоманда.КомандаДанные;
		КонецЕсли;
	КонецЦикла;
	
	Элементы[Команда.Имя].Пометка = Истина;
	
	Если СкрытьНедоступныеКнопки Тогда
		СкрытьНедоступныеКнопки(4);
	КонецЕсли;
	
КонецПроцедуры

// Скопировать в буфер обмена на клиенте.
// 
// Параметры:
//  Значение - Строка - Значение
&НаКлиенте
Асинх Процедура СкопироватьВБуферОбменаНаКлиенте(Значение)
	
	РезультатКопирования = Ждать ПоместитьТекстВБуфераОбмена(Строка(Значение));
	
	Если РезультатКопирования Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Буфер обмена'"), , НСтр("ru = 'Значение скопировано'"), БиблиотекаКартинок.МоиПаролиУспешно64);
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Буфер обмена'"), , НСтр("ru = 'Не удалось скопировать значение'"), БиблиотекаКартинок.МоиПаролиНеуспешно64);
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Асинх Функция ПоместитьТекстВБуфераОбмена(Текст)
	
	Если СредстваБуфераОбмена.ИспользованиеДоступно() Тогда
		ФорматДанных = СтандартныйФорматДанныхБуфераОбмена.Текст;
		Если Ждать СредстваБуфераОбмена.ПоддерживаетсяФорматДанных(ФорматДанных) Тогда
			ПомещаемыеДанные = Новый ЭлементБуфераОбмена(ФорматДанных, Текст);
			Возврат Ждать СредстваБуфераОбмена.ПоместитьДанныеАсинх(ПомещаемыеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область Напоминания

&НаКлиенте
Процедура ОтобразитьНапоминанияНаКлиенте()
	
	ОтобразитьНапоминания();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСервер

#Область СпискиВыбораОтборов

&НаСервере
Процедура ЗаполнитьСпискиВыбораОтборов()
	
	Для Каждого УдаляемаяКоманда Из СоответствиеКоманд Цикл
		Команды.Удалить(Команды.Найти(УдаляемаяКоманда.КомандаИмя));
		Элементы.Удалить(Элементы.Найти(УдаляемаяКоманда.КомандаИмя));
	КонецЦикла;
	СоответствиеКоманд.Очистить();
	
	МоиПаролиСервер.ЗаполнитьСоответствиеКлассификацииДанных(ЭтотОбъект);
	МоиПаролиСервер.ДобавитьКомандыСписковВыборкаОтборов(ЭтотОбъект);
	МоиПаролиСервер.ДобавитьКнопкиСписковВыборкаОтборов(ЭтотОбъект);
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкрытьНедоступныеКнопки(Знач НомерГруппы)
	
	МоиПаролиСервер.СкрытьНедоступныеКнопки(ЭтотОбъект, НомерГруппы);
	
	ОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

//@skip-check property-return-type
//@skip-check statement-type-change
//@skip-check invocation-parameter-type-intersect
&НаСервере
Процедура ОбновитьНаСервере()
	
	ТаблицаНаФорме = Элементы.Найти("МоиПароли");
	Если НЕ ТаблицаНаФорме = Неопределено Тогда
		Элементы.Удалить(ТаблицаНаФорме);
		УдаляемыеЭлементы = Новый Массив; // Массив из Строка
		УдаляемыеЭлементы.Добавить("МоиПароли");
		ИзменитьРеквизиты(, УдаляемыеЭлементы);
		СоответствиеКолонок.Очистить();
	КонецЕсли;
	
	МассивОтборов = Новый Массив; // Массив из Строка
	МассивОтбораСвойстваВидаДанных = Новый Массив; // Массив из Строка
	Если НЕ ТекущийОтборВидДанных.Пустая() Тогда
		МассивОтборов.Добавить("ВидДанных = &ВидДанных");
		МассивОтбораСвойстваВидаДанных.Добавить("ВидыДанныхСвойстваВидаДанных.Ссылка = &ВидДанных");
	КонецЕсли;
	Если НЕ ТекущийОтборКлассДанных.Пустая() Тогда
		МассивОтборов.Добавить("КлассДанных = &КлассДанных");
	КонецЕсли;
	Если НЕ ТекущийОтборГруппаДанных.Пустая() Тогда
		МассивОтборов.Добавить("ГруппаДанных = &ГруппаДанных");
	КонецЕсли;
	Если НЕ ТекущийОтборСтатусДанных.Пустая() Тогда
		МассивОтборов.Добавить("СтатусДанных = &СтатусДанных");
	КонецЕсли;
	Если НЕ МассивОтборов.Количество() Тогда
		МассивОтборов.Добавить("Истина");
	КонецЕсли;
	СтрокаОтбора = СтрСоединить(МассивОтборов, " И ");
	Если НЕ МассивОтбораСвойстваВидаДанных.Количество() Тогда
		МассивОтбораСвойстваВидаДанных.Добавить("Истина");
	КонецЕсли;
	СтрокаОтбораСвойстваВидаДанных = СтрСоединить(МассивОтбораСвойстваВидаДанных, " И ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДанныхСвойстваВидаДанных.Свойство КАК Свойство,
		|	МАКСИМУМ(ВидыДанныхСвойстваВидаДанных.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ втПорядокСвойств
		|ИЗ
		|	Справочник.ВидыДанных.СвойстваВидаДанных КАК ВидыДанныхСвойстваВидаДанных
		|ГДЕ
		|	НЕ ВидыДанныхСвойстваВидаДанных.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыДанныхСвойстваВидаДанных.Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоступПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	МИНИМУМ(ДоступПрисоединенныеФайлы.НомерСтроки - 1) КАК КоличествоФайлов
		|ПОМЕСТИТЬ втПрисоединенныеФайлы
		|ИЗ
		|	Документ.ЭкземплярДоступа.ПрисоединенныеФайлы КАК ДоступПрисоединенныеФайлы
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступПрисоединенныеФайлы.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МоиПароли.ВидДанных КАК ВидДанных_ИзРегистраСведений,
		|	МоиПароли.Регистратор КАК Регистратор_ИзРегистраСведений,
		|	ЕСТЬNULL(втПрисоединенныеФайлы.КоличествоФайлов, 1) КАК Регистратор_КоличествоФайлов,
		|	МоиПароли.Свойство КАК Свойство,
		|	МоиПароли.Свойство.Представление КАК СвойствоПредставление,
		|	МоиПароли.Свойство.ТипЗначения КАК СвойствоТипЗначения,
		|	МоиПароли.Свойство.Предопределенный КАК СвойствоПредопределенный,
		|	МоиПароли.Свойство.ИмяПредопределенныхДанных КАК СвойствоИмяПредопределенныхДанных,
		|	МоиПароли.Значение КАК Значение,
		|	МоиПароли.СтатусДанных КАК СтатусДанных_ИзРегистраСведений,
		|	МоиПароли.Комментарий КАК Комментарий_ИзРегистраСведений,
		|	МоиПароли.ДатаИзменения КАК ДатаИзменения_ИзРегистраСведений,
		|	ЕСТЬNULL(ПорядокСвойств.НомерСтроки, 0) КАК Порядок
		|ИЗ
		|	РегистрСведений.МоиПароли КАК МоиПароли
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокСвойств КАК ПорядокСвойств
		|		ПО МоиПароли.Свойство = ПорядокСвойств.Свойство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
		|		ПО МоиПароли.Регистратор = втПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	&Отбор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДанных_ИзРегистраСведений,
		|	Порядок,
		|	ДатаИзменения_ИзРегистраСведений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДанныхСвойстваВидаДанных.Ссылка КАК Ссылка,
		|	ВидыДанныхСвойстваВидаДанных.Свойство КАК Свойство,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.ТипЗначения КАК ТипЗначения,
		|	ВидыДанныхСвойстваВидаДанных.Свойство.РежимПароля КАК РежимПароля,
		|	ВидыДанныхСвойстваВидаДанных.Отображать КАК Отображать
		|ИЗ
		|	Справочник.ВидыДанных.СвойстваВидаДанных КАК ВидыДанныхСвойстваВидаДанных
		|ГДЕ
		|	&СвойстваВидаДанных
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыДанныхСвойстваВидаДанных.НомерСтроки";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвойстваВидаДанных", СтрокаОтбораСвойстваВидаДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", СтрокаОтбора);
	Запрос.УстановитьПараметр("ВидДанных",     ТекущийОтборВидДанных);
	Запрос.УстановитьПараметр("КлассДанных", ТекущийОтборКлассДанных);
	Запрос.УстановитьПараметр("ГруппаДанных",  ТекущийОтборГруппаДанных);
	Запрос.УстановитьПараметр("СтатусДанных",  ТекущийОтборСтатусДанных);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[2].Выбрать();
	СвойстваВидаДанных = РезультатЗапроса[3].Выбрать();
	СвойстваВидаДанных.Следующий();
	
	Итератор = 1;
	
	МоиПароли = Новый ТаблицаЗначений;
	МоиПароли.Колонки.Добавить("Регистратор_КоличествоФайлов",    Новый ОписаниеТипов("Число"),                            НСтр("ru = 'Количество файлов'"));
	МоиПароли.Колонки.Добавить("СтатусДанных_ИзРегистраСведений", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДанных"), НСтр("ru = 'Статус данных'"));
	МоиПароли.Колонки.Добавить("ВидДанных_ИзРегистраСведений",    Новый ОписаниеТипов("СправочникСсылка.ВидыДанных"),      НСтр("ru = 'Вид данных'"));
	МоиПароли.Колонки.Добавить("Регистратор_ИзРегистраСведений",  Новый ОписаниеТипов("ДокументСсылка.ЭкземплярДоступа"),  НСтр("ru = 'Регистратор'"));
	
	КолонкаСтатуса = "";
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваВидаДанных.Сбросить();
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Ссылка", Выборка.ВидДанных_ИзРегистраСведений);
		СтруктураПоиска.Вставить("Свойство", Выборка.Свойство);
		ИспользуетсяДляВидаДанных = СвойстваВидаДанных.НайтиСледующий(СтруктураПоиска);
		
		Если НЕ (ИспользуетсяДляВидаДанных И СвойстваВидаДанных.Отображать) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Свойство", Выборка.Свойство);
		НайденныеСтроки = СоответствиеКолонок.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			ИмяКолонки = НайденныеСтроки[0].ИмяКолонки;
		Иначе
			ИмяКолонки = "КолонкаМоиПароли" + Итератор;
			МоиПароли.Колонки.Добавить(ИмяКолонки, Выборка.СвойствоТипЗначения, Выборка.СвойствоПредставление);
			НоваяСтрока = СоответствиеКолонок.Добавить();
			НоваяСтрока.ИмяКолонки = ИмяКолонки;
			НоваяСтрока.Свойство = Выборка.Свойство;
			НоваяСтрока.ЗаголовокКолонки = Выборка.СвойствоПредставление;
			
			ИмяКолонкиИспользование = ИмяКолонки + "ИспользованиеДляВидаДанных";
			МоиПароли.Колонки.Добавить(ИмяКолонкиИспользование, Новый ОписаниеТипов("Булево"), Выборка.СвойствоПредставление + Символы.НПП + НСтр("ru = '(использование для вида данных)'"));
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Регистратор_ИзРегистраСведений", Выборка.Регистратор_ИзРегистраСведений);
		НайденныеСтрокиРегистратора = МоиПароли.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтрокиРегистратора.Количество() Тогда
			НоваяСтрока = НайденныеСтрокиРегистратора[0];
		Иначе
			НоваяСтрока = МоиПароли.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "ВидДанных_ИзРегистраСведений, Регистратор_ИзРегистраСведений, Регистратор_КоличествоФайлов, СтатусДанных_ИзРегистраСведений");
		КонецЕсли;
		
		Итератор = Итератор + 1;
		
		НоваяСтрока[ИмяКолонкиИспользование] = НоваяСтрока[ИмяКолонкиИспользование] ИЛИ (ИспользуетсяДляВидаДанных И СвойстваВидаДанных.Отображать);
		
		Если НЕ НоваяСтрока[ИмяКолонкиИспользование] Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.СвойствоПредопределенный И Выборка.СвойствоИмяПредопределенныхДанных = "СтатусДанных_ИзРегистраСведений" Тогда
			КолонкаСтатуса = ИмяКолонки;
		КонецЕсли;
		
		Если ИспользуетсяДляВидаДанных Тогда
			НоваяСтрока[ИмяКолонки] = Выборка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Описание таблицы значений как реквизита
	МассивТипа = Новый Массив; // Массив из ОписаниеТипов
	МассивТипа.Добавить(Тип("ТаблицаЗначений"));
	
	// Добавление ТаблицыЗначений в массив реквизитов
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипа);
	МассивРеквизитовФормы = Новый Массив; // Массив из РеквизитФормы
	МассивРеквизитовФормы.Добавить(Новый РеквизитФормы("МоиПароли", ОписаниеТипа, "", НСтр("ru = 'Мои пароли'")));
	
	// Добавление в массив реквизитов колонок таблицы значений
	Для Каждого Колонка Из МоиПароли.Колонки Цикл
		НовыйРеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "МоиПароли");
		НовыйРеквизитФормы.СохраняемыеДанные = Истина;
		МассивРеквизитовФормы.Добавить(НовыйРеквизитФормы);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитовФормы);
	
	// Добавление таблицы значений на форму
	ТаблицаПолейВыбора = Элементы.Добавить("МоиПароли", Тип("ТаблицаФормы"), Элементы.ГруппаСписокПаролей);
	ТаблицаПолейВыбора.ПутьКДанным = "МоиПароли";
	ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;
	ТаблицаПолейВыбора.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТаблицаПолейВыбора.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Верх;
	ТаблицаПолейВыбора.ТолькоПросмотр = Истина;
	
	Для Каждого Колонка Из МоиПароли.Колонки Цикл
		
		Если СтрНайти(Колонка.Имя, "Регистратор_ИзРегистраСведений") ИЛИ СтрНайти(Колонка.Имя, "ИспользованиеДляВидаДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), ТаблицаПолейВыбора);
		НовыйЭлемент.ПутьКДанным = "МоиПароли." + Колонка.Имя;
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		
		Если СтрНайти(Колонка.Имя, "Регистратор_КоличествоФайлов") Тогда
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
			НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.МоиПаролиПрикрепить;
			НовыйЭлемент.КартинкаЗначений = БиблиотекаКартинок.МоиПаролиПрикрепить;
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Иначе
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Ширина = 15;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяКолонки", Колонка.Имя);
		
		НайденныеСтроки = СоответствиеКолонок.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			
			СвойстваВидаДанных.Сбросить();
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Свойство", НайденныеСтроки[0].Свойство);
			
			Если СвойстваВидаДанных.НайтиСледующий(СтруктураПоиска) Тогда
				НовыйЭлемент.РежимПароля = СвойстваВидаДанных.РежимПароля;
				Если СвойстваВидаДанных.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
				КонецЕсли;
			Иначе
				Элементы.Удалить(НовыйЭлемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Элементы.Найти(КолонкаСтатуса) = Неопределено Тогда
		Элементы[КолонкаСтатуса].ЦветТекста = WebЦвета.КоролевскиГолубой;
		Элементы[КолонкаСтатуса].Шрифт = ШрифтыСтиля.ШрифтПодчеркнутый;
	КонецЕсли;
	
	// Передача таблицы значений в реквизит формы
	//@skip-check wrong-string-literal-content
	ЗначениеВРеквизитФормы(МоиПароли, "МоиПароли");
	
	ТаблицаПолейВыбора.УстановитьДействие("Выбор","Подключаемый_МоиПаролиВыбор");
	
	// Раскраска формы
	Если ТекущийОтборКлассДанных = ПредопределенноеЗначение("Перечисление.КлассыДанных.Личное") Тогда
		Цвет = ЦветаСтиля.ЦветТекстаЛичноеКлассыДанных;
	ИначеЕсли ТекущийОтборКлассДанных = ПредопределенноеЗначение("Перечисление.КлассыДанных.Работа") Тогда
		Цвет = ЦветаСтиля.ЦветТекстаРаботаКлассыДанных;
	Иначе
		Цвет = ЦветаСтиля.ЦветДополнительнойНавигацииМоиПароли;
	КонецЕсли;
	Элементы.ГруппаПанельВерх.ЦветФона = Цвет;
	Для Каждого ПодчиненныйЭлемент Из Элементы["МоиПароли"].ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.ЦветФонаЗаголовка = Цвет;
	КонецЦикла;
	
	Элементы.ПодменюКлассификаторДанных.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКлассыДанных");
	Элементы.ПодменюГруппыДанных       .Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДанных");
	
	// Напоминания
	ОтобразитьНапоминания();
	Элементы.Переместить(Элементы.СтраницыНапоминания, ЭтотОбъект);
	
КонецПроцедуры

// Производит настройку условного оформления формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// очищаем все настройки условного оформления
	УсловноеОформление.Элементы.Очистить();
	
	// Недоступные свойства для вида данных
	Для Каждого ЭлементСоответствия Из СоответствиеКолонок Цикл
		
		ИмяФлага = ЭлементСоответствия.ИмяКолонки + "ИспользованиеДляВидаДанных";
		Если Элементы.Найти(ИмяФлага) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементСоответствия.ИмяКолонки);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяФлага);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый);
		
	КонецЦикла;
	
КонецПроцедуры

// Удалить документ доступа.
// 
// Параметры:
//  Документ - ДокументСсылка.ЭкземплярДоступа - Документ
&НаСервере
Процедура УдалитьДокументДоступа(Знач Документ)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭкземплярДоступа");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ);
		Блокировка.Заблокировать();
		
		РегистраторОбъект = Документ.ПолучитьОбъект();
		Если РегистраторОбъект.СтатусДанных = Перечисления.СтатусыДанных.Актуальный Тогда
			РегистраторОбъект.УстановитьПометкуУдаления(Истина);
		Иначе
			РегистраторОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		РегистраторОбъект.Прочитать();
		РегистраторОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		//@skip-check object-deprecated
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Не удалось пометить на удаление документ-регистратор %1 по причине: %2'"), Документ, ОписаниеОшибки);
		Сообщение.Сообщить();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление доступа'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			РегистраторОбъект.Ссылка.Метаданные(),
			РегистраторОбъект.Ссылка,
			Сообщение.Текст);
			
	КонецПопытки;
	
	ОбновитьНаСервере();
	
КонецПроцедуры

// Статус документа доступа.
// 
// Параметры:
//  ДокументДоступа - ДокументСсылка.ЭкземплярДоступа - Документ доступа
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусДанных -  Статус документа доступа
//@skip-check property-return-type
//@skip-check statement-type-change
&НаСервереБезКонтекста
Функция СтатусДокументаДоступа(Знач ДокументДоступа)
	
	Результат = Перечисления.СтатусыДанных.Актуальный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭкземплярДоступа.СтатусДанных КАК СтатусДанных
		|ИЗ
		|	Документ.ЭкземплярДоступа КАК ЭкземплярДоступа
		|ГДЕ
		|	ЭкземплярДоступа.Ссылка = &ДокументДоступа";
	Запрос.УстановитьПараметр("ДокументДоступа", ДокументДоступа);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СтатусДанных;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//@skip-check statement-type-change
&НаСервере
Процедура УстановитьЦвета()
	
	ЦветФонаНапоминания         = Константы.ЦветФонаНапоминания.Получить().Получить();
	ЦветФонаНапоминанияДобавить = Константы.ЦветФонаНапоминанияДобавить.Получить().Получить();
	
	Если НЕ ЗначениеЗаполнено(ЦветФонаНапоминания) Тогда
		ЦветФонаНапоминания = ЦветаСтиля.ЦветФонаНапоминания;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦветФонаНапоминанияДобавить) Тогда
		ЦветФонаНапоминанияДобавить = ЦветаСтиля.ЦветФонаНапоминанияДобавить;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	ПоложениеНапоминаний = МоиПаролиВызовСервера.ПолучитьЗначениеКонстантыПоИмени("ПоложениеНапоминанийНаФормеРабочегоМеста");
	Если ПоложениеНапоминаний = 0 Тогда
		Элементы.Переместить(Элементы.СтраницыНапоминания, ЭтотОбъект);
	Иначе
		Элементы.Переместить(Элементы.СтраницыНапоминания, ЭтотОбъект, Элементы.ГруппаПароли);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаписатьСобытие

// Записать событие.
// 
// Параметры:
//  ТипСобытия - ПеречислениеСсылка.ТипСобытия -  Тип события
//  Доступ - ДокументСсылка.ЭкземплярДоступа - Доступ
//  ВидДанных - СправочникСсылка.ВидыДанных - Вид данных
//  Свойство - Неопределено, ПланВидовХарактеристикСсылка.СвойстваВидовДанных -  Свойство
//@skip-check property-return-type
&НаСервереБезКонтекста
Процедура ЗаписатьСобытие(Знач ТипСобытия, Знач Доступ, Знач ВидДанных, Знач Свойство = Неопределено)
	
	// ЖурналСобытий
	СтруктураСобытия = РегистрыСведений.ЖурналСобытий.СтруктураСобытия();
	СтруктураСобытия.ТипСобытия = ТипСобытия;
	СтруктураСобытия.ЭкземплярДоступа = Доступ;
	СтруктураСобытия.ВидДанных = ВидДанных;
	СтруктураСобытия.Свойство = Свойство;
	РегистрыСведений.ЖурналСобытий.ЗаписатьСобытие(СтруктураСобытия);
	// Конец ЖурналСобытий
	
КонецПроцедуры

#КонецОбласти

#Область Напоминания

&НаСервере
Процедура ОтобразитьНапоминания()
	
	ИспользоватьНапоминанияПользователя = Константы.ИспользоватьНапоминанияПользователя.Получить();
	Элементы.СтраницыНапоминания.Видимость = ИспользоватьНапоминанияПользователя;
	Если НЕ ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	ЦветФонаНапоминанияИспользоватьИзГруппыДанных = Константы.ЦветФонаНапоминанияИспользоватьИзГруппыДанных.Получить();
	
	Элементы.ГруппаДобавитьНапоминание.ЦветФона            = ЦветФонаНапоминанияДобавить;
	Элементы.ГруппаДобавитьНапоминаниеВерхНиз.ЦветФона     = ЦветФонаНапоминанияДобавить;
	Элементы.ГруппаУправлениеНапоминаниями.ЦветФона        = ЦветФонаНапоминанияДобавить;
	Элементы.ГруппаУправлениеНапоминаниямиВерхНиз.ЦветФона = ЦветФонаНапоминанияДобавить;
	
	УдалениеСозданныхДанныхФормы_Напоминания();
	
	Итератор = 1;
	
	ЗаполнитьТаблицу_Напоминания();
	
	СформироватьИнтерфейс_Напоминания();
	
	МенеджерУдаленногоНапоминанияЗаполнен = МенеджерУдаленногоНапоминания.Количество();
	Элементы.ВернутьУдаленноеНапоминание.Видимость      = МенеджерУдаленногоНапоминанияЗаполнен;
	Элементы.НеВозвращатьУдаленноеНапоминание.Видимость = МенеджерУдаленногоНапоминанияЗаполнен;
	
КонецПроцедуры

&НаСервере
Процедура УдалениеСозданныхДанныхФормы_Напоминания()
	
	Если Элементы.Найти("ГруппаМоиНапоминания") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Напоминание Из МоиНапоминания Цикл
		Если ЗначениеЗаполнено(Напоминание.Номергруппы) Тогда
			Команды.Удалить(Команды.Найти("НапоминаниеИзменить" + Напоминание.НомерГруппы));
			Команды.Удалить(Команды.Найти("НапоминаниеУдалить" + Напоминание.НомерГруппы));
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Удалить(Элементы.Найти("ГруппаМоиНапоминания"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицу_Напоминания()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НапоминанияПользователя.Пользователь КАК Пользователь,
		|	НапоминанияПользователя.ВремяСобытия КАК ВремяСобытия,
		|	НапоминанияПользователя.Источник КАК Источник,
		|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
		|	НапоминанияПользователя.Описание КАК Описание
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокНапоминания";
	
	Если СортировкаНапоминанийПоУбыванию Тогда
		Запрос.Текст = СтрШаблон("%1 УБЫВ", Запрос.Текст);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеПоискаНапоминаний) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (Описание ПОДОБНО &Описание ИЛИ Источник.Наименование ПОДОБНО &Описание) И ");
		Запрос.УстановитьПараметр("Описание", "%" + ПолеПоискаНапоминаний + "%");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	
	МоиНапоминания.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//@skip-check invocation-parameter-type-intersect
//@skip-check typed-value-adding-to-untyped-collection
//@skip-check variable-value-type
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура СформироватьИнтерфейс_Напоминания(ДополнительныеПараметры = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыДанных.Ссылка КАК Ссылка,
		|	ГруппыДанных.Цвет КАК Цвет
		|ИЗ
		|	Справочник.ГруппыДанных КАК ГруппыДанных
		|ГДЕ
		|	НЕ ГруппыДанных.ПометкаУдаления";
	ВыборкаЦветовГруппДанных = Запрос.Выполнить().Выбрать();
	
	ДоступныеДатыДляВыбораНапоминаний.Очистить();
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	// Формирование реквизитов формы
	ГруппаМоиНапоминанияОбщая = Элементы.Добавить("ГруппаМоиНапоминания", Тип("ГруппаФормы"), Элементы.СтраницаНапоминания);
	ГруппаМоиНапоминанияОбщая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаМоиНапоминанияОбщая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаМоиНапоминанияОбщая.ОтображатьЗаголовок = Ложь;
	
	МесяцНапоминания  = Дата('00010101');
	ДеньНапоминания   = Дата('00010101');
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Для Каждого Напоминание Из МоиНапоминания Цикл
		
		МесяцТекущегоНапоминания = НачалоМесяца(Напоминание.СрокНапоминания);
		ДеньТекущегоНапоминания  = НачалоДня(Напоминание.СрокНапоминания);
		
		Если НЕ МесяцНапоминания = МесяцТекущегоНапоминания Тогда
			
			ФорматДаты = "ДФ='ММММ'";
			
			Если НЕ НачалоГода(Напоминание.СрокНапоминания) = НачалоГода(ТекущаяДатаСеанса) Тогда
				ФорматДаты = "ДФ='ММММ гггг'";
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОтборПоДатеВНапоминаниях) ИЛИ МесяцТекущегоНапоминания = НачалоМесяца(ОтборПоДатеВНапоминаниях) Тогда
				
				НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеДатаМесяц" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаМоиНапоминанияОбщая);
				НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
				НовыйЭлемент.Заголовок = Формат(МесяцТекущегоНапоминания, ФорматДаты);
				НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH2;
				НовыйЭлемент.ЦветТекста = ЦветФонаНапоминанияДобавить;
				НовыйЭлемент.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
				НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
			МесяцНапоминания = МесяцТекущегоНапоминания;
			
		КонецЕсли;
		
		Если НЕ ДеньНапоминания = ДеньТекущегоНапоминания Тогда
			
			ФорматДаты = "ДФ='дд ММММ'";
			Если ДеньТекущегоНапоминания > КонецГода(ТекущаяДатаСеанса) ИЛИ ДеньТекущегоНапоминания < НачалоГода(ТекущаяДатаСеанса) Тогда
				ФорматДаты = "ДФ='дд ММММ гггг'";
			ИначеЕсли ДеньТекущегоНапоминания = НачалоДня(ТекущаяДатаСеанса) Тогда
				ФорматДаты = "ДФ='""Сегодня""'";
			ИначеЕсли ДеньТекущегоНапоминания = НачалоДня(НачалоДня(ТекущаяДатаСеанса) - 1) Тогда
				ФорматДаты = "ДФ='""Вчера""'";
			ИначеЕсли ДеньТекущегоНапоминания = КонецДня(ТекущаяДатаСеанса) + 1 Тогда
				ФорматДаты = "ДФ='""Завтра""'";
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОтборПоДатеВНапоминаниях) ИЛИ ДеньТекущегоНапоминания = ОтборПоДатеВНапоминаниях Тогда
				
				ГруппаДекорацииНапоминания = Элементы.Добавить("ГруппаДекорацииНапоминания" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаМоиНапоминанияОбщая);
				ГруппаДекорацииНапоминания.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаДекорацииНапоминания.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ГруппаДекорацииНапоминания.ОтображатьЗаголовок = Ложь;
				ГруппаДекорацииНапоминания.РастягиватьПоГоризонтали = Истина;
				
				НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеДатаДень" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаДекорацииНапоминания);
				НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
				НовыйЭлемент.Заголовок = Формат(ДеньТекущегоНапоминания, ФорматДаты);
				НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH3;
				НовыйЭлемент.ЦветТекста = ЦветФонаНапоминанияДобавить;
				НовыйЭлемент.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
				НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
				
				НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеДатаДеньНедели" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаДекорацииНапоминания);
				НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
				НовыйЭлемент.Заголовок = Формат(ДеньТекущегоНапоминания, "ДФ=дддд");
				НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH3;
				НовыйЭлемент.ЦветТекста = ЦветФонаНапоминанияДобавить;
				НовыйЭлемент.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
				НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
				НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
				
			КонецЕсли;
			
			ДоступныеДатыДляВыбораНапоминаний.Добавить(ДеньТекущегоНапоминания, СтрШаблон("%1     ", Формат(ДеньТекущегоНапоминания, ФорматДаты)));
			
			ДеньНапоминания = ДеньТекущегоНапоминания;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтборПоДатеВНапоминаниях) ИЛИ ДеньТекущегоНапоминания = ОтборПоДатеВНапоминаниях Тогда
			
			Если ЦветФонаНапоминанияИспользоватьИзГруппыДанных Тогда
				ВыборкаЦветовГруппДанных.Сбросить();
				Если ВыборкаЦветовГруппДанных.НайтиСледующий(Напоминание.Источник, "Ссылка") Тогда
					ТекущийЦветФонаНапоминания = ВыборкаЦветовГруппДанных.Цвет.Получить();
					Если НЕ ЗначениеЗаполнено(ТекущийЦветФонаНапоминания) Тогда
						ТекущийЦветФонаНапоминания = ЦветФонаНапоминания;
					КонецЕсли;
				Иначе
					ТекущийЦветФонаНапоминания = ЦветФонаНапоминания;
				КонецЕсли;
			Иначе
				ТекущийЦветФонаНапоминания = ЦветФонаНапоминания;
			КонецЕсли;
			
			ДобавитьНапоминаниеВИнтерфейс(Напоминание, ГруппаМоиНапоминанияОбщая, ТекущийЦветФонаНапоминания);
			
			Напоминание.НомерГруппы = Итератор;
			
		КонецЕсли;
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
КонецПроцедуры

//@skip-check statement-type-change
&НаСервере
Процедура ДобавитьНапоминаниеВИнтерфейс(Напоминание, ГруппаМоиНапоминанияОбщая, ТекущийЦветФонаНапоминания, ДополнительныеПараметры = Неопределено)
	
	ГруппаНапоминание = Элементы.Добавить("ГруппаНапоминания" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаМоиНапоминанияОбщая);
	ГруппаНапоминание.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНапоминание.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаНапоминание.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	ГруппаНапоминание.ОтображатьЗаголовок = Ложь;
	ГруппаНапоминание.ЦветФона = ТекущийЦветФонаНапоминания;
	
	// Дата и время напоминания
	ФорматДаты = "ДФ='дд ММММ ""в"" ЧЧ:мм'";
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	НачалоДняНапоминание = НачалоДня(Напоминание.СрокНапоминания);
	РазницаТекущегоВремениИСрока = Окр((Напоминание.СрокНапоминания - ТекущаяДатаСеанса) / 60, 0);
	Если РазницаТекущегоВремениИСрока > 1 И РазницаТекущегоВремениИСрока < 60 Тогда
		//@skip-check object-deprecated
		ФорматДаты = СтрШаблон("ДФ='""через %1""'",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(РазницаТекущегоВремениИСрока, "минуту,минуты,минут"));
	ИначеЕсли РазницаТекущегоВремениИСрока >= -1 И РазницаТекущегоВремениИСрока <= 1 Тогда
		ФорматДаты = "ДФ='""сейчас""'";
	ИначеЕсли РазницаТекущегоВремениИСрока > -60 И РазницаТекущегоВремениИСрока < -1 Тогда
		//@skip-check object-deprecated
		ФорматДаты = СтрШаблон("ДФ='""просрочено на %1""'",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(-РазницаТекущегоВремениИСрока, "минуту,минуты,минут"));
	ИначеЕсли НачалоДняНапоминание = НачалоДня(ТекущаяДатаСеанса) Тогда
		ФорматДаты = "ДФ='""сегодня в"" ЧЧ:мм'";
	ИначеЕсли НачалоДняНапоминание = НачалоДня(НачалоДня(ТекущаяДатаСеанса) - 1) Тогда
		ФорматДаты = "ДФ='""вчера в"" ЧЧ:мм'";
	ИначеЕсли НачалоДняНапоминание = КонецДня(ТекущаяДатаСеанса) + 1 Тогда
		ФорматДаты = "ДФ='""завтра в"" ЧЧ:мм'";
	КонецЕсли;
	
	// Цвет текста
	ЦветТекста = WebЦвета.Черный;
	Если Напоминание.СрокНапоминания < ТекущаяДатаСеанса Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
	КонецЕсли;
	
	// Источник
	ГруппаШапкаНапоминаниеГруппа = Неопределено;
	Если ЗначениеЗаполнено(Напоминание.Источник) Тогда
		
		ГруппаШапкаНапоминаниеГруппа = Элементы.Добавить("ГруппаШапкаНапоминаниеГруппа" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаНапоминание);
		ГруппаШапкаНапоминаниеГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаШапкаНапоминаниеГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаШапкаНапоминаниеГруппа.ОтображатьЗаголовок = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеИсточник" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаШапкаНапоминаниеГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = Строка(Напоминание.Источник);
		НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтH4;
		НовыйЭлемент.ЦветТекста = ЦветТекста;
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		
	КонецЕсли;
	
	// Дата и команды
	ГруппаШапкаНапоминание = Элементы.Добавить("ГруппаШапкаНапоминание" + Формат(Итератор, "ЧГ=0"), Тип("ГруппаФормы"), ГруппаНапоминание);
	ГруппаШапкаНапоминание.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШапкаНапоминание.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаШапкаНапоминание.ОтображатьЗаголовок = Ложь;
	
	// Дата и время
	НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеДата" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаШапкаНапоминание);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = Формат(Напоминание.СрокНапоминания, ФорматДаты);
	НовыйЭлемент.Шрифт = ШрифтыСтиля.ШрифтКурсивный;
	НовыйЭлемент.ЦветТекста = ЦветТекста;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
	// Определение группы кнопок
	Если ГруппаШапкаНапоминаниеГруппа = Неопределено Тогда
		ГруппаДляКнопок = ГруппаШапкаНапоминание;
	Иначе
		ГруппаДляКнопок = ГруппаШапкаНапоминаниеГруппа;
	КонецЕсли;
	
	// Команда "Изменить"
	НоваяКоманда = Команды.Добавить("НапоминаниеИзменить" + Формат(Итератор, "ЧГ=0"));
	НоваяКоманда.Действие = "НапоминаниеИзменить";
	НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиИзменить;
	НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
	НоваяКоманда.Подсказка = НСтр("ru = 'Изменить напоминание'");
	
	НовыйЭлемент = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаДляКнопок);
	НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
	НовыйЭлемент.Ширина = 4;
	НовыйЭлемент.Фигура = ФигураКнопки.Овал;
	
	// Команда "Удалить"
	НоваяКоманда = Команды.Добавить("НапоминаниеУдалить" + Формат(Итератор, "ЧГ=0"));
	НоваяКоманда.Действие = "НапоминениеУдалить";
	НоваяКоманда.Картинка = БиблиотекаКартинок.МоиПаролиУдалить;
	НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
	НоваяКоманда.Подсказка = НСтр("ru = 'Удалить напоминание'");
	
	НовыйЭлемент = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаДляКнопок);
	НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
	НовыйЭлемент.Ширина = 4;
	НовыйЭлемент.Фигура = ФигураКнопки.Овал;
	
	ГруппаДляКнопок.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	// Напоминание
	НовыйЭлемент = Элементы.Добавить("ДекорацияНапоминаниеОписание" + Формат(Итератор, "ЧГ=0"), Тип("ДекорацияФормы"), ГруппаНапоминание);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = Напоминание.Описание;
	НовыйЭлемент.ЦветТекста = ЦветТекста;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьКлючЗаписиРегистраСведений(Знач СтруктураКлюча)
	
	КлючЗаписи = РегистрыСведений.НапоминанияПользователя.СоздатьКлючЗаписи(СтруктураКлюча);
	
	Возврат КлючЗаписи;
	
КонецФункции

&НаСервере
Процедура УдалитьЗаписьРегистраСведений(Знач СтруктураКлюча)
	
	МенеджерЗаписи = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураКлюча);
	МенеджерЗаписи.Прочитать();
	
	СтруктураМенеджера = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураКлюча);
	СтруктураМенеджера.Вставить("Описание", МенеджерЗаписи.Описание);
	МенеджерУдаленногоНапоминания.Вставить(0, СтруктураМенеджера);
	
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьНапоминаниеНаСервере(Знач СтруктураКлюча)
	
	НапоминанияПользователя.УстановитьНапоминание(СтруктураКлюча.Текст, СтруктураКлюча.ВремяСобытия, , СтруктураКлюча.Источник);
	
КонецПроцедуры

//@skip-check invocation-parameter-type-intersect
&НаСервереБезКонтекста
Функция ПолеПоискаНапоминанияАвтоПодборНаСервере(Знач Текст)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НапоминанияПользователя.Описание КАК Данные
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.Пользователь = &Пользователь
		|	И НапоминанияПользователя.Описание ПОДОБНО &Описание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НапоминанияПользователя.Источник.Наименование
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.Пользователь = &Пользователь
		|	И НапоминанияПользователя.Источник.Наименование ПОДОБНО &Описание";
	Запрос.УстановитьПараметр("Описание", "%" + Текст + "%");
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	
	Данные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Данные");
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(Данные);
	
	Для Каждого ЗначениеДанных Из ДанныеВыбора Цикл
		
		ПозицияНачало = СтрНайти(НРег(ЗначениеДанных.Значение), НРег(Текст));
		ПозицияКонец = ПозицияНачало + СтрДлина(Текст);
		
		МассивЧастейСлова = Новый Массив; // Массив из Строка
		МассивЧастейСлова.Добавить(Лев(ЗначениеДанных.Значение, ПозицияНачало - 1));
		МассивЧастейСлова.Добавить(
			Новый ФорматированнаяСтрока(
				Сред(ЗначениеДанных, ПозицияНачало, ПозицияКонец - ПозицияНачало), ,
				ЦветаСтиля.ЦветАкцентированияМоиПароли));
		МассивЧастейСлова.Добавить(Сред(ЗначениеДанных.Значение, ПозицияКонец));
		
		ЗначениеДанных.Представление = Новый ФорматированнаяСтрока(МассивЧастейСлова);
		
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВернутьУдаленноеНапоминаниеНаСервере(Знач Описание, Знач ВремяСобытия, Знач Источник)
	
	НапоминанияПользователя.УстановитьНапоминание(Описание, ВремяСобытия, , Источник);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
